import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,b as n}from"./app-CUF_8zVg.js";const e="/img/softExamination/requirementAcquisition.jpg",s="/img/softExamination/1.jpg",o="/img/softExamination/2.jpg",p="/img/softExamination/3.jpg",h="/img/softExamination/4.jpg",r="/img/softExamination/5.jpg",g="/img/softExamination/26.jpg",c="/img/softExamination/27.jpg",u="/img/softExamination/28.jpg",d="/img/softExamination/29.jpg",m="/img/softExamination/30.jpg",f="/img/softExamination/31.jpg",x="/img/softExamination/32.jpg",b="/img/softExamination/33.jpg",_="/img/softExamination/34.jpg",E="/img/softExamination/35.jpg",j="/img/softExamination/36.jpg",y="/img/softExamination/37.jpg",v="/img/softExamination/38.jpg",k="/img/softExamination/39.jpg",z="/img/softExamination/40.jpg",B="/img/softExamination/6.jpg",A="/img/softExamination/7.jpg",q="/img/softExamination/8.jpg",S="/img/softExamination/9.jpg",T="/img/softExamination/10.jpg",D="/img/softExamination/11.jpg",C="/img/softExamination/12.jpg",Z="/img/softExamination/13.jpg",V="/img/softExamination/14.jpg",F="/img/softExamination/15.jpg",N={};function P(R,i){return a(),t("div",null,i[0]||(i[0]=[n('<h2 id="软件过程模型" tabindex="-1"><a class="header-anchor" href="#软件过程模型"><span>软件过程模型</span></a></h2><h3 id="瀑布模型" tabindex="-1"><a class="header-anchor" href="#瀑布模型"><span>瀑布模型</span></a></h3><p>【特点】</p><ul><li>严格区分阶段，每个阶段因果关系紧密相连</li><li>只适合需求明确的项目</li></ul><p>【缺点】</p><ul><li>软件需求完整性、正确性难确定</li><li>严格串行化，很长时间才能看到结果</li><li>瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实</li></ul><h3 id="原型模型" tabindex="-1"><a class="header-anchor" href="#原型模型"><span>原型模型</span></a></h3><p>适合需求不明确的项目</p><p>原型模型两个阶段</p><ol><li>原型开发阶段</li><li>目标软件开发阶段</li></ol><h3 id="v模型" tabindex="-1"><a class="header-anchor" href="#v模型"><span>V模型</span></a></h3><p>测试贯穿于始终，测试分阶段，测试计划提前</p><h3 id="螺旋模型" tabindex="-1"><a class="header-anchor" href="#螺旋模型"><span>螺旋模型</span></a></h3><p>以快速原型为基础+瀑布模型，考虑了风险问题</p><h3 id="构建组装模型" tabindex="-1"><a class="header-anchor" href="#构建组装模型"><span>构建组装模型</span></a></h3><p>【优点】 以扩展、易重用、降低成本、安排任务更灵活 【缺点】 构建设计要求经验丰富的架构师、设计不好的构件难重用、强调重用可能牺牲其他指标（如性能）、第三方构件质量难控制 【示例】 方舱医院、乐高积木</p><h4 id="基于构件的软件工程-cbse" tabindex="-1"><a class="header-anchor" href="#基于构件的软件工程-cbse"><span>基于构件的软件工程（CBSE）</span></a></h4><p>CBSE体现了【购买而不是重新构造】的哲学</p><p>【CBSE的构件应该具备的特征】</p><ol><li>可组装性：所有外部交互必须通过公开定义的接口进行</li><li>可部署性：构件总是二进制形式的，能作为一个独立实体在平台上运行</li><li>文档化：用户根据文档来判断构件是否满足需求</li><li>独立性：可以在无其他特殊构件的情况下进行组装和部署</li><li>标准化：符合某种标准化的构件模型</li></ol><p>【构件的组装】</p><ol><li>顺序组装：按顺序调用已经存在的构件，可以用两个已经存在的构件来创造一个新的构件</li><li>层次组装：被调用构件的“提供”接口必须和调用构件的“请求”接口兼容</li><li>叠加组装：多个构件合并形成新构件，新构件整合原构件的功能，对外提供新的接口</li></ol><h2 id="统一过程" tabindex="-1"><a class="header-anchor" href="#统一过程"><span>统一过程</span></a></h2><p>用例驱动、以架构为中心、迭代和增量</p><ul><li>初始 <ul><li>定义最终产品视图和业务模型</li><li>确定系统范围</li></ul></li><li>细化 <ul><li>设计及确定系统架构</li><li>指定工作技术啊及资源要求</li></ul></li><li>构造 <ul><li>开发剩余构件和应用程序功能，把这些构件集成为产品，并进行详细测试</li></ul></li><li>移交 <ul><li>确保软件对最终用户是可用的，进行测试，制作产品发布版本</li></ul></li></ul><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><ul><li>业务建模</li><li>需求</li><li>分析与设计</li><li>实现</li><li>测试</li><li>部署</li><li>配置与变更管理</li><li>项目管理</li><li>环境</li></ul><h2 id="敏捷方法" tabindex="-1"><a class="header-anchor" href="#敏捷方法"><span>敏捷方法</span></a></h2><p>特点</p><ul><li>适应性的</li><li>以人为本</li><li>增量迭代，小步快跑</li></ul><h3 id="敏捷方法-1" tabindex="-1"><a class="header-anchor" href="#敏捷方法-1"><span>敏捷方法</span></a></h3><p>4大价值观</p><ul><li><p>沟通【加强面对面沟通】</p></li><li><p>简单【不过度设计】</p></li><li><p>反馈【及时反馈】</p></li><li><p>勇气【姐搜变更的勇气】</p></li><li><p>极限编程：价值观【交流、朴素、反馈、勇气】、近螺旋式的开发方法</p></li><li><p>水晶方法：提倡“机动性”的方法，拥有对不同类型项目非常有效的敏捷过程</p></li><li><p>SCRUM：侧重于项目管理</p></li><li><p>特征驱动开发方法：认为有效的软件开发需要3要素【人、过程、技术】。定义了6种关键的项目角色：项目经理、首席结构设计师、开发经理、主程序员、程序员和领域专家</p></li><li><p>开放式源码：程序开发人员在地域上分布很广【其他方法强调集中办公】</p></li><li><p>ASD方法：其核心是三个非线形的、重叠的开发阶段：猜测、合作与学习</p></li><li><p>动态系统开发方法：倡导以业务为核心</p></li></ul><h2 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程"><span>逆向工程</span></a></h2><p>实现级：包括程序的抽象语法树、符号表、过程的设计表示 结构级：包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图、程序和数据结构 功能级：包括反映程序段功能及程序段之间关系的信息，例如数据和控制流模型 领域级：包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息，例如实体关系模型</p><p>与逆向工程相关的概念有重构、设计恢复、再工程和正向工程</p><ol><li>重构/重组。重构是指在【同一抽象级别】上【转换系统描述形式】</li><li>设计恢复。设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面的信息</li><li>逆向工程。逆向工程是分析程序，力图在比源代码更高抽象层次上建立程序的表示过程，逆向工程是设计的恢复过程</li><li>正向工程。正向工程是指不仅从现有系统中恢复设计信息，而且使用该信息去改变或重构现有系统，以改善其整体质量</li><li>再工程/重构工程。再工程是对现有系统的重新开发过程，包括逆向工程、新需求的考虑过程和正向工程三个步骤</li></ol><h2 id="净室软件工程" tabindex="-1"><a class="header-anchor" href="#净室软件工程"><span>净室软件工程</span></a></h2><ul><li>净室即无尘室、洁净室。也就是一个受控污染级别的环境</li><li>使用盒结构规约（或形式化方法）进行分析和设计建模，并且强调将正确性验证，而不是测试，作为发现和消除错误的主要机制</li><li>使用统计的测试来获取认证被交付的软件的可靠性所必需的出错率信息</li></ul><p>【技术手段】</p><ul><li>统计过程控制下的增量式开发：控制迭代</li><li>基于函数的规范和设计：盒子结构 <ul><li>定义3种抽象层次：行为视图（黑盒）-》有限状态机视图（状态盒）-》过程视图（明盒）</li></ul></li><li>正确性验证：净室工程的核心</li><li>统计测试和软件认证：使用统计学原理，总体太大时必须采用抽样方法</li></ul><p>【缺点】</p><ul><li>太理论化，正确性验证的步骤比较困难且耗时</li><li>开发小组不进行传统的模块测试，这是不现实的</li><li>脱胎于传统软件工程，不可避免带有传统软件工程的一些弊端</li></ul><h2 id="需求工程" tabindex="-1"><a class="header-anchor" href="#需求工程"><span>需求工程</span></a></h2><p>软件需求是指用户对系统在功能、行为、性能、设计约束等方面的期望。</p><p>【需求工程主要活动的阶段划分】</p><ul><li>需求获取</li><li>需求分析</li><li>形成需求规格【形成SRS】</li><li>需求确认与验证【形成需求基线（经过评审的SRS）】</li><li>需求管理【变更控制、版本控制、需求跟踪、需求状态跟踪】</li></ul><p>需求管理是对【需求基线的管理】</p><h3 id="需求获取" tabindex="-1"><a class="header-anchor" href="#需求获取"><span>需求获取</span></a></h3><p><img src="'+e+'" alt=" " loading="lazy"><img src="'+s+'" alt=" " loading="lazy"></p><h3 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析"><span>需求分析</span></a></h3><p><img src="'+o+'" alt=" " loading="lazy"><img src="'+p+'" alt=" " loading="lazy"><img src="'+h+'" alt=" " loading="lazy"><img src="'+r+'" alt=" " loading="lazy"></p><h4 id="数据流图" tabindex="-1"><a class="header-anchor" href="#数据流图"><span>数据流图</span></a></h4><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="数据流图平衡原则" tabindex="-1"><a class="header-anchor" href="#数据流图平衡原则"><span>数据流图平衡原则</span></a></h5><figure><img src="'+c+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="uml图" tabindex="-1"><a class="header-anchor" href="#uml图"><span>UML图</span></a></h4><h5 id="用例图" tabindex="-1"><a class="header-anchor" href="#用例图"><span>用例图</span></a></h5><p><img src="'+u+'" alt=" " loading="lazy"><img src="'+d+'" alt=" " loading="lazy"></p><blockquote><p>包含、扩展、泛化</p></blockquote><figure><img src="'+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="类图与对象图" tabindex="-1"><a class="header-anchor" href="#类图与对象图"><span>类图与对象图</span></a></h5><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>1：表示一个集合中的一个对象对应另一个集合中一个对象</li><li>0..*:表示一个集合中的一个对象对应另一个集合中的0个或多个对象（可以不对应）</li><li>1..*:表示一个集合中的一个对象对应另一个集合中的一个或多个对象（至少对应一个）</li><li>*：表示一个集合中的一个对象对应另一个集合中的多个对象</li></ul><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="顺序图" tabindex="-1"><a class="header-anchor" href="#顺序图"><span>顺序图</span></a></h5><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="通信图-协作图" tabindex="-1"><a class="header-anchor" href="#通信图-协作图"><span>通信图（协作图）</span></a></h5><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="状态图" tabindex="-1"><a class="header-anchor" href="#状态图"><span>状态图</span></a></h5><figure><img src="'+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="活动图" tabindex="-1"><a class="header-anchor" href="#活动图"><span>活动图</span></a></h5><p><img src="'+j+'" alt=" " loading="lazy"><img src="'+y+'" alt=" " loading="lazy"></p><h5 id="定时图" tabindex="-1"><a class="header-anchor" href="#定时图"><span>定时图</span></a></h5><figure><img src="'+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="构件图与包图" tabindex="-1"><a class="header-anchor" href="#构件图与包图"><span>构件图与包图</span></a></h5><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="部署图" tabindex="-1"><a class="header-anchor" href="#部署图"><span>部署图</span></a></h5><figure><img src="'+z+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="需求开发" tabindex="-1"><a class="header-anchor" href="#需求开发"><span>需求开发</span></a></h3><h4 id="需求定义" tabindex="-1"><a class="header-anchor" href="#需求定义"><span>需求定义</span></a></h4><ul><li>严格定义法 <ul><li>所有需求都能被预先定义</li><li>开发人员与用户之间能够准确而清晰地交流</li><li>采用图形/文字可以充分体现最终系统</li></ul></li><li>原型法 <ul><li>并非所有的需求都能在开发前被准确的说明</li><li>项目参加者之间通常都存在交流上的困难</li><li>需要实际的、可供用户参与的系统模型</li><li>有合适的系统开发环境</li><li>反复是完全需要和值得提倡的，需求一旦确定，就应该遵从严格的方法</li></ul></li></ul><h4 id="需求验证" tabindex="-1"><a class="header-anchor" href="#需求验证"><span>需求验证</span></a></h4><figure><img src="'+B+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="需求跟踪" tabindex="-1"><a class="header-anchor" href="#需求跟踪"><span>需求跟踪</span></a></h3><figure><img src="'+A+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="需求变更" tabindex="-1"><a class="header-anchor" href="#需求变更"><span>需求变更</span></a></h3><p>识别出问题 -》 问题分析和变更描述 -》 变更分析和成本计算 -》 变更实现 -》 修改后端需求</p><h3 id="软件系统建模" tabindex="-1"><a class="header-anchor" href="#软件系统建模"><span>软件系统建模</span></a></h3><figure><img src="'+q+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="人机界面设计" tabindex="-1"><a class="header-anchor" href="#人机界面设计"><span>人机界面设计</span></a></h3><ul><li>置于用户控制之下 <ul><li>以不强迫用户进入不必要的或不希望的动作方式来定义交互方式</li><li>提供灵活的交互</li><li>允许用户交互可以被中断和撤销</li><li>当技能级别增加时可以使交互流水化并允许定制交互</li><li>式用户隔离内部技术细节</li><li>设计应允许用户和出现在屏幕上的对象直接交互</li></ul></li><li>减少用户的记忆负担 <ul><li>减少对短期记忆的要求</li><li>建立有意义的缺省</li><li>定义直觉性的捷径</li><li>界面的视觉布局应该基于真实的世界的隐喻</li><li>以不断进展的方式揭示信息</li></ul></li><li>保持界面的一致性 <ul><li>允许用户将当前任务放入有意义的语境</li><li>在应用系列内保持一致性</li><li>如过去的交互模型已建立了用户的期望，除非有迫不得已的理由不要改变它</li></ul></li></ul><h3 id="结构化设计" tabindex="-1"><a class="header-anchor" href="#结构化设计"><span>结构化设计</span></a></h3><ul><li>概要设计【外部设计】：功能需求分配给软件模块，确定每个模块的功能和调用关系，形成模块结构图</li><li>详细设计【内部设计】：为每个具体任务选择适当的技术手段和处理方法</li></ul><h4 id="结构化设计原则" tabindex="-1"><a class="header-anchor" href="#结构化设计原则"><span>结构化设计原则</span></a></h4><ul><li>模块独立性原型（高内聚、低耦合）</li><li>保持模块的大小适中</li><li>多扇入，少扇出</li><li>深度和宽度均不宜过高</li></ul><h5 id="内聚" tabindex="-1"><a class="header-anchor" href="#内聚"><span>内聚</span></a></h5><figure><img src="'+S+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="耦合" tabindex="-1"><a class="header-anchor" href="#耦合"><span>耦合</span></a></h5><figure><img src="'+T+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="模块四要素" tabindex="-1"><a class="header-anchor" href="#模块四要素"><span>模块四要素</span></a></h4><ul><li>输入和输出：模块的输入来源和输出去向都是同一个调用者，即一个模块从调用者那取得输入，进行加工后再把输出返回调用者</li><li>处理功能：：值模块把输入转换成输出所作的工作</li><li>内部数据：指仅供该模块本身引用的数据</li><li>程序代码：值用来实现模块功能的程序</li></ul><h2 id="面向对象设计" tabindex="-1"><a class="header-anchor" href="#面向对象设计"><span>面向对象设计</span></a></h2><h3 id="基本过程" tabindex="-1"><a class="header-anchor" href="#基本过程"><span>基本过程</span></a></h3><figure><img src="'+D+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="类的分类" tabindex="-1"><a class="header-anchor" href="#类的分类"><span>类的分类</span></a></h3><ul><li>边界类 <ul><li>数据</li></ul></li><li>控制类 <ul><li>应用逻辑</li><li>业务逻辑</li><li>数据访问逻辑</li></ul></li><li>实体类 <ul><li>API接口</li><li>用户界面</li></ul></li></ul><h3 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h3><ul><li>单一职责原则：设计目的单一的类</li><li>开放-封闭原则：对扩展开放，对修改封闭</li><li>李氏替换原则：子类可以替换父类</li><li>依赖倒置原则：要依赖与抽象，而不是具体实现；针对接口编程，不要针对实现编程</li><li>接口隔离原则：使用多个专门的接口比使用单一的总接口要好</li><li>组合重用原则：要尽量使用组合，而不是继承关系达到重用目的</li><li>迪米特原则（最少知识原则）：一个对象应当对其他对象有尽可能少的了解</li></ul><h2 id="软件测试" tabindex="-1"><a class="header-anchor" href="#软件测试"><span>软件测试</span></a></h2><ul><li>动态测试【计算机运行】 <ul><li>白盒测试法</li><li>黑盒测试法</li><li>灰盒测试法</li></ul></li><li>静态测试【人工监测和计算机辅助分析】 <ul><li>桌前检查</li><li>代码审查</li><li>代码走查</li></ul></li></ul><p>控制流分析：是否存在没有使用的语句/无法达到的语句/调用并不存在的子程序 数据流分析：引用未定义的变量、对以前未使用的变量再次赋值 接口分析：模块之间接口的一致性、子程序和函数之间的接口一致性、函数形参与实参的数量、顺序、类型的一致性 表达式分析：括号不配对、数组引用越界、除数为零</p><h3 id="白盒测试与黑盒测试" tabindex="-1"><a class="header-anchor" href="#白盒测试与黑盒测试"><span>白盒测试与黑盒测试</span></a></h3><ul><li>白盒测试【结构测试】：主要用于单元测试阶段 <ul><li>控制流测试【逻辑覆盖测试】（语句覆盖最弱，路径测试覆盖最强）</li><li>数据流测试</li><li>程序变异测试【错误驱动测试】</li></ul></li><li>黑盒测试【功能测试】：主要用于集成测试、确认测试和系统测试阶段 <ul><li>等价类划分：不同等价类，揭示不同问题；有效等价类/无效等价类</li><li>边界值分析：<code>1&lt;x&lt;=10</code>,可取的x值为0、1、10和11作为测试数据</li><li>错误推测：依靠测试人员的经验和直觉</li><li>判定表：最适合描述在多个逻辑条件取值的组合所构成的复杂情况下，分别要执行哪些不同的动作</li><li>因果图：根据输入条件与输出结果之间的因果关系来设计测试用例</li></ul></li></ul><h3 id="软件测试阶段" tabindex="-1"><a class="header-anchor" href="#软件测试阶段"><span>软件测试阶段</span></a></h3><ul><li>单元测试：依据【详细设计】，模块测试，模块功能、性能、接口等</li><li>集成测试：依据【概要设计】，模块间的接口</li><li>系统测试：依据【需求文档】，在真实环境下，验证完整的软件配置项能否和系统正确连接</li><li>确认测试：依据【需求文档】，验证软件与需求的一致性。内部确认测试、Alpha测试、Beta测试、验收测试</li><li>回归测试：测试软件变更后，变更部分的正确性和对变更需求的符合性</li></ul><h4 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试"><span>集成测试</span></a></h4><figure><img src="'+C+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="系统测试" tabindex="-1"><a class="header-anchor" href="#系统测试"><span>系统测试</span></a></h4><figure><img src="'+Z+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="系统转换计划" tabindex="-1"><a class="header-anchor" href="#系统转换计划"><span>系统转换计划</span></a></h2><h3 id="遗留系统演化策略" tabindex="-1"><a class="header-anchor" href="#遗留系统演化策略"><span>遗留系统演化策略</span></a></h3><figure><img src="'+V+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="新旧系统的转换策略" tabindex="-1"><a class="header-anchor" href="#新旧系统的转换策略"><span>新旧系统的转换策略</span></a></h3><ul><li>直接转换策略</li><li>并行转换策略</li><li>分段转换策略</li></ul><h3 id="数据转换与迁移" tabindex="-1"><a class="header-anchor" href="#数据转换与迁移"><span>数据转换与迁移</span></a></h3><figure><img src="'+F+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="软件维护" tabindex="-1"><a class="header-anchor" href="#软件维护"><span>软件维护</span></a></h2><h3 id="影响可维护性的因素" tabindex="-1"><a class="header-anchor" href="#影响可维护性的因素"><span>影响可维护性的因素</span></a></h3><ul><li>【可理解性】是指通过阅读源代码和相关文档，了解软件的功能和如何运行的容易程度</li><li>【可修改性】是指修改软件的难易程度</li><li>【可测试性】是指验证软件程序正确的难易程度。可测试性好的软件，通常意味着软件设计简单，复杂性低。因为软件的复杂性越大，测试的难度也就越大</li><li>【可靠性】一个软件的可靠性越高，需要维护的概率就会越低</li><li>【可移植性】是指将软件从一个环境移植到新的环境下正确运行的难易程度。软件运行环境的变化是软件维护的一种常见情形，可移植性好的软件会降低维护的概率</li></ul><h3 id="软件维护的类型" tabindex="-1"><a class="header-anchor" href="#软件维护的类型"><span>软件维护的类型</span></a></h3><ul><li>正确性维护/改正性维护【修BUG】：识别和纠正软件错误/缺陷，测试不可能发现所有错误</li><li>适应性维护【应变】：指使应用软件适应环境变化【外部环境、数据环境】而进行的修改</li><li>完善性维护【新需求】：扩充功能和改善性能而进行的修改</li><li>预防性维护【针对未来】：为了适应未来的软硬件环境的变化，应主动增加预防性的新的功能，以使用系统适应各类变化而不被淘汰。经典实例：【专用】改【通用】</li></ul>',132)]))}const w=l(N,[["render",P],["__file","02.软件工程.html.vue"]]),G=JSON.parse('{"path":"/study/%E8%BD%AF%E8%80%83/02.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html","title":"软件工程","lang":"zh-CN","frontmatter":{"title":"软件工程","icon":"sheji","order":2,"date":"2024-06-30T00:00:00.000Z","category":["软考"],"tag":["软考"],"description":"软件过程模型 瀑布模型 【特点】 严格区分阶段，每个阶段因果关系紧密相连 只适合需求明确的项目 【缺点】 软件需求完整性、正确性难确定 严格串行化，很长时间才能看到结果 瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实 原型模型 适合需求不明确的项目 原型模型两个阶段 原型开发阶段 目标软件开发阶段 V模型 测试贯穿于始终，测试分阶段，测试计划提...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/%E8%BD%AF%E8%80%83/02.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"软件工程"}],["meta",{"property":"og:description","content":"软件过程模型 瀑布模型 【特点】 严格区分阶段，每个阶段因果关系紧密相连 只适合需求明确的项目 【缺点】 软件需求完整性、正确性难确定 严格串行化，很长时间才能看到结果 瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实 原型模型 适合需求不明确的项目 原型模型两个阶段 原型开发阶段 目标软件开发阶段 V模型 测试贯穿于始终，测试分阶段，测试计划提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/softExamination/requirementAcquisition.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"软考"}],["meta",{"property":"article:published_time","content":"2024-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件工程\\",\\"image\\":[\\"https://luotianxu1.github.io/img/softExamination/requirementAcquisition.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/1.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/2.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/3.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/4.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/5.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/26.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/27.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/28.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/29.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/30.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/31.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/32.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/33.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/34.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/35.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/36.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/37.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/38.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/39.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/40.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/6.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/7.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/8.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/9.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/10.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/11.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/12.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/13.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/14.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/15.jpg\\"],\\"datePublished\\":\\"2024-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"软件过程模型","slug":"软件过程模型","link":"#软件过程模型","children":[{"level":3,"title":"瀑布模型","slug":"瀑布模型","link":"#瀑布模型","children":[]},{"level":3,"title":"原型模型","slug":"原型模型","link":"#原型模型","children":[]},{"level":3,"title":"V模型","slug":"v模型","link":"#v模型","children":[]},{"level":3,"title":"螺旋模型","slug":"螺旋模型","link":"#螺旋模型","children":[]},{"level":3,"title":"构建组装模型","slug":"构建组装模型","link":"#构建组装模型","children":[]}]},{"level":2,"title":"统一过程","slug":"统一过程","link":"#统一过程","children":[{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]}]},{"level":2,"title":"敏捷方法","slug":"敏捷方法","link":"#敏捷方法","children":[{"level":3,"title":"敏捷方法","slug":"敏捷方法-1","link":"#敏捷方法-1","children":[]}]},{"level":2,"title":"逆向工程","slug":"逆向工程","link":"#逆向工程","children":[]},{"level":2,"title":"净室软件工程","slug":"净室软件工程","link":"#净室软件工程","children":[]},{"level":2,"title":"需求工程","slug":"需求工程","link":"#需求工程","children":[{"level":3,"title":"需求获取","slug":"需求获取","link":"#需求获取","children":[]},{"level":3,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":3,"title":"需求开发","slug":"需求开发","link":"#需求开发","children":[]},{"level":3,"title":"需求跟踪","slug":"需求跟踪","link":"#需求跟踪","children":[]},{"level":3,"title":"需求变更","slug":"需求变更","link":"#需求变更","children":[]},{"level":3,"title":"软件系统建模","slug":"软件系统建模","link":"#软件系统建模","children":[]},{"level":3,"title":"人机界面设计","slug":"人机界面设计","link":"#人机界面设计","children":[]},{"level":3,"title":"结构化设计","slug":"结构化设计","link":"#结构化设计","children":[]}]},{"level":2,"title":"面向对象设计","slug":"面向对象设计","link":"#面向对象设计","children":[{"level":3,"title":"基本过程","slug":"基本过程","link":"#基本过程","children":[]},{"level":3,"title":"类的分类","slug":"类的分类","link":"#类的分类","children":[]},{"level":3,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]}]},{"level":2,"title":"软件测试","slug":"软件测试","link":"#软件测试","children":[{"level":3,"title":"白盒测试与黑盒测试","slug":"白盒测试与黑盒测试","link":"#白盒测试与黑盒测试","children":[]},{"level":3,"title":"软件测试阶段","slug":"软件测试阶段","link":"#软件测试阶段","children":[]}]},{"level":2,"title":"系统转换计划","slug":"系统转换计划","link":"#系统转换计划","children":[{"level":3,"title":"遗留系统演化策略","slug":"遗留系统演化策略","link":"#遗留系统演化策略","children":[]},{"level":3,"title":"新旧系统的转换策略","slug":"新旧系统的转换策略","link":"#新旧系统的转换策略","children":[]},{"level":3,"title":"数据转换与迁移","slug":"数据转换与迁移","link":"#数据转换与迁移","children":[]}]},{"level":2,"title":"软件维护","slug":"软件维护","link":"#软件维护","children":[{"level":3,"title":"影响可维护性的因素","slug":"影响可维护性的因素","link":"#影响可维护性的因素","children":[]},{"level":3,"title":"软件维护的类型","slug":"软件维护的类型","link":"#软件维护的类型","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":12.85,"words":3854},"filePathRelative":"study/软考/02.软件工程.md","localizedDate":"2024年6月30日","excerpt":"<h2>软件过程模型</h2>\\n<h3>瀑布模型</h3>\\n<p>【特点】</p>\\n<ul>\\n<li>严格区分阶段，每个阶段因果关系紧密相连</li>\\n<li>只适合需求明确的项目</li>\\n</ul>\\n<p>【缺点】</p>\\n<ul>\\n<li>软件需求完整性、正确性难确定</li>\\n<li>严格串行化，很长时间才能看到结果</li>\\n<li>瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实</li>\\n</ul>\\n<h3>原型模型</h3>\\n<p>适合需求不明确的项目</p>\\n<p>原型模型两个阶段</p>\\n<ol>\\n<li>原型开发阶段</li>\\n<li>目标软件开发阶段</li>\\n</ol>","autoDesc":true}');export{w as comp,G as data};
