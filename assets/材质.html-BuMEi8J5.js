import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as l,b as t}from"./app-DhXEf2lS.js";const i={};function r(s,e){return n(),l("div",null,e[0]||(e[0]=[t('<h2 id="material" tabindex="-1"><a class="header-anchor" href="#material"><span>Material</span></a></h2><p>材质的抽象基类。</p><p>材质描述了对象objects的外观。它们的定义方式与渲染器无关， 因此，如果您决定使用不同的渲染器，不必重写材质。</p><p>所有其他材质类型都继承了以下属性和方法（尽管它们可能具有不同的默认值）。</p><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><h3 id="material-1" tabindex="-1"><a class="header-anchor" href="#material-1"><span>Material()</span></a></h3><p>该方法创建一个通用材质。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><h3 id="alphatest-float" tabindex="-1"><a class="header-anchor" href="#alphatest-float"><span>.alphaTest : Float</span></a></h3><p>设置运行alphaTest时要使用的alpha值。如果不透明度低于此值，则不会渲染材质。默认值为0。</p><h3 id="alphatocoverage-boolean" tabindex="-1"><a class="header-anchor" href="#alphatocoverage-boolean"><span>.alphaToCoverage : Boolean</span></a></h3><p>启用alpha to coverage. 只能在开启了MSAA的渲染环境中使用 (当渲染器创建的时候antialias 属性要true才能使用). 默认为 false.</p><h3 id="blenddst-integer" tabindex="-1"><a class="header-anchor" href="#blenddst-integer"><span>.blendDst : Integer</span></a></h3><p>混合目标。默认值为OneMinusSrcAlphaFactor。 目标因子所有可能的取值请参阅constants。 必须将材质的blending设置为CustomBlending才能生效。</p><h3 id="blenddstalpha-integer" tabindex="-1"><a class="header-anchor" href="#blenddstalpha-integer"><span>.blendDstAlpha : Integer</span></a></h3><p>.blendDst的透明度。 默认值为 null.</p><h3 id="blendequation-integer" tabindex="-1"><a class="header-anchor" href="#blendequation-integer"><span>.blendEquation : Integer</span></a></h3><p>使用混合时所采用的混合方程式。默认值为AddEquation。 混合方程式所有可能的取值请参阅constants。 必须将材质的blending设置为CustomBlending才能生效。</p><h3 id="blendequationalpha-integer" tabindex="-1"><a class="header-anchor" href="#blendequationalpha-integer"><span>.blendEquationAlpha : Integer</span></a></h3><p>.blendEquation 的透明度. 默认值为 null.</p><h3 id="blending-blending" tabindex="-1"><a class="header-anchor" href="#blending-blending"><span>.blending : Blending</span></a></h3><p>在使用此材质显示对象时要使用何种混合。 必须将其设置为CustomBlending才能使用自定义blendSrc, blendDst 或者 [page:Constant blendEquation]。 混合模式所有可能的取值请参阅constants。默认值为NormalBlending。</p><h3 id="blendsrc-integer" tabindex="-1"><a class="header-anchor" href="#blendsrc-integer"><span>.blendSrc : Integer</span></a></h3><p>混合源。默认值为SrcAlphaFactor。 源因子所有可能的取值请参阅constants。 必须将材质的blending设置为CustomBlending才能生效。</p><h3 id="blendsrcalpha-integer" tabindex="-1"><a class="header-anchor" href="#blendsrcalpha-integer"><span>.blendSrcAlpha : Integer</span></a></h3><p>.blendSrc的透明度。 默认值为 null.</p><h3 id="clipintersection-boolean" tabindex="-1"><a class="header-anchor" href="#clipintersection-boolean"><span>.clipIntersection : Boolean</span></a></h3><p>更改剪裁平面的行为，以便仅剪切其交叉点，而不是它们的并集。默认值为 false。</p><h3 id="clippingplanes-array" tabindex="-1"><a class="header-anchor" href="#clippingplanes-array"><span>.clippingPlanes : Array</span></a></h3><p>用户定义的剪裁平面，在世界空间中指定为THREE.Plane对象。这些平面适用于所有使用此材质的对象。空间中与平面的有符号距离为负的点被剪裁（未渲染）。 这需要WebGLRenderer.localClippingEnabled为true。 示例请参阅WebGL / clipping /intersection。默认值为 null。</p><h3 id="clipshadows-boolean" tabindex="-1"><a class="header-anchor" href="#clipshadows-boolean"><span>.clipShadows : Boolean</span></a></h3><p>定义是否根据此材质上指定的剪裁平面剪切阴影。默认值为 false。</p><h3 id="colorwrite-boolean" tabindex="-1"><a class="header-anchor" href="#colorwrite-boolean"><span>.colorWrite : Boolean</span></a></h3><p>是否渲染材质的颜色。 这可以与网格的renderOrder属性结合使用，以创建遮挡其他对象的不可见对象。默认值为true。</p><h3 id="defines-object" tabindex="-1"><a class="header-anchor" href="#defines-object"><span>.defines : Object</span></a></h3><p>注入shader的自定义对象。 以键值对形式的对象传递，{ MY_CUSTOM_DEFINE: &#39;&#39; , PI2: Math.PI * 2 }。 这些键值对在顶点和片元着色器中定义。默认值为undefined。</p><h3 id="depthfunc-integer" tabindex="-1"><a class="header-anchor" href="#depthfunc-integer"><span>.depthFunc : Integer</span></a></h3><p>使用何种深度函数。默认为LessEqualDepth。 深度模式所有可能的取值请查阅constants。</p><h3 id="depthtest-boolean" tabindex="-1"><a class="header-anchor" href="#depthtest-boolean"><span>.depthTest : Boolean</span></a></h3><p>是否在渲染此材质时启用深度测试。默认为 true。</p><h3 id="depthwrite-boolean" tabindex="-1"><a class="header-anchor" href="#depthwrite-boolean"><span>.depthWrite : Boolean</span></a></h3><p>渲染此材质是否对深度缓冲区有任何影响。默认为true。</p><p>在绘制2D叠加时，将多个事物分层在一起而不创建z-index时，禁用深度写入会很有用。</p><h3 id="forcesinglepass-boolean" tabindex="-1"><a class="header-anchor" href="#forcesinglepass-boolean"><span>.forceSinglePass : Boolean</span></a></h3><p>双面透明对象是否应该用单次传递渲染。默认为false。</p><h3 id="ismaterial-boolean" tabindex="-1"><a class="header-anchor" href="#ismaterial-boolean"><span>.isMaterial : Boolean</span></a></h3><p>检查这个对象是否为材质Material的只读标记.</p><h3 id="stencilwrite-boolean" tabindex="-1"><a class="header-anchor" href="#stencilwrite-boolean"><span>.stencilWrite : Boolean</span></a></h3><p>是否对模板缓冲执行模板操作，如果执行写入或者与模板缓冲进行比较，这个值需要设置为true。默认为false。</p><h3 id="stencilwritemask-integer" tabindex="-1"><a class="header-anchor" href="#stencilwritemask-integer"><span>.stencilWriteMask : Integer</span></a></h3><p>写入模板缓冲区时所用的位元遮罩，默认为0xFF。</p><h3 id="stencilfunc-integer" tabindex="-1"><a class="header-anchor" href="#stencilfunc-integer"><span>.stencilFunc : Integer</span></a></h3><p>使用模板比较时所用的方法，默认为AlwaysStencilFunc。在模板函数 constants 中查看可用的值</p><h3 id="stencilref-integer" tabindex="-1"><a class="header-anchor" href="#stencilref-integer"><span>.stencilRef : Integer</span></a></h3><p>在进行模板比较或者模板操作的时候所用的基准值，默认为0。</p><h3 id="stencilfuncmask-integer" tabindex="-1"><a class="header-anchor" href="#stencilfuncmask-integer"><span>.stencilFuncMask : Integer</span></a></h3><p>与模板缓冲进行比较时所使用的位元遮罩，默认为0xFF</p><h3 id="stencilfail-integer" tabindex="-1"><a class="header-anchor" href="#stencilfail-integer"><span>.stencilFail : Integer</span></a></h3><p>当比较函数没有通过的时候要执行的模板操作，默认为KeepStencilOp，在模板操作 constants 查看可用值。</p><h3 id="stencilzfail-integer" tabindex="-1"><a class="header-anchor" href="#stencilzfail-integer"><span>.stencilZFail : Integer</span></a></h3><p>当比较函数通过了但是深度检测没有通过的时候要执行的模板操作， 默认为KeepStencilOp，在模板操作 constants 查看可用值。</p><h3 id="stencilzpass-integer" tabindex="-1"><a class="header-anchor" href="#stencilzpass-integer"><span>.stencilZPass : Integer</span></a></h3><p>当比较函数和深度检测都通过时要执行的模板操作，默认为KeepStencilOp，在模板操作constants 中查看可用值。</p><h3 id="id-integer" tabindex="-1"><a class="header-anchor" href="#id-integer"><span>.id : Integer</span></a></h3><p>此材质实例的唯一编号。</p><h3 id="name-string" tabindex="-1"><a class="header-anchor" href="#name-string"><span>.name : String</span></a></h3><p>对象的可选名称（不必是唯一的）。默认值为空字符串。</p><h3 id="needsupdate-boolean" tabindex="-1"><a class="header-anchor" href="#needsupdate-boolean"><span>.needsUpdate : Boolean</span></a></h3><p>指定需要重新编译材质。</p><h3 id="opacity-float" tabindex="-1"><a class="header-anchor" href="#opacity-float"><span>.opacity : Float</span></a></h3><p>在0.0 - 1.0的范围内的浮点数，表明材质的透明度。值0.0表示完全透明，1.0表示完全不透明。 如果材质的transparent属性未设置为true，则材质将保持完全不透明，此值仅影响其颜色。 默认值为1.0。</p><h3 id="polygonoffset-boolean" tabindex="-1"><a class="header-anchor" href="#polygonoffset-boolean"><span>.polygonOffset : Boolean</span></a></h3><p>是否使用多边形偏移。默认值为false。这对应于WebGL的GL_POLYGON_OFFSET_FILL功能。</p><h3 id="polygonoffsetfactor-integer" tabindex="-1"><a class="header-anchor" href="#polygonoffsetfactor-integer"><span>.polygonOffsetFactor : Integer</span></a></h3><p>设置多边形偏移系数。默认值为0。</p><h3 id="polygonoffsetunits-integer" tabindex="-1"><a class="header-anchor" href="#polygonoffsetunits-integer"><span>.polygonOffsetUnits : Integer</span></a></h3><p>设置多边形偏移单位。默认值为0。</p><h3 id="precision-string" tabindex="-1"><a class="header-anchor" href="#precision-string"><span>.precision : String</span></a></h3><p>重写此材质渲染器的默认精度。可以是&quot;highp&quot;, &quot;mediump&quot; 或 &quot;lowp&quot;。默认值为null。</p><h3 id="premultipliedalpha-boolean" tabindex="-1"><a class="header-anchor" href="#premultipliedalpha-boolean"><span>.premultipliedAlpha : Boolean</span></a></h3><p>是否预乘alpha（透明度）值。有关差异的示例，请参阅WebGL / Materials / Physical / Transmission。 默认值为false。</p><h3 id="dithering-boolean" tabindex="-1"><a class="header-anchor" href="#dithering-boolean"><span>.dithering : Boolean</span></a></h3><p>是否对颜色应用抖动以消除条带的外观。默认值为 false。</p><h3 id="shadowside-integer" tabindex="-1"><a class="header-anchor" href="#shadowside-integer"><span>.shadowSide : Integer</span></a></h3><p>定义投影的面。设置时，可以是THREE.FrontSide, THREE.BackSide, 或Materials。默认值为 null。 如果为null， 则面投射阴影确定如下：</p><ul><li>THREE.FrontSide 背面</li><li>THREE.BackSide 前面</li><li>THREE.DoubleSide 双面</li></ul><h3 id="side-integer" tabindex="-1"><a class="header-anchor" href="#side-integer"><span>.side : Integer</span></a></h3><p>定义将要渲染哪一面 - 正面，背面或两者。 默认为THREE.FrontSide。其他选项有THREE.BackSide 和 THREE.DoubleSide。</p><h3 id="tonemapped-boolean" tabindex="-1"><a class="header-anchor" href="#tonemapped-boolean"><span>.toneMapped : Boolean</span></a></h3><p>定义这个材质是否会被渲染器的toneMapping设置所影响，默认为 true 。</p><h3 id="transparent-boolean" tabindex="-1"><a class="header-anchor" href="#transparent-boolean"><span>.transparent : Boolean</span></a></h3><p>定义此材质是否透明。这对渲染有影响，因为透明对象需要特殊处理，并在非透明对象之后渲染。 设置为true时，通过设置材质的opacity属性来控制材质透明的程度。 默认值为false。</p><h3 id="type-string" tabindex="-1"><a class="header-anchor" href="#type-string"><span>.type : String</span></a></h3><p>值是字符串&#39;Material&#39;。不应该被更改，并且可以用于在场景中查找此类型的所有对象。</p><h3 id="uuid-string" tabindex="-1"><a class="header-anchor" href="#uuid-string"><span>.uuid : String</span></a></h3><p>此材质实例的UUID，会自动分配，不应该被更改。</p><h3 id="version-integer" tabindex="-1"><a class="header-anchor" href="#version-integer"><span>.version : Integer</span></a></h3><p>开始为0，会记录 .needsUpdate : Boolean设置为true的次数。</p><h3 id="vertexcolors-boolean" tabindex="-1"><a class="header-anchor" href="#vertexcolors-boolean"><span>.vertexColors : Boolean</span></a></h3><p>是否使用顶点着色。默认值为false。</p><h3 id="visible-boolean" tabindex="-1"><a class="header-anchor" href="#visible-boolean"><span>.visible : Boolean</span></a></h3><p>此材质是否可见。默认为true。</p><h3 id="userdata-object" tabindex="-1"><a class="header-anchor" href="#userdata-object"><span>.userData : Object</span></a></h3><p>一个对象，可用于存储有关Material的自定义数据。它不应该包含对函数的引用，因为这些函数不会被克隆。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="clone-material" tabindex="-1"><a class="header-anchor" href="#clone-material"><span>.clone ( ) : Material</span></a></h3><p>返回与此材质具有相同参数的新材质。</p><h3 id="copy-material-material-this" tabindex="-1"><a class="header-anchor" href="#copy-material-material-this"><span>.copy ( material : material ) : this</span></a></h3><p>将被传入材质中的参数复制到此材质中。</p><h3 id="dispose-undefined" tabindex="-1"><a class="header-anchor" href="#dispose-undefined"><span>.dispose () : undefined</span></a></h3><p>处理材质。材质的纹理不会被处理。需要通过Texture处理。</p><h3 id="onbeforecompile-shader-shader-renderer-webglrenderer-undefined" tabindex="-1"><a class="header-anchor" href="#onbeforecompile-shader-shader-renderer-webglrenderer-undefined"><span>.onBeforeCompile ( shader : Shader, renderer : WebGLRenderer ) : undefined</span></a></h3><p>在编译shader程序之前立即执行的可选回调。此函数使用shader源码作为参数。用于修改内置材质。</p><p>和其他属性不一样的是，这个回调在.clone()，.copy() 和 .toJSON() 中不支持。</p><h3 id="customprogramcachekey-string" tabindex="-1"><a class="header-anchor" href="#customprogramcachekey-string"><span>.customProgramCacheKey () : String</span></a></h3><p>当用到onBeforeCompile回调的时候，这个回调函数可以用来定义在onBeforeCompile中使用的配置项，这样three.js就可以根据这个回调返回的字符串来判定使用一个缓存的编译好的着色器代码还是根据需求重新编译一个新的着色器代码。</p><h3 id="setvalues-values-object-undefined" tabindex="-1"><a class="header-anchor" href="#setvalues-values-object-undefined"><span>.setValues ( values : Object ) : undefined</span></a></h3><p>values -- 具有参数的容器。 根据values设置属性。</p><h3 id="tojson-meta-object-object" tabindex="-1"><a class="header-anchor" href="#tojson-meta-object-object"><span>.toJSON ( meta : Object ) : Object</span></a></h3><p>meta -- 包含有元数据的对象，例如该对象的纹理或图片。 将material对象转换为 three.js JSON Object/Scene format（three.js JSON 物体/场景格式）。</p>',120)]))}const p=a(i,[["render",r],["__file","材质.html.vue"]]),h=JSON.parse('{"path":"/threejs/%E6%9D%90%E8%B4%A8/%E6%9D%90%E8%B4%A8.html","title":"Material(材质)","lang":"zh-CN","frontmatter":{"title":"Material(材质)","icon":"markdown","order":17,"date":"2023-03-20T00:00:00.000Z","category":["threejs"],"tag":["材质"],"description":"Material 材质的抽象基类。 材质描述了对象objects的外观。它们的定义方式与渲染器无关， 因此，如果您决定使用不同的渲染器，不必重写材质。 所有其他材质类型都继承了以下属性和方法（尽管它们可能具有不同的默认值）。 构造函数 Material() 该方法创建一个通用材质。 属性 .alphaTest : Float 设置运行alphaTest...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/threejs/%E6%9D%90%E8%B4%A8/%E6%9D%90%E8%B4%A8.html"}],["meta",{"property":"og:title","content":"Material(材质)"}],["meta",{"property":"og:description","content":"Material 材质的抽象基类。 材质描述了对象objects的外观。它们的定义方式与渲染器无关， 因此，如果您决定使用不同的渲染器，不必重写材质。 所有其他材质类型都继承了以下属性和方法（尽管它们可能具有不同的默认值）。 构造函数 Material() 该方法创建一个通用材质。 属性 .alphaTest : Float 设置运行alphaTest..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"材质"}],["meta",{"property":"article:published_time","content":"2023-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Material(材质)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Material","slug":"material","link":"#material","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"Material()","slug":"material-1","link":"#material-1","children":[]}]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":".alphaTest : Float","slug":"alphatest-float","link":"#alphatest-float","children":[]},{"level":3,"title":".alphaToCoverage : Boolean","slug":"alphatocoverage-boolean","link":"#alphatocoverage-boolean","children":[]},{"level":3,"title":".blendDst : Integer","slug":"blenddst-integer","link":"#blenddst-integer","children":[]},{"level":3,"title":".blendDstAlpha : Integer","slug":"blenddstalpha-integer","link":"#blenddstalpha-integer","children":[]},{"level":3,"title":".blendEquation : Integer","slug":"blendequation-integer","link":"#blendequation-integer","children":[]},{"level":3,"title":".blendEquationAlpha : Integer","slug":"blendequationalpha-integer","link":"#blendequationalpha-integer","children":[]},{"level":3,"title":".blending : Blending","slug":"blending-blending","link":"#blending-blending","children":[]},{"level":3,"title":".blendSrc : Integer","slug":"blendsrc-integer","link":"#blendsrc-integer","children":[]},{"level":3,"title":".blendSrcAlpha : Integer","slug":"blendsrcalpha-integer","link":"#blendsrcalpha-integer","children":[]},{"level":3,"title":".clipIntersection : Boolean","slug":"clipintersection-boolean","link":"#clipintersection-boolean","children":[]},{"level":3,"title":".clippingPlanes : Array","slug":"clippingplanes-array","link":"#clippingplanes-array","children":[]},{"level":3,"title":".clipShadows : Boolean","slug":"clipshadows-boolean","link":"#clipshadows-boolean","children":[]},{"level":3,"title":".colorWrite : Boolean","slug":"colorwrite-boolean","link":"#colorwrite-boolean","children":[]},{"level":3,"title":".defines : Object","slug":"defines-object","link":"#defines-object","children":[]},{"level":3,"title":".depthFunc : Integer","slug":"depthfunc-integer","link":"#depthfunc-integer","children":[]},{"level":3,"title":".depthTest : Boolean","slug":"depthtest-boolean","link":"#depthtest-boolean","children":[]},{"level":3,"title":".depthWrite : Boolean","slug":"depthwrite-boolean","link":"#depthwrite-boolean","children":[]},{"level":3,"title":".forceSinglePass : Boolean","slug":"forcesinglepass-boolean","link":"#forcesinglepass-boolean","children":[]},{"level":3,"title":".isMaterial : Boolean","slug":"ismaterial-boolean","link":"#ismaterial-boolean","children":[]},{"level":3,"title":".stencilWrite : Boolean","slug":"stencilwrite-boolean","link":"#stencilwrite-boolean","children":[]},{"level":3,"title":".stencilWriteMask : Integer","slug":"stencilwritemask-integer","link":"#stencilwritemask-integer","children":[]},{"level":3,"title":".stencilFunc : Integer","slug":"stencilfunc-integer","link":"#stencilfunc-integer","children":[]},{"level":3,"title":".stencilRef : Integer","slug":"stencilref-integer","link":"#stencilref-integer","children":[]},{"level":3,"title":".stencilFuncMask : Integer","slug":"stencilfuncmask-integer","link":"#stencilfuncmask-integer","children":[]},{"level":3,"title":".stencilFail : Integer","slug":"stencilfail-integer","link":"#stencilfail-integer","children":[]},{"level":3,"title":".stencilZFail : Integer","slug":"stencilzfail-integer","link":"#stencilzfail-integer","children":[]},{"level":3,"title":".stencilZPass : Integer","slug":"stencilzpass-integer","link":"#stencilzpass-integer","children":[]},{"level":3,"title":".id : Integer","slug":"id-integer","link":"#id-integer","children":[]},{"level":3,"title":".name : String","slug":"name-string","link":"#name-string","children":[]},{"level":3,"title":".needsUpdate : Boolean","slug":"needsupdate-boolean","link":"#needsupdate-boolean","children":[]},{"level":3,"title":".opacity : Float","slug":"opacity-float","link":"#opacity-float","children":[]},{"level":3,"title":".polygonOffset : Boolean","slug":"polygonoffset-boolean","link":"#polygonoffset-boolean","children":[]},{"level":3,"title":".polygonOffsetFactor : Integer","slug":"polygonoffsetfactor-integer","link":"#polygonoffsetfactor-integer","children":[]},{"level":3,"title":".polygonOffsetUnits : Integer","slug":"polygonoffsetunits-integer","link":"#polygonoffsetunits-integer","children":[]},{"level":3,"title":".precision : String","slug":"precision-string","link":"#precision-string","children":[]},{"level":3,"title":".premultipliedAlpha : Boolean","slug":"premultipliedalpha-boolean","link":"#premultipliedalpha-boolean","children":[]},{"level":3,"title":".dithering : Boolean","slug":"dithering-boolean","link":"#dithering-boolean","children":[]},{"level":3,"title":".shadowSide : Integer","slug":"shadowside-integer","link":"#shadowside-integer","children":[]},{"level":3,"title":".side : Integer","slug":"side-integer","link":"#side-integer","children":[]},{"level":3,"title":".toneMapped : Boolean","slug":"tonemapped-boolean","link":"#tonemapped-boolean","children":[]},{"level":3,"title":".transparent : Boolean","slug":"transparent-boolean","link":"#transparent-boolean","children":[]},{"level":3,"title":".type : String","slug":"type-string","link":"#type-string","children":[]},{"level":3,"title":".uuid : String","slug":"uuid-string","link":"#uuid-string","children":[]},{"level":3,"title":".version : Integer","slug":"version-integer","link":"#version-integer","children":[]},{"level":3,"title":".vertexColors : Boolean","slug":"vertexcolors-boolean","link":"#vertexcolors-boolean","children":[]},{"level":3,"title":".visible : Boolean","slug":"visible-boolean","link":"#visible-boolean","children":[]},{"level":3,"title":".userData : Object","slug":"userdata-object","link":"#userdata-object","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":".clone ( ) : Material","slug":"clone-material","link":"#clone-material","children":[]},{"level":3,"title":".copy ( material : material ) : this","slug":"copy-material-material-this","link":"#copy-material-material-this","children":[]},{"level":3,"title":".dispose () : undefined","slug":"dispose-undefined","link":"#dispose-undefined","children":[]},{"level":3,"title":".onBeforeCompile ( shader : Shader, renderer : WebGLRenderer ) : undefined","slug":"onbeforecompile-shader-shader-renderer-webglrenderer-undefined","link":"#onbeforecompile-shader-shader-renderer-webglrenderer-undefined","children":[]},{"level":3,"title":".customProgramCacheKey () : String","slug":"customprogramcachekey-string","link":"#customprogramcachekey-string","children":[]},{"level":3,"title":".setValues ( values : Object ) : undefined","slug":"setvalues-values-object-undefined","link":"#setvalues-values-object-undefined","children":[]},{"level":3,"title":".toJSON ( meta : Object ) : Object","slug":"tojson-meta-object-object","link":"#tojson-meta-object-object","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":6.51,"words":1952},"filePathRelative":"threejs/材质/材质.md","localizedDate":"2023年3月20日","excerpt":"<h2>Material</h2>\\n<p>材质的抽象基类。</p>\\n<p>材质描述了对象objects的外观。它们的定义方式与渲染器无关， 因此，如果您决定使用不同的渲染器，不必重写材质。</p>\\n<p>所有其他材质类型都继承了以下属性和方法（尽管它们可能具有不同的默认值）。</p>\\n<h2>构造函数</h2>\\n<h3>Material()</h3>\\n<p>该方法创建一个通用材质。</p>\\n<h2>属性</h2>\\n<h3>.alphaTest : Float</h3>\\n<p>设置运行alphaTest时要使用的alpha值。如果不透明度低于此值，则不会渲染材质。默认值为0。</p>\\n<h3>.alphaToCoverage : Boolean</h3>","autoDesc":true}');export{p as comp,h as data};
