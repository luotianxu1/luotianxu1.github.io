import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as l,b as n}from"./app-C2aR6FVm.js";const h={};function e(k,i){return a(),l("div",null,i[0]||(i[0]=[n(`<h2 id="_1-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_1-tree-shaking"><span>1.tree shaking</span></a></h2><p>中文（摇树），<code>webpack</code>构建优化中重要一环。摇树用于清除我们项目中的一些无用代码，它依赖于ES中的模块语法。</p><p>比如日常使用<code>lodash</code>的时候</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;lodash&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果如上引用<code>lodash</code>库，在构建包的时候是会把整个<code>lodash</code>包打入到我们的<code>bundle</code>包中的。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _isEmpty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;lodash/isEmpty&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果如上引用<code>lodash</code>库，在构建包的时候只会把<code>isEmpty</code>这个方法抽离出来再打入到我们的<code>bundle</code>包中。这样的化就会大大减少我们包的<code>size</code>。所以在日常引用第三方库的时候，需要注意导入的方式。</p><p>在<code>webpack4.x</code> 中默认对<code>tree-shaking</code>进行了支持</p><h2 id="_2-split-chunks" tabindex="-1"><a class="header-anchor" href="#_2-split-chunks"><span>2.split chunks</span></a></h2><p>在没配置任何东西的情况下，<code>webpack 4</code> 就智能的帮你做了代码分包。入口文件依赖的文件都被打包进了<code>main.js</code>，那些大于 30kb 的第三方包，如：<code>echarts</code>、<code>xlsx</code>、<code>dropzone</code>等都被单独打包成了一个个独立 <code>bundle</code>。 其它被我们设置了异步加载的页面或者组件变成了一个个<code>chunk</code>，也就是被打包成独立的<code>bundle</code>。 它内置的代码分割策略是这样的：</p><ul><li>新的 <code>chunk</code> 是否被共享或者是来自 <code>node_modules</code> 的模块</li><li>新的 <code>chunk</code> 体积在压缩之前是否大于 30kb</li><li>按需加载 <code>chunk</code> 的并发请求数量小于等于 5 个</li><li>页面初始加载时的并发请求数量小于等于 3 个</li></ul><p>大家可以根据自己的项目环境来更改配置。配置代码如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">splitChunks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cacheGroups</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    vendors</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`chunk-vendors\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">node_modules</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      priority</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;initial&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dll</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`chunk-dll\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">bizcharts</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\@</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">antv</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">data-set/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      priority</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      reuseExistingChunk</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    common</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`chunk-common\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      minChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      priority</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      reuseExistingChunk</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有使用webpack4.x版本的项目，依然可以通过按需加载的形式进行分包，使得我们的包分散开，提升加载性能。</p><h2 id="_3-gzip" tabindex="-1"><a class="header-anchor" href="#_3-gzip"><span>3.gzip</span></a></h2><p>服务端配置gzip压缩后可大大缩减资源大小。 Nginx配置方式</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_buffers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 4</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_comp_level</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_min_length</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_types</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> application</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">javascript</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> text</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">css</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> text</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_disable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;MSIE [1-6]</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  gzip_vary</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-图片压缩" tabindex="-1"><a class="header-anchor" href="#_4-图片压缩"><span>4.图片压缩</span></a></h2><p>开发中比较重要的一个环节，我司自己的图床工具是自带压缩功能的，压缩后直接上传到CDN上。 如果公司没有图床工具，我们该如何压缩图片呢？我推荐几种我常用的方式</p><ul><li>智图压缩 (百度很难搜到官网了，免费、批量、好用)</li><li>tinypng(免费、批量、速度块)</li><li>fireworks工具压缩像素点和尺寸 (自己动手，掌握尺度)</li><li>找UI压缩后发给你</li></ul><p>图片压缩是常用的手法，因为设备像素点的关系，UI给予的图片一般都是 x2，x4的，所以压缩就非常有必要。</p><h2 id="_5-图片分割" tabindex="-1"><a class="header-anchor" href="#_5-图片分割"><span>5.图片分割</span></a></h2><p>如果页面中有一张效果图，比如真机渲染图，UI手拿着刀不让你压缩。这时候不妨考虑一下分割图片。 建议单张土图片的大小不要超过100k，我们在分割完图片后，通过布局再拼接在一起。可以图片加载效率。 这里注意一点，分割后的每张图片一定要给height，否则网速慢的情况下样式会塌陷。</p><h2 id="_6-sprite" tabindex="-1"><a class="header-anchor" href="#_6-sprite"><span>6.sprite</span></a></h2><p>南方叫精灵图，北方叫雪碧图。这个现象就很有趣。 在网站中有很多小图片的时候，一定要把这些小图片合并为一张大的图片，然后通过background分割到需要展示的图片。 这样的好处是什么呢？先来普及一个规则 浏览器请求资源的时候，同源域名请求资源的时候有最大并发限制，chrome为6个，就比如你的页面上有10个相同CDN域名小图片，那么需要发起10次请求去拉取，分两次并发。第一次并发请求回来后，发起第二次并发。 如果你把10个小图片合并为一张大图片的画，那么只用一次请求即可拉取下来10个小图片的资源。减少服务器压力，减少并发，减少请求次数。</p><h2 id="_7-cdn" tabindex="-1"><a class="header-anchor" href="#_7-cdn"><span>7.CDN</span></a></h2><h3 id="cdn-的概念" tabindex="-1"><a class="header-anchor" href="#cdn-的概念"><span>CDN 的概念</span></a></h3><p>CDN(Content Delivery Network,内容分发网络)是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。典型的 CDN 系统由下面三个部分组成：</p><ul><li>分发服务系统：最基本的工作单元就是 Cache 设备，cache(边缘 cache)负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时 cach 还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cach 设备的数量、规模、总服务能力是衡量一个 CDN 系统服务能力的最基本的指标。</li><li>负载均衡系统：主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡(GSLB)和本地负载均衡(SLB)。全局负载均衡主要根据用户就近性原侧，通过对每个服务节点进行“最优”判断，确定向用户提供服务的 c3che 的物理位置。本地负载均衡主要负责节点内部的设备负载均衡</li><li>运营管理系统：运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。</li></ul><h3 id="cdn-的作用" tabindex="-1"><a class="header-anchor" href="#cdn-的作用"><span>CDN 的作用</span></a></h3><p>CDN 一般会用来托管 Web 资源（包括文本、图片和脚本等），可供下载的资源（媒体文件、软件、文档等），应用程序（门户网站等）。使用 CDN 来加速这些资源的访问。</p><ul><li>在性能方面，引入 CDN 的作用在于： <ul><li>用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</li><li>部分资源请求分配给了 CDN,减少了服务器的负载</li></ul></li><li>在安全方面，CDN 有助于防御 DDoS、MITM 等网络攻击： <ul><li>针对 DDoS:通过监控分析异常流量，限制其请求频率</li><li>针对 MlTM:从源服务器到 CDN 节点到 ISP(Internet Service Provider),全链路 HTTPS 通信</li></ul></li></ul><p>除此之外，CDN 作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</p><h3 id="cdn-的原理" tabindex="-1"><a class="header-anchor" href="#cdn-的原理"><span>CDN 的原理</span></a></h3><ul><li><p>用户未使用 CDN 缓存资源的过程：</p><ul><li>1.浏览器通过 DNS 对域名进行解析（就是上面的 DNS 解析过程），依次得到此域名对应的 IP 地址</li><li>2.浏览器根据得到的 P 地址，向域名的服务主机发送数据请求</li><li>3.服务器向浏览器返回响应数据</li></ul></li><li><p>用户使用 CDN 缓存资源的过程：</p><ul><li>1.对于点击的数据的 URL,经过本地 DNS 系统的解析，发现该 URL 对应的是一个 CDN 专用的 DNS 服务器，DNS 系统就会将域名解析权交给 CNAME 指向的 CDN 专用的 DNS 服务器。</li><li>2.CND 专用 DNS 服务器将 CND 的全局负载均衡设备 P 地返 ▣ 给用户</li><li>3.用户向 CDN 的全局负载均衡设备发起数据请求</li><li>4.CDN 的全局负载均衡设备根据用户的 P 地址，以及用户请求的内容 URL,选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</li><li>5.区域负载均衡设备选择一台合适的缓存服务器来提供服务，将孩缓存服务器的 P 地返回给全局负载均衡设备</li><li>6.全局负载均衡设备把服务器的 P 地返回给用户</li><li>7.用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</li></ul></li></ul><p>如果缓存服务器没有用户想要的内容，那么缓存服务器就会向它的上一级缓存服务器请求内容，以 此类推，直到获取到需要的资源。最后如果还是没有，就会回到自己的服务器去获取资源。</p><h3 id="cdn-的使用场景" tabindex="-1"><a class="header-anchor" href="#cdn-的使用场景"><span>CDN 的使用场景</span></a></h3><ul><li>使用第三方的 CDN 服务：如果想要开源一些项目，可以使用第三方的 CDN 服务</li><li>使用 CDN 进行静态资源的缓存：将自己网站的静态资源放在 CDN 上，比如 js、cSsS、图片等。可以将整个项目放在 CDN 上，完成一键部署。</li><li>直播传送：直播本质上是使用流媒体进行传送，CDN 也是支持流媒体传送的，所以直播完全可以使用 CDN 来提高访方问速度。CDN 在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。</li></ul><h2 id="_8-懒加载" tabindex="-1"><a class="header-anchor" href="#_8-懒加载"><span>8.懒加载</span></a></h2><h3 id="懒加载的概念" tabindex="-1"><a class="header-anchor" href="#懒加载的概念"><span>懒加载的概念</span></a></h3><p>赖加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那部分图片数据，这样就浪费了性能。</p><p>如果使用图片的赖勋加我就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p><h3 id="懒加载的特点" tabindex="-1"><a class="header-anchor" href="#懒加载的特点"><span>懒加载的特点</span></a></h3><ul><li>减少无用资源的加载：使用赖加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li><li>提升用户体验：如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用赖加载就能大大的提高用户体验。</li><li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li></ul><h3 id="赖加载的实现原理" tabindex="-1"><a class="header-anchor" href="#赖加载的实现原理"><span>赖加载的实现原理</span></a></h3><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的 data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给 src,这样就实现了图片的按需加载，即赖加载。</p><p>注意：data-Xx 中的 xXx 可以自定义，这里我们使用 data-src 来定义。</p><p>赖加载的实现重，点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。 使用原生 JavaScript 实现赖加载：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;loading.gif&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pic.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> imgs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelectorAl1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;img&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lozyLoad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scrollTop</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scrollTop</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">documentElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scrollTop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> winHeight</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> imgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">imgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">offsetTop</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scrollTop</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> winHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            imgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> imgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;data-src&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onscroll</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lozyLoad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="懒加载与预加载的区别" tabindex="-1"><a class="header-anchor" href="#懒加载与预加载的区别"><span>懒加载与预加载的区别</span></a></h3><p>这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预动加载侧会增加服务器前端压力。</p><ul><li>懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。赖加载的实现原理是，将页面上的图片的src属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的src属性，以此来实现图片的延迟加载。</li><li>预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预动加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用js中的image对象，通过为image对象来设置scr属性，来实现图片的预动加载。</li></ul><h2 id="回流与重绘的概念及触发条件" tabindex="-1"><a class="header-anchor" href="#回流与重绘的概念及触发条件"><span>回流与重绘的概念及触发条件</span></a></h2><p>(1)回流</p><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。</p><p>下面这些操作会导致回流：</p><ul><li>页面的首次渲染</li><li>浏览器的窗口大小发生变化</li><li>元素的内容发生变化</li><li>元素的尺寸或者位置发生变化</li><li>元素的字体大小发生变化</li><li>激活CSS伪类</li><li>查询某些属性或者调用某些方法</li><li>添加或者删除可见的DOM元素</li></ul><p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DO元素重新排列，它的影响范围有两种：</p><ul><li>全局范围：从根节点开始，对整个渲染树进行重新布局</li><li>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</li></ul><p>(2)重绘</p><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p><p>下面这些操作会导致重绘：</p><ul><li>color、,background相关属性：background-color、background-.image等</li><li>outline相关属性：outline-color、outline-width、text-decoration</li><li>border-radius、visibility、box-shadow</li></ul><p>注意：当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p><h2 id="如何避免回流与重绘" tabindex="-1"><a class="header-anchor" href="#如何避免回流与重绘"><span>如何避免回流与重绘？</span></a></h2><p>减少回流与重绘的措施：</p><ul><li>操作DOM时，尽量在低层级的DOM节点进行操作</li><li>不要使用table布局，一个小的改动可能会使整个table进行重新布局</li><li>使用CSS的表达式</li><li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li><li>使用absolute或者fixed,使元素脱离文档流，这样他们发生变化就不会影响其他元素</li><li>避免频繁操作DOM,可以创建一个文档片段documentFragment,在它上面应用所有DOM操作，最后再把它添加到文档中</li><li>将元素先设置display:none,操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</li><li>将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</li></ul><p>浏览器针对页面的回流与重绘，进行了自身的优化一渲染队列</p><p>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。 上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p><h2 id="如何优化动画" tabindex="-1"><a class="header-anchor" href="#如何优化动画"><span>如何优化动画？</span></a></h2><p>对于如何优化动画，我们知道，一般情况下，动画需要频繁的操作DOM,就就会导致页面的性能问题，我们可以将动画的position,属性设置为absolute或者fixed,将动画脱离文档流，这样他的回流就不会影响到页面了。</p><h2 id="如何对项目中的图片进行优化" tabindex="-1"><a class="header-anchor" href="#如何对项目中的图片进行优化"><span>如何对项目中的图片进行优化？</span></a></h2><ul><li>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用CSS去代替。</li><li>对于移动端来说，屏幕完度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用CDN加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</li><li>小图使用base64格式</li><li>将多个图标文件整合到一张图片中（雪碧图）</li><li>选择正确的图片格式： <ul><li>对于能够显示WebP格式的浏览器尽量使用WebP格式。因为WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</li><li>小图使用PNG,其实对于大部分图标这类图片，完全可以使用SVG代替</li><li>照片使用JPEG</li></ul></li></ul><h2 id="浏览器渲染优化" tabindex="-1"><a class="header-anchor" href="#浏览器渲染优化"><span>浏览器渲染优化</span></a></h2><ul><li>针对JavaScript:JavaScript既会阻塞HTML的解析，也会阻塞CSS的解析。因此我们可以对JavaScript的加载方式进行改变，来进行优化： <ul><li>尽量将JavaScript文件放在body的最后</li><li>body中间尽量不要写<code>&lt;script&gt;</code>标签</li><li><code>&lt;script&gt;</code>标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用async属性和defer属性来异步引入，两者都是去异步加载外部的JS文件，不会阻塞DOM的解析(尽量使用异步加载)。三者的区别如下： <ul><li>script立即停止页面渲染去加载资源文件，当资源加载完毕后立即执行js代码，js代码执行完毕后继续渲染页面；</li><li>async是在下载完成，之后，立即异步加载，加载好后立即执行，多个带async属性的标签，不能保证加载的顺序；</li><li>dfer是在下载完成之后，立即异步加载。加载好后，如果DOM树还没构建好，则先等DOM 树解析好再执行；如果DOM树已经准备好，则立即执行。多个带dfr属性的标签，按照顺序执 行。</li></ul></li></ul></li><li>针对css:使用CSS有三种方式：使用Iink、@import、.内联样式，其中ink和@import都是导入外部样式。它们之间的区别： <ul><li><code>link:</code>浏览器会派发一个新等线程HTTP线程去加载资源文件，与此比同时GU渲染线程会继续向下渲染代码</li><li><code>@import:GUI</code>渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染阻碍浏览器渲染</li><li><code>style:GUI</code>直接渲染</li></ul></li></ul><p>外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在headr中，让浏览器尽快发送请求去获取css样式。</p><p>所以，在开发过程中，导入外部样式使用ink,而不用@import。如果css少，尽可能采用内嵌样式，直接写在style标签中。</p><ul><li><p>针对DOM树、CSSOM树：</p><ul><li>HTML文件的代码层级尽量不要太深</li><li>使用语义化的标签，来避免不标准语义化的特殊处理</li><li>减少CSSD代码的层级，因为选择器是从左向右进行解析的</li></ul></li><li><p>减少回流与重绘：</p><ul><li>操作DOM时，尽量在低层级的DOM节点进行操作</li><li>不要使用table布局，一个小的改动可能会使整个tablej进行重新布局</li><li>使用CSS的表达式</li><li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li><li>使用absolute或者fixed,使元素脱离文档流，这样他们发生变化就不会影响其他元素</li><li>避免频繁操作DOM,可以创建一个文档片段documentFragment,在它上面应用所有DOM操作，最后再把它添加到文档中</li><li>将元素先设置display:none,操作结束后再把它显示出来。因为在display属性为none的元素上进的DOM操作不会引发回流和重绘。</li><li>将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</li></ul></li></ul><p>浏览器针对页面的回流与重绘，进行了自身的优化一渲染队列</p><p>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p><p>将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p><h2 id="浏览器缓存策略" tabindex="-1"><a class="header-anchor" href="#浏览器缓存策略"><span>浏览器缓存策略</span></a></h2><p>强缓存（本地缓存）、协商缓存（弱缓存） 强缓存： 不发请求，直接使用缓存里的内容，浏览器把 JS，CSS，image 等存到内存中，下次用户直接从内存中取，提高性能。 协商缓存： 需要向后台发请求通过判断来决定是否使用协商缓存，如果请求内容没有改变，则返回 304，浏览器就用缓存里的内容。 强缓存的触发： HTTP1.0: 事件戳响应表头 HTTP1.1：Cache-Control 响应表头 协商缓存触发： HTTP1.0：请求头:if-modified-since 响应头:last-modified HTTP1.1: 请求头：if-none-match 响应头：Etag</p><h2 id="vue-性能优化" tabindex="-1"><a class="header-anchor" href="#vue-性能优化"><span>Vue 性能优化</span></a></h2><ul><li>编码阶段 <ul><li>尽量减少data中的数据，data中的数据都会增加getter和setter,会收集对应的watcher</li><li>v-if和v-for不能连用</li><li>如果需要使用v-o给每项元素绑定事件时使用事件代理</li><li>SPA页面采用keep-alive缓存组件</li><li>在更多的情况下，使用v-i替代v-show</li><li>key保证唯一</li><li>使用略由懒加载、异步组件</li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ul></li><li>SEO优化 <ul><li>预渲染</li><li>服务端渲染SSR</li></ul></li><li>打包优化 <ul><li>压缩代码</li><li>Tree Shaking/Scope Hoisting</li><li>使用cdn加载第三方模块</li><li>多线程打包happypack</li><li>splitChunks:抽离公共文件</li><li>sourceMap优化</li></ul></li><li>用户体验 <ul><li>骨架屏</li><li>PWA</li><li>还可以使用缓存（客户端缓存、服务端缓存）优化、服务端开启gZ压缩等</li></ul></li></ul>`,85)]))}const d=s(h,[["render",e],["__file","09.性能优化面试题.html.vue"]]),r=JSON.parse('{"path":"/interview/09.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"性能优化面试题","lang":"zh-CN","frontmatter":{"title":"性能优化面试题","icon":"markdown","order":9,"date":"2023-02-17T00:00:00.000Z","category":["面试"],"tag":["性能优化"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1.tree shaking","slug":"_1-tree-shaking","link":"#_1-tree-shaking","children":[]},{"level":2,"title":"2.split chunks","slug":"_2-split-chunks","link":"#_2-split-chunks","children":[]},{"level":2,"title":"3.gzip","slug":"_3-gzip","link":"#_3-gzip","children":[]},{"level":2,"title":"4.图片压缩","slug":"_4-图片压缩","link":"#_4-图片压缩","children":[]},{"level":2,"title":"5.图片分割","slug":"_5-图片分割","link":"#_5-图片分割","children":[]},{"level":2,"title":"6.sprite","slug":"_6-sprite","link":"#_6-sprite","children":[]},{"level":2,"title":"7.CDN","slug":"_7-cdn","link":"#_7-cdn","children":[{"level":3,"title":"CDN 的概念","slug":"cdn-的概念","link":"#cdn-的概念","children":[]},{"level":3,"title":"CDN 的作用","slug":"cdn-的作用","link":"#cdn-的作用","children":[]},{"level":3,"title":"CDN 的原理","slug":"cdn-的原理","link":"#cdn-的原理","children":[]},{"level":3,"title":"CDN 的使用场景","slug":"cdn-的使用场景","link":"#cdn-的使用场景","children":[]}]},{"level":2,"title":"8.懒加载","slug":"_8-懒加载","link":"#_8-懒加载","children":[{"level":3,"title":"懒加载的概念","slug":"懒加载的概念","link":"#懒加载的概念","children":[]},{"level":3,"title":"懒加载的特点","slug":"懒加载的特点","link":"#懒加载的特点","children":[]},{"level":3,"title":"赖加载的实现原理","slug":"赖加载的实现原理","link":"#赖加载的实现原理","children":[]},{"level":3,"title":"懒加载与预加载的区别","slug":"懒加载与预加载的区别","link":"#懒加载与预加载的区别","children":[]}]},{"level":2,"title":"回流与重绘的概念及触发条件","slug":"回流与重绘的概念及触发条件","link":"#回流与重绘的概念及触发条件","children":[]},{"level":2,"title":"如何避免回流与重绘？","slug":"如何避免回流与重绘","link":"#如何避免回流与重绘","children":[]},{"level":2,"title":"如何优化动画？","slug":"如何优化动画","link":"#如何优化动画","children":[]},{"level":2,"title":"如何对项目中的图片进行优化？","slug":"如何对项目中的图片进行优化","link":"#如何对项目中的图片进行优化","children":[]},{"level":2,"title":"浏览器渲染优化","slug":"浏览器渲染优化","link":"#浏览器渲染优化","children":[]},{"level":2,"title":"浏览器缓存策略","slug":"浏览器缓存策略","link":"#浏览器缓存策略","children":[]},{"level":2,"title":"Vue 性能优化","slug":"vue-性能优化","link":"#vue-性能优化","children":[]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":20.18,"words":6055},"filePathRelative":"interview/09.性能优化面试题.md","localizedDate":"2023年2月17日"}');export{d as comp,r as data};
