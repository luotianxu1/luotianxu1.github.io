import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,b as l}from"./app-DhXEf2lS.js";const e="/img/study/html/viewport1.jpg",n="/img/study/html/viewport2.jpg",h={};function p(d,i){return t(),a("div",null,i[0]||(i[0]=[l('<h2 id="移动端适配的目的" tabindex="-1"><a class="header-anchor" href="#移动端适配的目的"><span>移动端适配的目的</span></a></h2><p>通常我们在 pc 上看到的页面都是比较大的，在 pc 上访问页面是正常显示的，默认是不会被缩放的，除非是手动进行了缩放，页面才会被放大比例或者是缩小比例显示。但是在移动端是不一样的，如果将一个 pc 端的页面放到手机端进行访问，那么可能出现页面挤到一起、布局错乱或者出现横向滚动条的情况，我们给用户带来不好的体验。还有在屏幕尺寸大小不同的手机上进行访问页面时，页面显示的效果不能合理的展示，我们期望的是在手机屏幕较大时显示的内容比较大一些，手机屏幕小的时候页面的内容也会缩小进行自适应。</p><p>因此，移动端适配的目的是在不同尺寸的设备上，页面达到合理的展示（自适应）或者说是能够保持统一效果。</p><h2 id="viewport-的基本概念" tabindex="-1"><a class="header-anchor" href="#viewport-的基本概念"><span>viewport 的基本概念</span></a></h2><p>通常 viewport 是指视窗、视口，浏览器上(也可能是一个 app 中的 webview)用来显示网页的那部分区域。在移动端和 pc 端视口是不同的，pc 端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p><ul><li>布局视口：在浏览器窗口 css 的布局区域，布局视口的宽度限制 css 布局的宽。为了能在移动设备上正常显示那些为 pc 端浏览器设计的网站，移动设备上的浏览器都会把自己默认的 viewport 设为 980px 或其他值，一般都比移动端浏览器可视区域大很多，所以就会出现浏览器出现横向滚动条的情况</li></ul><figure><img src="'+e+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>视觉视口：用户通过屏幕看到的页面区域，通过缩放查看显示内容的区域，在移动端缩放不会改变布局视口的宽度，当缩小的时候，屏幕覆盖的 css 像素变多，视觉视口变大，当放大的时候，屏幕覆盖的 css 像素变少，视觉视口变小。</li></ul><figure><img src="'+n+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>理想视口：一般来讲，这个视口其实不是真是存在的，它对设备来说是一个最理想布局视口尺寸，在用户不进行手动缩放的情况下，可以将页面理想地展示。那么所谓的理想宽度就是浏览器（屏幕）的宽度了。</li></ul><h2 id="设置视口" tabindex="-1"><a class="header-anchor" href="#设置视口"><span>设置视口</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;width=device-width,user-scalable=no,initial-scale=1.0,  maximum-scale=1.0,minimum-scale=1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行代码大家应该都不陌生，或者说是知道加了这行代码，然后页面的宽度就会跟我的设备宽度一致。，实际上，它就是设置了理想视口，将布局视口的宽度设置成了理想视口（浏览器/设备屏幕的宽度）。</p><p>上面说到的视口宽度等均是 css 像素，所以需要简单了解一下几个基本的概念：</p><ul><li>css 像素：代码中使用的逻辑像素，衡量页面上的内容大小</li><li>设备像素：即物理像素，控制设备显示的单位，与设备、硬件有关</li><li>设备独立像素：与设备无关的逻辑像素，不同于设备像素（物理像素），不是真实存在的。</li><li>设备像素比：定义设备像素与设备独立像素比的关系 window.devicePixelRatio）设备像素比=物理像素/设备独立像素</li><li>分辨率：指的是屏幕上垂直和水平的总物理像素</li></ul><p>在 meta 标签中，除了 viewport 这个很重要的属性，用来设置视口的一些行为,还有几个与其搭配一起使用的属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">含义</th><th style="text-align:left;">取值</th></tr></thead><tbody><tr><td style="text-align:left;">width</td><td style="text-align:left;">定义视口的宽度，单位为像素</td><td style="text-align:left;">正整数或设备宽度 device-width</td></tr><tr><td style="text-align:left;">height</td><td style="text-align:left;">定义视口的高度，单位为像素</td><td style="text-align:left;">正整数或 device-height</td></tr><tr><td style="text-align:left;">initial-scale</td><td style="text-align:left;">定义初始缩放值</td><td style="text-align:left;">整数或小数</td></tr><tr><td style="text-align:left;">minimum-scale</td><td style="text-align:left;">定义缩小最小比例，它必须小于或等于 maximum-scale 设置</td><td style="text-align:left;">整数或小数</td></tr><tr><td style="text-align:left;">maximum-scale</td><td style="text-align:left;">定义放大最大比例，它必须大于或等于 minimum-scale 设置</td><td style="text-align:left;">整数或小数</td></tr><tr><td style="text-align:left;">user-scalable</td><td style="text-align:left;">定义是否允许用户手动缩放页面，默认值 yes</td><td style="text-align:left;">yes/no</td></tr></tbody></table><h2 id="适配方案" tabindex="-1"><a class="header-anchor" href="#适配方案"><span>适配方案</span></a></h2><h3 id="css3-媒体查询" tabindex="-1"><a class="header-anchor" href="#css3-媒体查询"><span>css3 媒体查询</span></a></h3><p>通过媒体查询的方式，编写适应不同分辨率设备的的 css 样式</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">320</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* ....适配iphone4的css样式 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">375</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* ....适配iphone6/7/8的css样式 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">414</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* ....适配iphone6/7/8 plus的css样式 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点</p><ul><li>方法简单，只需修改 css 文件</li><li>调整屏幕宽度时不用刷新页面就可以响应页面布局</li></ul><p>缺点</p><ul><li>代码量大，不方便维护</li><li>不能够完全适配所有的屏幕尺寸，需要编写多套 css 样式</li></ul><h3 id="百分比布局方案" tabindex="-1"><a class="header-anchor" href="#百分比布局方案"><span>百分比布局方案</span></a></h3><p>给元素设置百分比，例如 2 个 div 想占满宽度 100%，那么一个 div 设置宽度为 50%，这样不固定宽度，使得在不同的分辨率下都能达到适配</p><p>那么需要清楚一个问题，各个子元素或属性的百分比是根据谁来设定呢？</p><ol><li>子元素 width、height 的百分比:子元素的 width 或 height 中使用百分比，是相对于子元素的直接父元素</li><li>margin 和 padding 的百分比：在垂直方向和水平方向都是相对于直接父亲元素的 width，而与父元素的 height 无关</li><li>border-radius 的百分比：border-radius 的百分比是相对于自身宽度，与父元素无关</li></ol><p>优点</p><ul><li>宽度自适应，在不同的分辨率下都能达到适配</li></ul><p>缺点</p><ul><li>百分比的值不好计算</li><li>需要确定父级的大小，因为要根据父级的大小进行计算</li><li>各个属性中如果使用百分比，相对父元素的属性并不是唯一的</li><li>高度不好设置，一般需要固定高度</li></ul><h3 id="rem-方案" tabindex="-1"><a class="header-anchor" href="#rem-方案"><span>rem 方案</span></a></h3><ul><li>rem 单位：rem 是一个只相对于浏览器的根元素（HTML 元素）的 font-size 的来确定的单位。默认情况下，html 元素的 font-size 为 12px</li><li>通过 rem 来实现适配：rem 单位都是相对于根元素 html 的 font-size 来决定大小的,根元素的 font-size 相当于提供了一个基准，当页面的宽度发生变化时，只需要改变 font-size 的值，那么以 rem 为固定单位的元素的大小也会发生响应的变化。需要先动态设置 html 根元素的 font-size,再计算出其他页面元素以 rem 为固定单位的值</li></ul><p>控制 font-size 的 js 代码</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ;(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deviceWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">documentElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clientWidth</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        deviceWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            deviceWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 320</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 320</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deviceWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 640</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 640</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deviceWidth</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">documentElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fontSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deviceWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7.5</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 js 代码中 deviceWidth/7.5，表示 font-size 用 deviceWidth/7.5 的值来表示，1rem 的值就是 deviceWidth/7.5，当视口容器发生变化时就可以动态设置 font-size 的大小，不论页面宽度变大还是缩小，视口宽度都会被等分为 7.5 份，每一份就是 1rem,从而 1rem 在不同的视觉容器中表示不同的大小，但在视口总宽度中的占比是不变的，实现了等比适配。</p><p>这个 7.5 在这里并不是一个固定的值，也可以设置为其他值，因为设计稿一般是根据 iphone6/7/8 的宽度来设计，一般为 375 或者 750,所以为了方便计算，在这里取 7.5，能够被整除方便后面的计算。</p><h4 id="元素的-rem-值计算" tabindex="-1"><a class="header-anchor" href="#元素的-rem-值计算"><span>元素的 rem 值计算</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.96</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    background: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">aaa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.24</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假定一个 div 的宽度为 100px,那么在计算时，根据设置的 1rem = 50px，所以 100px=2rem，其他所有的属性值都可以类似这样计算。font-size 一般情况下还是使用 px,因为在 rem 中，只要使用了 rem 单位都会被转换，那么在转换的时候，会出现不能被整除或者出现小数的情况比如 10.333333px，那么在显示时就可能出现一些偏差。而且如果期望在小屏幕下面显示跟大屏幕同等量的字体，但是由于 rem 的等比缩放，在小屏幕下就会存在小屏幕字体更小的情况，所以对于字体的适配更好的做法就是使用 px 和媒体查询来进行适配。</p><p>优点</p><ul><li>rem 单位是根据根元素 font-size 决定大小，只要改变 font-size 的值，以 rem 为固定单位的元素大小也会发生响应式的改变</li></ul><p>缺点</p><ul><li>必须通过一段 js 代码控制 font-size 的大小</li><li>控制 font-size 的 js 代码必须放在在页面第一次加载完成之前，并且放在引入的 css 样式代码之前。</li></ul><h3 id="vw、vh-方案" tabindex="-1"><a class="header-anchor" href="#vw、vh-方案"><span>vw、vh 方案</span></a></h3><p>css3 中引入与视口有关的新的单位 vw 和 vh，vw 表示相对于视口的宽度，vh 表示相对于视口高度</p><table><thead><tr><th style="text-align:left;">单位</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">vw</td><td style="text-align:left;">相对于视口的宽度，视口宽度是 100vw</td></tr><tr><td style="text-align:left;">vh</td><td style="text-align:left;">相对于视口的高度，视口宽度是 100vh</td></tr><tr><td style="text-align:left;">vmin</td><td style="text-align:left;">vw 和 vh 中较小的值</td></tr><tr><td style="text-align:left;">vmax</td><td style="text-align:left;">vw 和 vh 中较大的值</td></tr></tbody></table><p>vw 单位换算： 视口宽度为 100vw 占满整个视口区域，那么 1vw 相当于占整个视口宽度的 1%，所以 1px= 1/375*100 vw 所有的页面元素都可以直接进行计算换算成 vw 单位，但是这样计算和百分比方案计算比较类似，都会比较麻烦。</p><p>但是有一个比较厉害的插件—— postcss-px-to-viewport，可以预处理 css,将 px 单位转换为 vw 单位，但是需要进行一些相关的 webpack 配置</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    loader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;postcss-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">     plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">()=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         require(&#39;autoprefixer&#39;)(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          browsers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;last 5 versions&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         require(&#39;postcss-px-to-viewport&#39;)(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          viewportWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">375</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          viewportHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1334</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          unitPrecision</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          viewportUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;vw&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          selectorBlackList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.ignore&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.hairlines&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                minPixelValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                mediaQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是对 postcss-px-to-viewport 配置中的属性的介绍：</p><table><thead><tr><th style="text-align:left;">单位</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">viewportWidth</td><td style="text-align:left;">视口宽度（数字）</td></tr><tr><td style="text-align:left;">viewportHeight</td><td style="text-align:left;">视口高度（数字）</td></tr><tr><td style="text-align:left;">unitPrecision</td><td style="text-align:left;">设置的保留小数位数（数字）</td></tr><tr><td style="text-align:left;">viewportUnit</td><td style="text-align:left;">设置要转换的单位（字符串）</td></tr><tr><td style="text-align:left;">selectorBlackList</td><td style="text-align:left;">不需要进行转换的类名（数组）</td></tr><tr><td style="text-align:left;">minPixelValue</td><td style="text-align:left;">设置要替换的最小像素值（数字）</td></tr><tr><td style="text-align:left;">mediaQuery</td><td style="text-align:left;">允许在媒体查询中转换 px（true/false）</td></tr></tbody></table><p>优点</p><ul><li>指定vw\\vh相对与视口的宽高，由px换算单位成vw单位比较简单</li><li>通过postcss-px-to-viewport插件进行单位转换比较方便</li></ul><p>缺点</p><ul><li>直接进行单位换算时百分比可能出现小数,计算不方便</li><li>兼容性- 大多数浏览器都支持、ie11不支持 少数低版本手机系统 ios8、android4.4以下不支持</li></ul>`,58)]))}const g=s(h,[["render",p],["__file","移动端适配.html.vue"]]),c=JSON.parse('{"path":"/study/HTML/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html","title":"移动端适配","lang":"zh-CN","frontmatter":{"title":"移动端适配","icon":"html","order":2,"date":"2023-02-25T00:00:00.000Z","category":["HTML"],"tag":["移动端"],"description":"移动端适配的目的 通常我们在 pc 上看到的页面都是比较大的，在 pc 上访问页面是正常显示的，默认是不会被缩放的，除非是手动进行了缩放，页面才会被放大比例或者是缩小比例显示。但是在移动端是不一样的，如果将一个 pc 端的页面放到手机端进行访问，那么可能出现页面挤到一起、布局错乱或者出现横向滚动条的情况，我们给用户带来不好的体验。还有在屏幕尺寸大小不同...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/HTML/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html"}],["meta",{"property":"og:title","content":"移动端适配"}],["meta",{"property":"og:description","content":"移动端适配的目的 通常我们在 pc 上看到的页面都是比较大的，在 pc 上访问页面是正常显示的，默认是不会被缩放的，除非是手动进行了缩放，页面才会被放大比例或者是缩小比例显示。但是在移动端是不一样的，如果将一个 pc 端的页面放到手机端进行访问，那么可能出现页面挤到一起、布局错乱或者出现横向滚动条的情况，我们给用户带来不好的体验。还有在屏幕尺寸大小不同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/study/html/viewport1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"移动端"}],["meta",{"property":"article:published_time","content":"2023-02-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"移动端适配\\",\\"image\\":[\\"https://luotianxu1.github.io/img/study/html/viewport1.jpg\\",\\"https://luotianxu1.github.io/img/study/html/viewport2.jpg\\"],\\"datePublished\\":\\"2023-02-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"移动端适配的目的","slug":"移动端适配的目的","link":"#移动端适配的目的","children":[]},{"level":2,"title":"viewport 的基本概念","slug":"viewport-的基本概念","link":"#viewport-的基本概念","children":[]},{"level":2,"title":"设置视口","slug":"设置视口","link":"#设置视口","children":[]},{"level":2,"title":"适配方案","slug":"适配方案","link":"#适配方案","children":[{"level":3,"title":"css3 媒体查询","slug":"css3-媒体查询","link":"#css3-媒体查询","children":[]},{"level":3,"title":"百分比布局方案","slug":"百分比布局方案","link":"#百分比布局方案","children":[]},{"level":3,"title":"rem 方案","slug":"rem-方案","link":"#rem-方案","children":[]},{"level":3,"title":"vw、vh 方案","slug":"vw、vh-方案","link":"#vw、vh-方案","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":9.19,"words":2758},"filePathRelative":"study/HTML/移动端适配.md","localizedDate":"2023年2月25日","excerpt":"<h2>移动端适配的目的</h2>\\n<p>通常我们在 pc 上看到的页面都是比较大的，在 pc 上访问页面是正常显示的，默认是不会被缩放的，除非是手动进行了缩放，页面才会被放大比例或者是缩小比例显示。但是在移动端是不一样的，如果将一个 pc 端的页面放到手机端进行访问，那么可能出现页面挤到一起、布局错乱或者出现横向滚动条的情况，我们给用户带来不好的体验。还有在屏幕尺寸大小不同的手机上进行访问页面时，页面显示的效果不能合理的展示，我们期望的是在手机屏幕较大时显示的内容比较大一些，手机屏幕小的时候页面的内容也会缩小进行自适应。</p>\\n<p>因此，移动端适配的目的是在不同尺寸的设备上，页面达到合理的展示（自适应）或者说是能够保持统一效果。</p>","autoDesc":true}');export{g as comp,c as data};
