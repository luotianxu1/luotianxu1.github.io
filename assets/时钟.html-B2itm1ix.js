import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as l,c as o,d as r,b as i}from"./app-C2aR6FVm.js";const s={};function d(h,e){const a=n("IFrame");return l(),o("div",null,[r(a,{url:"https://luotainxu-demo.netlify.app/#/threejs/base/clock"}),e[0]||(e[0]=i('<h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><h3 id="autostart-booean" tabindex="-1"><a class="header-anchor" href="#autostart-booean"><span>autoStart : Booean</span></a></h3><p>(可选) 是否要在第一次调用 .getDelta() 时自动开启时钟。默认值是 true。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><h3 id="autostart-boolean" tabindex="-1"><a class="header-anchor" href="#autostart-boolean"><span>.autoStart : Boolean</span></a></h3><p>如果设置为 true，则在第一次调用 .getDelta() 时开启时钟。默认值是 true。</p><h3 id="starttime-float" tabindex="-1"><a class="header-anchor" href="#starttime-float"><span>.startTime : Float</span></a></h3><p>存储时钟最后一次调用 start 方法的时间。默认值是 0。</p><h3 id="oldtime-float" tabindex="-1"><a class="header-anchor" href="#oldtime-float"><span>.oldTime : Float</span></a></h3><p>存储时钟最后一次调用 start, .getElapsedTime() 或 .getDelta() 方法的时间。默认值是 0。</p><h3 id="elapsedtime-float" tabindex="-1"><a class="header-anchor" href="#elapsedtime-float"><span>.elapsedTime : Float</span></a></h3><p>保存时钟运行的总时长。默认值是 0。</p><h3 id="running-boolean" tabindex="-1"><a class="header-anchor" href="#running-boolean"><span>.running : Boolean</span></a></h3><p>判断时钟是否在运行。默认值是 false。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="start-undefined" tabindex="-1"><a class="header-anchor" href="#start-undefined"><span>.start () : undefined</span></a></h3><p>启动时钟。同时将 startTime 和 oldTime 设置为当前时间。 设置 elapsedTime 为 0，并且设置 running 为 true.</p><h3 id="stop-undefined" tabindex="-1"><a class="header-anchor" href="#stop-undefined"><span>.stop () : undefined</span></a></h3><p>停止时钟。同时将 oldTime 设置为当前时间。</p><h3 id="getelapsedtime-float" tabindex="-1"><a class="header-anchor" href="#getelapsedtime-float"><span>.getElapsedTime () : Float</span></a></h3><p>获取自时钟启动后的秒数，同时将 .oldTime 设置为当前时间。 如果 .autoStart 设置为 true 且时钟并未运行，则该方法同时启动时钟。</p><h3 id="getdelta-float" tabindex="-1"><a class="header-anchor" href="#getdelta-float"><span>.getDelta () : Float</span></a></h3><p>获取自 .oldTime 设置后到当前的秒数。 同时将 .oldTime 设置为当前时间。 如果 .autoStart 设置为 true 且时钟并未运行，则该方法同时启动时钟。</p>',23))])}const u=t(s,[["render",d],["__file","时钟.html.vue"]]),m=JSON.parse('{"path":"/threejs/%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%92%9F.html","title":"时钟","lang":"zh-CN","frontmatter":{"title":"时钟","icon":"markdown","order":2,"date":"2023-03-08T00:00:00.000Z","category":["threejs"],"tag":["Clock"],"head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/threejs/%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%92%9F.html"}],["meta",{"property":"og:title","content":"时钟"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"Clock"}],["meta",{"property":"article:published_time","content":"2023-03-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"时钟\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"autoStart : Booean","slug":"autostart-booean","link":"#autostart-booean","children":[]}]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":".autoStart : Boolean","slug":"autostart-boolean","link":"#autostart-boolean","children":[]},{"level":3,"title":".startTime : Float","slug":"starttime-float","link":"#starttime-float","children":[]},{"level":3,"title":".oldTime : Float","slug":"oldtime-float","link":"#oldtime-float","children":[]},{"level":3,"title":".elapsedTime : Float","slug":"elapsedtime-float","link":"#elapsedtime-float","children":[]},{"level":3,"title":".running : Boolean","slug":"running-boolean","link":"#running-boolean","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":".start () : undefined","slug":"start-undefined","link":"#start-undefined","children":[]},{"level":3,"title":".stop () : undefined","slug":"stop-undefined","link":"#stop-undefined","children":[]},{"level":3,"title":".getElapsedTime () : Float","slug":"getelapsedtime-float","link":"#getelapsedtime-float","children":[]},{"level":3,"title":".getDelta () : Float","slug":"getdelta-float","link":"#getdelta-float","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":1.03,"words":310},"filePathRelative":"threejs/基础/时钟.md","localizedDate":"2023年3月8日","excerpt":"<iframe url=\\"https://luotainxu-demo.netlify.app/#/threejs/base/clock\\">\\n<h2 id=\\"构造函数\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#构造函数\\"><span>构造函数</span></a></h2>\\n<h3 id=\\"autostart-booean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#autostart-booean\\"><span>autoStart : Booean</span></a></h3>\\n<p>(可选) 是否要在第一次调用 .getDelta() 时自动开启时钟。默认值是 true。</p>\\n<h2 id=\\"属性\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#属性\\"><span>属性</span></a></h2>\\n<h3 id=\\"autostart-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#autostart-boolean\\"><span>.autoStart : Boolean</span></a></h3>\\n<p>如果设置为 true，则在第一次调用 .getDelta() 时开启时钟。默认值是 true。</p>\\n<h3 id=\\"starttime-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#starttime-float\\"><span>.startTime : Float</span></a></h3>\\n<p>存储时钟最后一次调用 start 方法的时间。默认值是 0。</p>\\n<h3 id=\\"oldtime-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#oldtime-float\\"><span>.oldTime : Float</span></a></h3>\\n<p>存储时钟最后一次调用 start, .getElapsedTime() 或 .getDelta() 方法的时间。默认值是 0。</p>\\n<h3 id=\\"elapsedtime-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#elapsedtime-float\\"><span>.elapsedTime : Float</span></a></h3>\\n<p>保存时钟运行的总时长。默认值是 0。</p>\\n<h3 id=\\"running-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#running-boolean\\"><span>.running : Boolean</span></a></h3>\\n<p>判断时钟是否在运行。默认值是 false。</p>\\n<h2 id=\\"方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#方法\\"><span>方法</span></a></h2>\\n<h3 id=\\"start-undefined\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#start-undefined\\"><span>.start () : undefined</span></a></h3>\\n<p>启动时钟。同时将 startTime 和 oldTime 设置为当前时间。 设置 elapsedTime 为 0，并且设置 running 为 true.</p>\\n<h3 id=\\"stop-undefined\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#stop-undefined\\"><span>.stop () : undefined</span></a></h3>\\n<p>停止时钟。同时将 oldTime 设置为当前时间。</p>\\n<h3 id=\\"getelapsedtime-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#getelapsedtime-float\\"><span>.getElapsedTime () : Float</span></a></h3>\\n<p>获取自时钟启动后的秒数，同时将 .oldTime 设置为当前时间。\\n如果 .autoStart 设置为 true 且时钟并未运行，则该方法同时启动时钟。</p>\\n<h3 id=\\"getdelta-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#getdelta-float\\"><span>.getDelta () : Float</span></a></h3>\\n<p>获取自 .oldTime 设置后到当前的秒数。 同时将 .oldTime 设置为当前时间。\\n如果 .autoStart 设置为 true 且时钟并未运行，则该方法同时启动时钟。</p>\\n</iframe>"}');export{u as comp,m as data};
