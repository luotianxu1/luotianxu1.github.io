import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as t,b as n}from"./app-BrAc6PLC.js";const e="/img/softExamination/186.jpg",s="/img/softExamination/187.jpg",o="/img/softExamination/188.jpg",h="/img/softExamination/189.jpg",r="/img/softExamination/190.jpg",p="/img/softExamination/191.jpg",g="/img/softExamination/192.jpg",c="/img/softExamination/193.jpg",d="/img/softExamination/194.jpg",u="/img/softExamination/195.jpg",f="/img/softExamination/196.jpg",m="/img/softExamination/197.jpg",x="/img/softExamination/198.jpg",b="/img/softExamination/199.jpg",E="/img/softExamination/200.jpg",_="/img/softExamination/201.jpg",k="/img/softExamination/202.jpg",v="/img/softExamination/203.jpg",j={};function y(B,i){return l(),t("div",null,i[0]||(i[0]=[n('<h2 id="数据库模式" tabindex="-1"><a class="header-anchor" href="#数据库模式"><span>数据库模式</span></a></h2><figure><img src="'+e+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="关系表类型" tabindex="-1"><a class="header-anchor" href="#关系表类型"><span>关系表类型</span></a></h3><ul><li>基本关系（通常又称为基本表或基表）：实际存在的表，实际存储数据的逻辑表示</li><li>查询表:查询结果对应的表</li><li>视图表：由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表</li></ul><h3 id="数据库视图" tabindex="-1"><a class="header-anchor" href="#数据库视图"><span>数据库视图</span></a></h3><p>他是一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据</p><h3 id="视图的优点" tabindex="-1"><a class="header-anchor" href="#视图的优点"><span>视图的优点</span></a></h3><ol><li>视图能简化用户操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li><li>视图可以对机密数据提供安全保护</li></ol><h3 id="物化视图" tabindex="-1"><a class="header-anchor" href="#物化视图"><span>物化视图</span></a></h3><p>它不是传统意义上虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会更新。</p><h2 id="分布式数据库" tabindex="-1"><a class="header-anchor" href="#分布式数据库"><span>分布式数据库</span></a></h2><ul><li>数据独立性：除了数据的逻辑独立性与物理独立性外，还有数据分布独立性（分布透明性）</li><li>集中与自治共享结合的控制结构。各局部的DBM可以独立地管理局不数据库，具有自治的功能。同时，系统又设有几种控制机制，协调各局部DBM的工作，执行全局应用</li><li>适当增加数据冗余度。在不同的场地存储同一数据的多个副本,可以提高系统的可靠性和可用性，同时也能提高系统性能。提高系统的可用性，即当系统中某个节点发生故障时，因为数据有其他副本在非故障场地上，对其他所有场地来说，数据仍然是可用的，从而保证数据的完备性。</li><li>全局的一致性、可串行性和可恢复性。</li></ul><figure><img src="'+s+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h3><ul><li>LDBMS</li><li>GDBMS</li><li>全局数据字典</li><li>通信管理</li></ul><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><ul><li>全局控制集中DDBMS</li><li>全局控制分散DDBMS</li><li>全局控制部分分散的DDBMS</li></ul><h3 id="分布透明性" tabindex="-1"><a class="header-anchor" href="#分布透明性"><span>分布透明性</span></a></h3><ul><li>分片透明性 <ul><li>水平分片</li><li>垂直分片</li><li>混合分片</li></ul></li><li>位置透明性</li><li>局部数据模型透明性</li></ul><p>分片透明：是指用户不必关心数据是如何分片的，他们对数据的操作在全局关系上进行，即如何分片对用户是透明的</p><p>复制透明：用户不用关心数据库在网络中各个节点的复制情况,被复制的数据的更新都由系统自动完成</p><p>位置透明：是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的</p><p>局部映像透明性（逻辑透明）：是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部DBMS支持哪种数据模型、使用哪种数据操纵语言，数据模型和操纵语言的转换是由系统完成的。因此，局部映像透明性对异构型和同构异质的分布式数据库系统是非常重要的</p><h3 id="两阶段提交协议" tabindex="-1"><a class="header-anchor" href="#两阶段提交协议"><span>两阶段提交协议</span></a></h3><h4 id="_2pc事务提交的两个阶段" tabindex="-1"><a class="header-anchor" href="#_2pc事务提交的两个阶段"><span>2PC事务提交的两个阶段</span></a></h4><p>表决阶段，目的是形成一个共同的决定 执行阶段，目的是实现这个协调者的决定</p><h4 id="两条全局提交规则" tabindex="-1"><a class="header-anchor" href="#两条全局提交规则"><span>两条全局提交规则</span></a></h4><p>只要有一个参与者撤销事务，协调者就必须做出全局撤销决定 只有所有参与者都同意提交事务，协调者才能做出全局提交决定</p><h2 id="数据库设计过程" tabindex="-1"><a class="header-anchor" href="#数据库设计过程"><span>数据库设计过程</span></a></h2><figure><img src="'+o+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="概念结构设计" tabindex="-1"><a class="header-anchor" href="#概念结构设计"><span>概念结构设计</span></a></h3><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="逻辑结构设计" tabindex="-1"><a class="header-anchor" href="#逻辑结构设计"><span>逻辑结构设计</span></a></h2><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h3><p>数据模型三要素：数据结构、数据操作、数据的约束条件</p><h3 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h3><ul><li>目或度：关系模式中属性的个数</li><li>候选吗（候选键）</li><li>主码（主键）</li><li>主属性与非主属性：组成候选吗的属性就是主属性，其它的就是非主属性</li><li>外码（外键）</li><li>全码（ALL-Key）：关系模式的所有属性组是这个关系的候选码</li></ul><h3 id="完整性约束" tabindex="-1"><a class="header-anchor" href="#完整性约束"><span>完整性约束</span></a></h3><ul><li>实体完整性约束：规定基本关系的主属性不能取空值</li><li>参照完整性约束：关系与关系间的引用，其他关系的主键或空值</li><li>用户自定义完整性约束：应用环境决定</li></ul><h2 id="关系代数" tabindex="-1"><a class="header-anchor" href="#关系代数"><span>关系代数</span></a></h2><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="规范化理论" tabindex="-1"><a class="header-anchor" href="#规范化理论"><span>规范化理论</span></a></h2><h3 id="价值与用途" tabindex="-1"><a class="header-anchor" href="#价值与用途"><span>价值与用途</span></a></h3><p>非规范化的关系模式，可能存在的问题包括：数据冗余、更新异常（修改操作一致性问题）、插入异常、删除异常</p><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="键" tabindex="-1"><a class="header-anchor" href="#键"><span>键</span></a></h3><figure><img src="'+c+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主属性与非主属性：组成候选码的属性就是主属性，其它的就是非主属性</p><h3 id="求候选键" tabindex="-1"><a class="header-anchor" href="#求候选键"><span>求候选键</span></a></h3><ul><li>将关系模式的函数依赖关系用“有向图”的方式表示</li><li>找入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中所有节点，则该属性集即为关系模式的候选键</li><li>若入度为0的属性不能遍历图中所有节点，则需要尝试性的将一些中间结点（即有入度，也有出度的结点）并入入度为0的属性集中，直至该集合能遍历所有结点，集合为候选键</li></ul><h3 id="函数依赖" tabindex="-1"><a class="header-anchor" href="#函数依赖"><span>函数依赖</span></a></h3><figure><img src="'+d+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="armstrong公理" tabindex="-1"><a class="header-anchor" href="#armstrong公理"><span>Armstrong公理</span></a></h3><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="范式判断" tabindex="-1"><a class="header-anchor" href="#范式判断"><span>范式判断</span></a></h3><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="第一范式" tabindex="-1"><a class="header-anchor" href="#第一范式"><span>第一范式</span></a></h4><p>在关系模式R中，当且仅当所有域只包含原子值，即每个属性都是不可再分的数据项，则称关系模式R是第一范式</p><p>简单属性和复合属性、单值属性和多值属性NULL属性、派生属性</p><h4 id="第二范式" tabindex="-1"><a class="header-anchor" href="#第二范式"><span>第二范式</span></a></h4><p>当切仅当实体E时第一范式（1NF），且每一个非主属性完全依赖主键（不存在部分依赖）时，则称实体E是第二范式</p><h4 id="第三范式" tabindex="-1"><a class="header-anchor" href="#第三范式"><span>第三范式</span></a></h4><p>当切仅当实体E是第二范式（2NF），且E中没有非主属性传递依赖于码时，则称实体E是第三范式</p><h4 id="bc范式" tabindex="-1"><a class="header-anchor" href="#bc范式"><span>BC范式</span></a></h4><p>设R是一个关系模式，F是它的依赖集，R属于BCDF当切仅当其F中每个依赖的决定因素必定包含R的某个候选码</p><h2 id="模式分解" tabindex="-1"><a class="header-anchor" href="#模式分解"><span>模式分解</span></a></h2><h3 id="保持函数依赖分解" tabindex="-1"><a class="header-anchor" href="#保持函数依赖分解"><span>保持函数依赖分解</span></a></h3><p>设数据库模式p={R1,R2,...,Rk}是关系模式R的一个分解，F是R上的函数依赖集，p中每个模式Ri上的FD集是Fi。如果{F1,F2,...,Fk}与F是等价的（即相互逻辑蕴涵），那么称分解p保持FD</p><h3 id="无损分解" tabindex="-1"><a class="header-anchor" href="#无损分解"><span>无损分解</span></a></h3><p>有损：不能还原 无损：可以还原</p><p>无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式</p><h2 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制"><span>并发控制</span></a></h2><h3 id="事务的acid特性" tabindex="-1"><a class="header-anchor" href="#事务的acid特性"><span>事务的ACID特性</span></a></h3><p>事务</p><ul><li>原子性：是指事物包含的所有操作要么全部成功，要么全部失败回滚。这些操作是一个整体，不能部分地完成</li><li>一致性：是指事物必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事物执行之前和执行之后都必须处于一致性状态</li><li>隔离性：是指一个事物的执行不能被其他事物干扰，即一个事物内部的操作及使用的数据对并发的其他事物是隔离的</li><li>持续性：是指一个事物一旦被提交了，那么数据库中的数据的改变就是永久性的，无论发送何种谷中，都不应对其有任何影响</li></ul><h3 id="并发产生的问题" tabindex="-1"><a class="header-anchor" href="#并发产生的问题"><span>并发产生的问题</span></a></h3><ul><li>丢失更新</li><li>不可重复读问题</li><li>“脏”数据的读出</li></ul><h3 id="封锁协议" tabindex="-1"><a class="header-anchor" href="#封锁协议"><span>封锁协议</span></a></h3><figure><img src="'+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>一级封锁协议：事物T在修改数据R之前必须先对其加X锁，直到事物结束才释放。可防止丢失修改</li><li>二级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，读完后即可释放S锁。可防止丢失修改，还可防止读“脏”数据</li><li>三级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改、防读“脏”数据与防止数据（不可）重复读</li><li>两段锁协议。可串行化的，可能发生死锁</li></ul><h3 id="丢失更新加锁" tabindex="-1"><a class="header-anchor" href="#丢失更新加锁"><span>丢失更新加锁</span></a></h3><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="读-脏-数数加锁" tabindex="-1"><a class="header-anchor" href="#读-脏-数数加锁"><span>读“脏”数数加锁</span></a></h3><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="不可重读读加锁" tabindex="-1"><a class="header-anchor" href="#不可重读读加锁"><span>不可重读读加锁</span></a></h3><figure><img src="'+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="数据库的安全性" tabindex="-1"><a class="header-anchor" href="#数据库的安全性"><span>数据库的安全性</span></a></h2><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="数据库备份与恢复技术" tabindex="-1"><a class="header-anchor" href="#数据库备份与恢复技术"><span>数据库备份与恢复技术</span></a></h2><ul><li>冷备份也称为静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份（复制）下来</li><li>热备份也称为动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来</li></ul><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="数据备份" tabindex="-1"><a class="header-anchor" href="#数据备份"><span>数据备份</span></a></h3><ul><li>完全备份：备份所有数据</li><li>差量备份：仅备份上一次完全备份之后变化的数据</li><li>增量备份：备份上一份备份之后变化的数据</li></ul><p>日志文件：事务日志是针对数据库改所做的记录，它可以记录针对数据库的任何操作，并将记录结果保存在独立的文件中</p><h3 id="数据库故障与恢复" tabindex="-1"><a class="header-anchor" href="#数据库故障与恢复"><span>数据库故障与恢复</span></a></h3><figure><img src="'+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>撤销事务：故障发生时未完成的事务，放入Undo撤销</li><li>重做事务：故障发生前已提交的事务，放入Redo重做</li></ul>',98)]))}const F=a(j,[["render",y],["__file","11.数据库系统.html.vue"]]),R=JSON.parse('{"path":"/study/%E8%BD%AF%E8%80%83/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F.html","title":"数据库系统","lang":"zh-CN","frontmatter":{"title":"数据库系统","icon":"sheji","order":11,"date":"2024-07-16T00:00:00.000Z","category":["软考"],"tag":["软考"],"description":"数据库模式 关系表类型 基本关系（通常又称为基本表或基表）：实际存在的表，实际存储数据的逻辑表示 查询表:查询结果对应的表 视图表：由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表 数据库视图 他是一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/%E8%BD%AF%E8%80%83/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:title","content":"数据库系统"}],["meta",{"property":"og:description","content":"数据库模式 关系表类型 基本关系（通常又称为基本表或基表）：实际存在的表，实际存储数据的逻辑表示 查询表:查询结果对应的表 视图表：由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表 数据库视图 他是一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/softExamination/186.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"软考"}],["meta",{"property":"article:published_time","content":"2024-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库系统\\",\\"image\\":[\\"https://luotianxu1.github.io/img/softExamination/186.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/187.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/188.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/189.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/190.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/191.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/192.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/193.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/194.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/195.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/196.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/197.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/198.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/199.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/200.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/201.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/202.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/203.jpg\\"],\\"datePublished\\":\\"2024-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"数据库模式","slug":"数据库模式","link":"#数据库模式","children":[{"level":3,"title":"关系表类型","slug":"关系表类型","link":"#关系表类型","children":[]},{"level":3,"title":"数据库视图","slug":"数据库视图","link":"#数据库视图","children":[]},{"level":3,"title":"视图的优点","slug":"视图的优点","link":"#视图的优点","children":[]},{"level":3,"title":"物化视图","slug":"物化视图","link":"#物化视图","children":[]}]},{"level":2,"title":"分布式数据库","slug":"分布式数据库","link":"#分布式数据库","children":[{"level":3,"title":"组成","slug":"组成","link":"#组成","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"分布透明性","slug":"分布透明性","link":"#分布透明性","children":[]},{"level":3,"title":"两阶段提交协议","slug":"两阶段提交协议","link":"#两阶段提交协议","children":[]}]},{"level":2,"title":"数据库设计过程","slug":"数据库设计过程","link":"#数据库设计过程","children":[{"level":3,"title":"概念结构设计","slug":"概念结构设计","link":"#概念结构设计","children":[]}]},{"level":2,"title":"逻辑结构设计","slug":"逻辑结构设计","link":"#逻辑结构设计","children":[{"level":3,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[]},{"level":3,"title":"相关概念","slug":"相关概念","link":"#相关概念","children":[]},{"level":3,"title":"完整性约束","slug":"完整性约束","link":"#完整性约束","children":[]}]},{"level":2,"title":"关系代数","slug":"关系代数","link":"#关系代数","children":[]},{"level":2,"title":"规范化理论","slug":"规范化理论","link":"#规范化理论","children":[{"level":3,"title":"价值与用途","slug":"价值与用途","link":"#价值与用途","children":[]},{"level":3,"title":"键","slug":"键","link":"#键","children":[]},{"level":3,"title":"求候选键","slug":"求候选键","link":"#求候选键","children":[]},{"level":3,"title":"函数依赖","slug":"函数依赖","link":"#函数依赖","children":[]},{"level":3,"title":"Armstrong公理","slug":"armstrong公理","link":"#armstrong公理","children":[]},{"level":3,"title":"范式判断","slug":"范式判断","link":"#范式判断","children":[]}]},{"level":2,"title":"模式分解","slug":"模式分解","link":"#模式分解","children":[{"level":3,"title":"保持函数依赖分解","slug":"保持函数依赖分解","link":"#保持函数依赖分解","children":[]},{"level":3,"title":"无损分解","slug":"无损分解","link":"#无损分解","children":[]}]},{"level":2,"title":"并发控制","slug":"并发控制","link":"#并发控制","children":[{"level":3,"title":"事务的ACID特性","slug":"事务的acid特性","link":"#事务的acid特性","children":[]},{"level":3,"title":"并发产生的问题","slug":"并发产生的问题","link":"#并发产生的问题","children":[]},{"level":3,"title":"封锁协议","slug":"封锁协议","link":"#封锁协议","children":[]},{"level":3,"title":"丢失更新加锁","slug":"丢失更新加锁","link":"#丢失更新加锁","children":[]},{"level":3,"title":"读“脏”数数加锁","slug":"读-脏-数数加锁","link":"#读-脏-数数加锁","children":[]},{"level":3,"title":"不可重读读加锁","slug":"不可重读读加锁","link":"#不可重读读加锁","children":[]}]},{"level":2,"title":"数据库的安全性","slug":"数据库的安全性","link":"#数据库的安全性","children":[]},{"level":2,"title":"数据库备份与恢复技术","slug":"数据库备份与恢复技术","link":"#数据库备份与恢复技术","children":[{"level":3,"title":"数据备份","slug":"数据备份","link":"#数据备份","children":[]},{"level":3,"title":"数据库故障与恢复","slug":"数据库故障与恢复","link":"#数据库故障与恢复","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":8.4,"words":2520},"filePathRelative":"study/软考/11.数据库系统.md","localizedDate":"2024年7月16日","excerpt":"<h2>数据库模式</h2>\\n<figure><img src=\\"/img/softExamination/186.jpg\\" alt=\\" \\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption> </figcaption></figure>\\n<h3>关系表类型</h3>\\n<ul>\\n<li>基本关系（通常又称为基本表或基表）：实际存在的表，实际存储数据的逻辑表示</li>\\n<li>查询表:查询结果对应的表</li>\\n<li>视图表：由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表</li>\\n</ul>\\n<h3>数据库视图</h3>\\n<p>他是一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据</p>","autoDesc":true}');export{F as comp,R as data};
