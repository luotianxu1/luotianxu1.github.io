import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as s,c as o,a as i,d as r,b as l}from"./app-DhXEf2lS.js";const h={};function p(d,e){const n=t("IFrame");return s(),o("div",null,[e[0]||(e[0]=i("h2",{id:"animationaction",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#animationaction"},[i("span",null,"AnimationAction")])],-1)),e[1]||(e[1]=i("p",null,"AnimationActions 用来调度存储在AnimationClips中的动画。",-1)),e[2]||(e[2]=i("p",null,"说明: AnimationAction的大多数方法都可以链式调用",-1)),r(n,{url:"https://luotainxu-demo.netlify.app/#/threejs/animation"}),e[3]||(e[3]=l(`<h2 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器"><span>构造器</span></a></h2><h3 id="animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d" tabindex="-1"><a class="header-anchor" href="#animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d"><span>AnimationAction( mixer : AnimationMixer, clip : AnimationClip, localRoot : Object3D )</span></a></h3><ul><li>mixer - 被此动作控制的 <em>动画混合器</em></li><li>clip - <em>动画剪辑</em> 保存了此动作当中的动画数据</li><li>localRoot - 动作执行的根对象</li></ul><p>说明: 不要直接调用这个构造函数，而应该先用AnimationMixer.clipAction实例化一个AnimationAction，因为这个方法提供了缓存以提高性能。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><h3 id="clampwhenfinished-boolean" tabindex="-1"><a class="header-anchor" href="#clampwhenfinished-boolean"><span>.clampWhenFinished : Boolean</span></a></h3><p>如果 clampWhenFinished 值设为true, 那么动画将在最后一帧之后自动暂停（paused）</p><p>如果 clampWhenFinished 值为false, enabled 属性值将在动作的最后一次循环完成之后自动改为false, 那么这个动作以后就不会再执行。</p><p>默认值为false</p><p>说明: 动作如果被中断了，clampWhenFinished将无效 (只有当最后一次循环执行完毕之后才能起效）</p><h3 id="enabled-boolean" tabindex="-1"><a class="header-anchor" href="#enabled-boolean"><span>.enabled : Boolean</span></a></h3><p>enabled 值设为false会禁用动作, 也就是无效.默认值是true</p><p>当enabled被重新置为true, 动画将从当前时间（time）继续 (将 enabled 置为 false 不会重置此次动作)</p><p>说明: 将enabled置为true不会让动画自动重新开始。只有满足以下条件时才会马上重新开始: 暂停（paused）值为false, 同时动作没有失效 (执行停止(stop)命令或重置(reset)命令， 且权重(weight)和时间比例(timeScale)都不能为0</p><h3 id="loop-number" tabindex="-1"><a class="header-anchor" href="#loop-number"><span>.loop : Number</span></a></h3><p>循环模式 (可以通过setLoop改变)。默认值是 THREE.LoopRepeat (重复repetitions次数无穷)</p><p>必须是以下值之一：</p><ul><li>THREE.LoopOnce - 只执行一次</li><li>THREE.LoopRepeat - 重复次数为repetitions的值, 且每次循环结束时候将回到起始动作开始下一次循环。</li><li>THREE.LoopPingPong - 重复次数为repetitions的值, 且像乒乓球一样在起始点与结束点之间来回循环。</li></ul><h3 id="paused-boolean" tabindex="-1"><a class="header-anchor" href="#paused-boolean"><span>.paused : Boolean</span></a></h3><p>paused置为true会通过将动作的有效时间比例改为0来使动作暂停执行。默认值是false</p><h3 id="repetitions-number" tabindex="-1"><a class="header-anchor" href="#repetitions-number"><span>.repetitions : Number</span></a></h3><p>整个动作过程动画剪辑（AnimationClip）执行的次数，可以通过setLoop修改。默认值是Infinity</p><p>如果循环模式（loop mode）值被设置为THREE.LoopOnce，repetitions值将会无效。</p><h3 id="time-number" tabindex="-1"><a class="header-anchor" href="#time-number"><span>.time : Number</span></a></h3><p>动作开始的时间点 (单位是秒, 从0开始计时).</p><p>这个值被限定在 0到clip.duration(根据循环状态)范围之内. 可以通过改变时间比例（timeScale) (使用 setEffectiveTimeScale 或者 setDuration)来将它相对于全局的混合器缩放.</p><h3 id="timescale-number" tabindex="-1"><a class="header-anchor" href="#timescale-number"><span>.timeScale : Number</span></a></h3><p>时间(time)的比例因子. 值为0时会使动画暂停。值为负数时动画会反向执行。默认值是1。</p><p>关于timeScale属性/方法 (不同于 time) 有: getEffectiveTimeScale, halt, paused, setDuration, setEffectiveTimeScale, stopWarping, syncWith, warp.</p><h3 id="weight-number" tabindex="-1"><a class="header-anchor" href="#weight-number"><span>.weight : Number</span></a></h3><p>动作的影响程度 (取值范围[0, 1]). 0 (无影响)到1（完全影响）之间的值可以用来混合多个动作。默认值是1</p><p>关于weight的属性/方法有: crossFadeFrom, crossFadeTo, enabled, fadeIn, fadeOut, getEffectiveWeight, setEffectiveWeight, stopFading.</p><h3 id="zeroslopeatend-boolean" tabindex="-1"><a class="header-anchor" href="#zeroslopeatend-boolean"><span>.zeroSlopeAtEnd : Boolean</span></a></h3><p>启用平滑插值，无须单独剪辑开始、循环和结束。默认值是true</p><h3 id="zeroslopeatstart-boolean" tabindex="-1"><a class="header-anchor" href="#zeroslopeatstart-boolean"><span>.zeroSlopeAtStart : Boolean</span></a></h3><p>启用平滑插值，无须单独剪辑开始、循环和结束。默认值是true</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this" tabindex="-1"><a class="header-anchor" href="#crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this"><span>.crossFadeFrom ( fadeOutAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this</span></a></h3><p>在传入的时间段内，让此动作淡入(fade in),同时让另一个动作淡出。此方法可链式调用。</p><p>如果warpBoolean值是true, 额外的 warping (时间比例的渐变)将会被应用。</p><p>说明: 与 fadeIn/fadeOut一样, 淡入淡出动作开始/结束时的权重是1.</p><h3 id="crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this" tabindex="-1"><a class="header-anchor" href="#crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this"><span>.crossFadeTo ( fadeInAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this</span></a></h3><p>在传入的时间段内, 让此动作淡出（fade out），同时让另一个动作淡入。此方法可链式调用。</p><p>如果warpBoolean值是true, 额外的 warping (时间比例的渐变)将会被应用。</p><p>说明: 与 fadeIn/fadeOut一样, 淡入淡出动作开始/结束时的权重是1.</p><h3 id="fadein-durationinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#fadein-durationinseconds-number-this"><span>.fadeIn ( durationInSeconds : Number ) : this</span></a></h3><p>在传入的时间间隔内，逐渐将此动作的权重（weight）由0升到1。此方法可链式调用。</p><h3 id="fadeout-durationinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#fadeout-durationinseconds-number-this"><span>.fadeOut ( durationInSeconds : Number ) : this</span></a></h3><p>在传入的时间间隔内，逐渐将此动作的权重（weight）由1降至0。此方法可链式调用。</p><h3 id="geteffectivetimescale-number" tabindex="-1"><a class="header-anchor" href="#geteffectivetimescale-number"><span>.getEffectiveTimeScale () : Number</span></a></h3><p>返回有效时间比例(考虑当前的变形状态和paused值).</p><h3 id="geteffectiveweight-number" tabindex="-1"><a class="header-anchor" href="#geteffectiveweight-number"><span>.getEffectiveWeight () : number</span></a></h3><p>返回影响权重(考虑当前淡入淡出状态和enabled的值).</p><h3 id="getclip-animationclip" tabindex="-1"><a class="header-anchor" href="#getclip-animationclip"><span>.getClip () : AnimationClip</span></a></h3><p>返回存有此动作的动画数据的剪辑</p><h3 id="getmixer-animationmixer" tabindex="-1"><a class="header-anchor" href="#getmixer-animationmixer"><span>.getMixer () : AnimationMixer</span></a></h3><p>返回负责完成此动作的混合器</p><h3 id="getroot-object3d" tabindex="-1"><a class="header-anchor" href="#getroot-object3d"><span>.getRoot () : Object3D</span></a></h3><p>返回执行此动作的根对象</p><h3 id="halt-durationinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#halt-durationinseconds-number-this"><span>.halt ( durationInSeconds : Number ) : this</span></a></h3><p>在传入的时间间隔内，通过从当前值开始逐渐降低时间比例(timeScale)使动画逐渐减速至0。此方法可链式调用。</p><h3 id="isrunning-boolean" tabindex="-1"><a class="header-anchor" href="#isrunning-boolean"><span>.isRunning () : Boolean</span></a></h3><p>返回当前此动作的时间(time)是否正在流逝</p><p>除了在混合器中被激活之外 (参见isScheduled)必须满足以下条件才会返回true: paused值等于false, enabled值为true, timeScale值不为0, 而且没有安排延时启动(startAt).</p><p>说明 isRunning 为true并不意味着此动画一定会切实地被看到。仅当权重(weight)被设置为非零值时才是这种情况。</p><h3 id="isscheduled-boolean" tabindex="-1"><a class="header-anchor" href="#isscheduled-boolean"><span>.isScheduled () : Boolean</span></a></h3><p>如果动作是在混合器中被激活的，返回true。</p><p>说明: 这并不意味着动画正在执行中 (需要额外判断isRunning值)</p><h3 id="play-this" tabindex="-1"><a class="header-anchor" href="#play-this"><span>.play () : this</span></a></h3><p>让混合器激活动作。此方法可链式调用。</p><p>说明: 激活动作并不意味着动画会立刻开始: 如果动作在此之前已经完成（到达最后一次循环的结尾），或者如果已经设置了延时 启动(通过 startAt)，则必须先执行重置操作（reset）。 一些其它的设置项 (paused=true, enabled=false, weight=0, timeScale=0) 也可以阻止动画的开始。</p><h3 id="reset-this" tabindex="-1"><a class="header-anchor" href="#reset-this"><span>.reset () : this</span></a></h3><p>重置动作。此方法可链式调用。</p><p>该方法会将暂停值 paused 设为false, 启用值enabled 设为true,时间值 time设为0, 中断任何预定的淡入淡出和变形, 以及移除内部循环次数以及延迟启动。</p><p>说明: 停止方法stop内调用了重置方法（reset）, 但是 .reset不会调用 .stop。 这就表示: 如果你想要这两者, 重置并且停止, 不要调用reset; 而应该调用stop。</p><h3 id="setduration-durationinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#setduration-durationinseconds-number-this"><span>.setDuration ( durationInSeconds : Number ) : this</span></a></h3><p>设置单此循环的持续时间(通过调整时间比例（timeScale）以及停用所有的变形)。此方法可以链式调用。</p><h3 id="seteffectivetimescale-timescale-number-this" tabindex="-1"><a class="header-anchor" href="#seteffectivetimescale-timescale-number-this"><span>.setEffectiveTimeScale ( timeScale : Number ) : this</span></a></h3><p>设置时间比例（timeScale）以及停用所有的变形)。 此方法可以链式调用。</p><p>如果暂停 （paused）值为false, 有效的时间比例(一个内部属性) 也会被设为该值; 否则有效时间比例 (直接影响当前动画 将会被设为0.</p><p>说明: 如果时间比例.timeScale 被此方法设为0，暂停值paused不会被自动改为true。</p><h3 id="seteffectiveweight-weight-number-this" tabindex="-1"><a class="header-anchor" href="#seteffectiveweight-weight-number-this"><span>.setEffectiveWeight ( weight : Number ) : this</span></a></h3><p>设置权重（weight）以及停止所有淡入淡出。该方法可以链式调用。</p><p>如果启用属性（enabled）为true, 那么有效权重(一个内部属性) 也会被设为该值; 否则有效权重 (直接影响当前动画)将会被设为0.</p><p>说明: 如果该方法将权重weight值设为0，启用值enabled不会被自动改为false。</p><h3 id="setloop-loopmode-number-repetitions-number-this" tabindex="-1"><a class="header-anchor" href="#setloop-loopmode-number-repetitions-number-this"><span>.setLoop ( loopMode : Number, repetitions : Number ) : this</span></a></h3><p>设置循环（loop mode）及循环重复次数（repetitions）。改方法可被链式调用。</p><h3 id="startat-starttimeinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#startat-starttimeinseconds-number-this"><span>.startAt ( startTimeInSeconds : Number ) : this</span></a></h3><p>定义延时启动的事件 (通常会传入AnimationMixer.time + deltaTimeInSeconds)。 该方法可以链式调用。</p><p>说明: 如果 startAt方法是和play方法一起链式调用, 或者动画已经在混合器中被激活 (通过先行调用play, 同时没有停止或重置)，动画将仅在给定时间开始.</p><h3 id="stop-this" tabindex="-1"><a class="header-anchor" href="#stop-this"><span>.stop () : this</span></a></h3><p>让混合器停止动作。该方法可以被链式调用。</p><p>动作会马上停止以及完全[page:.reset 重置].</p><p>说明: 你可以通过mixer.stopAllAction在一个混合器中一举停止所有处于激活态的动作。</p><h3 id="stopfading-this" tabindex="-1"><a class="header-anchor" href="#stopfading-this"><span>.stopFading () : this</span></a></h3><p>停止动作中所有预定的淡入淡出（fading）。该方法可以被链式调用。</p><h3 id="stopwarping-this" tabindex="-1"><a class="header-anchor" href="#stopwarping-this"><span>.stopWarping () : this</span></a></h3><p>停用动作中所有预定的变形warping。该方法可被链式调用。</p><h3 id="syncwith-otheraction-animationaction-this" tabindex="-1"><a class="header-anchor" href="#syncwith-otheraction-animationaction-this"><span>.syncWith ( otherAction : AnimationAction ) : this</span></a></h3><p>将此动作与传入的其它动作同步。此方法可被链式调用。</p><p>同步是通过将动作的时间(time)或时间比例(timeScale)与另一动作设置一致来实现的 (停用所有预定的变形)。</p><p>说明: 另一动作的 time 和 timeScale未来变化将不会被检测到.</p><h3 id="warp-starttimescale-number-endtimescale-number-durationinseconds-number-this" tabindex="-1"><a class="header-anchor" href="#warp-starttimescale-number-endtimescale-number-durationinseconds-number-this"><span>.warp ( startTimeScale : Number, endTimeScale : Number, durationInSeconds : Number ) : this</span></a></h3><p>在传入的事件间隔内，通过逐渐将时间比例timeScale由startTimeScale修改至endTimeScale来改变回放速度。该方法可被链式调用。</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>有两个事件分别表示了单次循环的结束和全部动作的结束，你可以这样对它们做出响应:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mixer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;loop&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) { …} );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mixer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;finished&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) { …} );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,107))])}const u=a(h,[["render",p],["__file","AnimationAction.html.vue"]]),b=JSON.parse(`{"path":"/threejs/%E5%8A%A8%E7%94%BB/AnimationAction.html","title":"AnimationAction","lang":"zh-CN","frontmatter":{"title":"AnimationAction","icon":"markdown","order":3,"date":"2023-03-20T00:00:00.000Z","category":["threejs"],"tag":["动画"],"description":"AnimationAction AnimationActions 用来调度存储在AnimationClips中的动画。 说明: AnimationAction的大多数方法都可以链式调用","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/threejs/%E5%8A%A8%E7%94%BB/AnimationAction.html"}],["meta",{"property":"og:title","content":"AnimationAction"}],["meta",{"property":"og:description","content":"AnimationAction AnimationActions 用来调度存储在AnimationClips中的动画。 说明: AnimationAction的大多数方法都可以链式调用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"动画"}],["meta",{"property":"article:published_time","content":"2023-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AnimationAction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"AnimationAction","slug":"animationaction","link":"#animationaction","children":[]},{"level":2,"title":"构造器","slug":"构造器","link":"#构造器","children":[{"level":3,"title":"AnimationAction( mixer : AnimationMixer, clip : AnimationClip, localRoot : Object3D )","slug":"animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d","link":"#animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d","children":[]}]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":".clampWhenFinished : Boolean","slug":"clampwhenfinished-boolean","link":"#clampwhenfinished-boolean","children":[]},{"level":3,"title":".enabled : Boolean","slug":"enabled-boolean","link":"#enabled-boolean","children":[]},{"level":3,"title":".loop : Number","slug":"loop-number","link":"#loop-number","children":[]},{"level":3,"title":".paused : Boolean","slug":"paused-boolean","link":"#paused-boolean","children":[]},{"level":3,"title":".repetitions : Number","slug":"repetitions-number","link":"#repetitions-number","children":[]},{"level":3,"title":".time : Number","slug":"time-number","link":"#time-number","children":[]},{"level":3,"title":".timeScale : Number","slug":"timescale-number","link":"#timescale-number","children":[]},{"level":3,"title":".weight : Number","slug":"weight-number","link":"#weight-number","children":[]},{"level":3,"title":".zeroSlopeAtEnd : Boolean","slug":"zeroslopeatend-boolean","link":"#zeroslopeatend-boolean","children":[]},{"level":3,"title":".zeroSlopeAtStart : Boolean","slug":"zeroslopeatstart-boolean","link":"#zeroslopeatstart-boolean","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":".crossFadeFrom ( fadeOutAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this","slug":"crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this","link":"#crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this","children":[]},{"level":3,"title":".crossFadeTo ( fadeInAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this","slug":"crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this","link":"#crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this","children":[]},{"level":3,"title":".fadeIn ( durationInSeconds : Number ) : this","slug":"fadein-durationinseconds-number-this","link":"#fadein-durationinseconds-number-this","children":[]},{"level":3,"title":".fadeOut ( durationInSeconds : Number ) : this","slug":"fadeout-durationinseconds-number-this","link":"#fadeout-durationinseconds-number-this","children":[]},{"level":3,"title":".getEffectiveTimeScale () : Number","slug":"geteffectivetimescale-number","link":"#geteffectivetimescale-number","children":[]},{"level":3,"title":".getEffectiveWeight () : number","slug":"geteffectiveweight-number","link":"#geteffectiveweight-number","children":[]},{"level":3,"title":".getClip () : AnimationClip","slug":"getclip-animationclip","link":"#getclip-animationclip","children":[]},{"level":3,"title":".getMixer () : AnimationMixer","slug":"getmixer-animationmixer","link":"#getmixer-animationmixer","children":[]},{"level":3,"title":".getRoot () : Object3D","slug":"getroot-object3d","link":"#getroot-object3d","children":[]},{"level":3,"title":".halt ( durationInSeconds : Number ) : this","slug":"halt-durationinseconds-number-this","link":"#halt-durationinseconds-number-this","children":[]},{"level":3,"title":".isRunning () : Boolean","slug":"isrunning-boolean","link":"#isrunning-boolean","children":[]},{"level":3,"title":".isScheduled () : Boolean","slug":"isscheduled-boolean","link":"#isscheduled-boolean","children":[]},{"level":3,"title":".play () : this","slug":"play-this","link":"#play-this","children":[]},{"level":3,"title":".reset () : this","slug":"reset-this","link":"#reset-this","children":[]},{"level":3,"title":".setDuration ( durationInSeconds : Number ) : this","slug":"setduration-durationinseconds-number-this","link":"#setduration-durationinseconds-number-this","children":[]},{"level":3,"title":".setEffectiveTimeScale ( timeScale : Number ) : this","slug":"seteffectivetimescale-timescale-number-this","link":"#seteffectivetimescale-timescale-number-this","children":[]},{"level":3,"title":".setEffectiveWeight ( weight : Number ) : this","slug":"seteffectiveweight-weight-number-this","link":"#seteffectiveweight-weight-number-this","children":[]},{"level":3,"title":".setLoop ( loopMode : Number, repetitions : Number ) : this","slug":"setloop-loopmode-number-repetitions-number-this","link":"#setloop-loopmode-number-repetitions-number-this","children":[]},{"level":3,"title":".startAt ( startTimeInSeconds : Number ) : this","slug":"startat-starttimeinseconds-number-this","link":"#startat-starttimeinseconds-number-this","children":[]},{"level":3,"title":".stop () : this","slug":"stop-this","link":"#stop-this","children":[]},{"level":3,"title":".stopFading () : this","slug":"stopfading-this","link":"#stopfading-this","children":[]},{"level":3,"title":".stopWarping () : this","slug":"stopwarping-this","link":"#stopwarping-this","children":[]},{"level":3,"title":".syncWith ( otherAction : AnimationAction ) : this","slug":"syncwith-otheraction-animationaction-this","link":"#syncwith-otheraction-animationaction-this","children":[]},{"level":3,"title":".warp ( startTimeScale : Number, endTimeScale : Number, durationInSeconds : Number ) : this","slug":"warp-starttimescale-number-endtimescale-number-durationinseconds-number-this","link":"#warp-starttimescale-number-endtimescale-number-durationinseconds-number-this","children":[]}]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":7.56,"words":2269},"filePathRelative":"threejs/动画/AnimationAction.md","localizedDate":"2023年3月20日","excerpt":"<h2>AnimationAction</h2>\\n<p>AnimationActions 用来调度存储在AnimationClips中的动画。</p>\\n<p>说明: AnimationAction的大多数方法都可以链式调用</p>\\n<iframe url=\\"https://luotainxu-demo.netlify.app/#/threejs/animation\\">\\n<h2 id=\\"构造器\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#构造器\\"><span>构造器</span></a></h2>\\n<h3 id=\\"animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#animationaction-mixer-animationmixer-clip-animationclip-localroot-object3d\\"><span>AnimationAction( mixer : AnimationMixer, clip : AnimationClip, localRoot : Object3D )</span></a></h3>\\n<ul>\\n<li>mixer - 被此动作控制的 <em>动画混合器</em></li>\\n<li>clip - <em>动画剪辑</em> 保存了此动作当中的动画数据</li>\\n<li>localRoot - 动作执行的根对象</li>\\n</ul>\\n<p>说明: 不要直接调用这个构造函数，而应该先用AnimationMixer.clipAction实例化一个AnimationAction，因为这个方法提供了缓存以提高性能。</p>\\n<h2 id=\\"属性\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#属性\\"><span>属性</span></a></h2>\\n<h3 id=\\"clampwhenfinished-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#clampwhenfinished-boolean\\"><span>.clampWhenFinished : Boolean</span></a></h3>\\n<p>如果 clampWhenFinished 值设为true, 那么动画将在最后一帧之后自动暂停（paused）</p>\\n<p>如果 clampWhenFinished 值为false, enabled 属性值将在动作的最后一次循环完成之后自动改为false, 那么这个动作以后就不会再执行。</p>\\n<p>默认值为false</p>\\n<p>说明: 动作如果被中断了，clampWhenFinished将无效 (只有当最后一次循环执行完毕之后才能起效）</p>\\n<h3 id=\\"enabled-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#enabled-boolean\\"><span>.enabled : Boolean</span></a></h3>\\n<p>enabled 值设为false会禁用动作, 也就是无效.默认值是true</p>\\n<p>当enabled被重新置为true, 动画将从当前时间（time）继续 (将 enabled 置为 false 不会重置此次动作)</p>\\n<p>说明: 将enabled置为true不会让动画自动重新开始。只有满足以下条件时才会马上重新开始: 暂停（paused）值为false, 同时动作没有失效 (执行停止(stop)命令或重置(reset)命令， 且权重(weight)和时间比例(timeScale)都不能为0</p>\\n<h3 id=\\"loop-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#loop-number\\"><span>.loop : Number</span></a></h3>\\n<p>循环模式 (可以通过setLoop改变)。默认值是 THREE.LoopRepeat (重复repetitions次数无穷)</p>\\n<p>必须是以下值之一：</p>\\n<ul>\\n<li>THREE.LoopOnce - 只执行一次</li>\\n<li>THREE.LoopRepeat - 重复次数为repetitions的值, 且每次循环结束时候将回到起始动作开始下一次循环。</li>\\n<li>THREE.LoopPingPong - 重复次数为repetitions的值, 且像乒乓球一样在起始点与结束点之间来回循环。</li>\\n</ul>\\n<h3 id=\\"paused-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#paused-boolean\\"><span>.paused : Boolean</span></a></h3>\\n<p>paused置为true会通过将动作的有效时间比例改为0来使动作暂停执行。默认值是false</p>\\n<h3 id=\\"repetitions-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#repetitions-number\\"><span>.repetitions : Number</span></a></h3>\\n<p>整个动作过程动画剪辑（AnimationClip）执行的次数，可以通过setLoop修改。默认值是Infinity</p>\\n<p>如果循环模式（loop mode）值被设置为THREE.LoopOnce，repetitions值将会无效。</p>\\n<h3 id=\\"time-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#time-number\\"><span>.time : Number</span></a></h3>\\n<p>动作开始的时间点 (单位是秒, 从0开始计时).</p>\\n<p>这个值被限定在 0到clip.duration(根据循环状态)范围之内. 可以通过改变时间比例（timeScale) (使用 setEffectiveTimeScale 或者 setDuration)来将它相对于全局的混合器缩放.</p>\\n<h3 id=\\"timescale-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#timescale-number\\"><span>.timeScale : Number</span></a></h3>\\n<p>时间(time)的比例因子. 值为0时会使动画暂停。值为负数时动画会反向执行。默认值是1。</p>\\n<p>关于timeScale属性/方法 (不同于 time) 有: getEffectiveTimeScale, halt, paused, setDuration, setEffectiveTimeScale, stopWarping, syncWith, warp.</p>\\n<h3 id=\\"weight-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#weight-number\\"><span>.weight : Number</span></a></h3>\\n<p>动作的影响程度 (取值范围[0, 1]). 0 (无影响)到1（完全影响）之间的值可以用来混合多个动作。默认值是1</p>\\n<p>关于weight的属性/方法有: crossFadeFrom, crossFadeTo, enabled, fadeIn, fadeOut, getEffectiveWeight, setEffectiveWeight, stopFading.</p>\\n<h3 id=\\"zeroslopeatend-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#zeroslopeatend-boolean\\"><span>.zeroSlopeAtEnd : Boolean</span></a></h3>\\n<p>启用平滑插值，无须单独剪辑开始、循环和结束。默认值是true</p>\\n<h3 id=\\"zeroslopeatstart-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#zeroslopeatstart-boolean\\"><span>.zeroSlopeAtStart : Boolean</span></a></h3>\\n<p>启用平滑插值，无须单独剪辑开始、循环和结束。默认值是true</p>\\n<h2 id=\\"方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#方法\\"><span>方法</span></a></h2>\\n<h3 id=\\"crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#crossfadefrom-fadeoutaction-animationaction-durationinseconds-number-warpboolean-boolean-this\\"><span>.crossFadeFrom ( fadeOutAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this</span></a></h3>\\n<p>在传入的时间段内，让此动作淡入(fade in),同时让另一个动作淡出。此方法可链式调用。</p>\\n<p>如果warpBoolean值是true, 额外的 warping (时间比例的渐变)将会被应用。</p>\\n<p>说明: 与 fadeIn/fadeOut一样, 淡入淡出动作开始/结束时的权重是1.</p>\\n<h3 id=\\"crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#crossfadeto-fadeinaction-animationaction-durationinseconds-number-warpboolean-boolean-this\\"><span>.crossFadeTo ( fadeInAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this</span></a></h3>\\n<p>在传入的时间段内, 让此动作淡出（fade out），同时让另一个动作淡入。此方法可链式调用。</p>\\n<p>如果warpBoolean值是true, 额外的 warping (时间比例的渐变)将会被应用。</p>\\n<p>说明: 与 fadeIn/fadeOut一样, 淡入淡出动作开始/结束时的权重是1.</p>\\n<h3 id=\\"fadein-durationinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#fadein-durationinseconds-number-this\\"><span>.fadeIn ( durationInSeconds : Number ) : this</span></a></h3>\\n<p>在传入的时间间隔内，逐渐将此动作的权重（weight）由0升到1。此方法可链式调用。</p>\\n<h3 id=\\"fadeout-durationinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#fadeout-durationinseconds-number-this\\"><span>.fadeOut ( durationInSeconds : Number ) : this</span></a></h3>\\n<p>在传入的时间间隔内，逐渐将此动作的权重（weight）由1降至0。此方法可链式调用。</p>\\n<h3 id=\\"geteffectivetimescale-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#geteffectivetimescale-number\\"><span>.getEffectiveTimeScale () : Number</span></a></h3>\\n<p>返回有效时间比例(考虑当前的变形状态和paused值).</p>\\n<h3 id=\\"geteffectiveweight-number\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#geteffectiveweight-number\\"><span>.getEffectiveWeight () : number</span></a></h3>\\n<p>返回影响权重(考虑当前淡入淡出状态和enabled的值).</p>\\n<h3 id=\\"getclip-animationclip\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#getclip-animationclip\\"><span>.getClip () : AnimationClip</span></a></h3>\\n<p>返回存有此动作的动画数据的剪辑</p>\\n<h3 id=\\"getmixer-animationmixer\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#getmixer-animationmixer\\"><span>.getMixer () : AnimationMixer</span></a></h3>\\n<p>返回负责完成此动作的混合器</p>\\n<h3 id=\\"getroot-object3d\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#getroot-object3d\\"><span>.getRoot () : Object3D</span></a></h3>\\n<p>返回执行此动作的根对象</p>\\n<h3 id=\\"halt-durationinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#halt-durationinseconds-number-this\\"><span>.halt ( durationInSeconds : Number ) : this</span></a></h3>\\n<p>在传入的时间间隔内，通过从当前值开始逐渐降低时间比例(timeScale)使动画逐渐减速至0。此方法可链式调用。</p>\\n<h3 id=\\"isrunning-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#isrunning-boolean\\"><span>.isRunning () : Boolean</span></a></h3>\\n<p>返回当前此动作的时间(time)是否正在流逝</p>\\n<p>除了在混合器中被激活之外 (参见isScheduled)必须满足以下条件才会返回true: paused值等于false, enabled值为true, timeScale值不为0, 而且没有安排延时启动(startAt).</p>\\n<p>说明 isRunning 为true并不意味着此动画一定会切实地被看到。仅当权重(weight)被设置为非零值时才是这种情况。</p>\\n<h3 id=\\"isscheduled-boolean\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#isscheduled-boolean\\"><span>.isScheduled () : Boolean</span></a></h3>\\n<p>如果动作是在混合器中被激活的，返回true。</p>\\n<p>说明: 这并不意味着动画正在执行中 (需要额外判断isRunning值)</p>\\n<h3 id=\\"play-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#play-this\\"><span>.play () : this</span></a></h3>\\n<p>让混合器激活动作。此方法可链式调用。</p>\\n<p>说明: 激活动作并不意味着动画会立刻开始: 如果动作在此之前已经完成（到达最后一次循环的结尾），或者如果已经设置了延时 启动(通过 startAt)，则必须先执行重置操作（reset）。 一些其它的设置项 (paused=true, enabled=false, weight=0, timeScale=0) 也可以阻止动画的开始。</p>\\n<h3 id=\\"reset-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#reset-this\\"><span>.reset () : this</span></a></h3>\\n<p>重置动作。此方法可链式调用。</p>\\n<p>该方法会将暂停值 paused 设为false, 启用值enabled 设为true,时间值 time设为0, 中断任何预定的淡入淡出和变形, 以及移除内部循环次数以及延迟启动。</p>\\n<p>说明: 停止方法stop内调用了重置方法（reset）, 但是 .reset不会调用 .stop。 这就表示: 如果你想要这两者, 重置并且停止, 不要调用reset; 而应该调用stop。</p>\\n<h3 id=\\"setduration-durationinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#setduration-durationinseconds-number-this\\"><span>.setDuration ( durationInSeconds : Number ) : this</span></a></h3>\\n<p>设置单此循环的持续时间(通过调整时间比例（timeScale）以及停用所有的变形)。此方法可以链式调用。</p>\\n<h3 id=\\"seteffectivetimescale-timescale-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#seteffectivetimescale-timescale-number-this\\"><span>.setEffectiveTimeScale ( timeScale : Number ) : this</span></a></h3>\\n<p>设置时间比例（timeScale）以及停用所有的变形)。 此方法可以链式调用。</p>\\n<p>如果暂停 （paused）值为false, 有效的时间比例(一个内部属性) 也会被设为该值; 否则有效时间比例 (直接影响当前动画 将会被设为0.</p>\\n<p>说明: 如果时间比例.timeScale 被此方法设为0，暂停值paused不会被自动改为true。</p>\\n<h3 id=\\"seteffectiveweight-weight-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#seteffectiveweight-weight-number-this\\"><span>.setEffectiveWeight ( weight : Number ) : this</span></a></h3>\\n<p>设置权重（weight）以及停止所有淡入淡出。该方法可以链式调用。</p>\\n<p>如果启用属性（enabled）为true, 那么有效权重(一个内部属性) 也会被设为该值; 否则有效权重 (直接影响当前动画)将会被设为0.</p>\\n<p>说明: 如果该方法将权重weight值设为0，启用值enabled不会被自动改为false。</p>\\n<h3 id=\\"setloop-loopmode-number-repetitions-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#setloop-loopmode-number-repetitions-number-this\\"><span>.setLoop ( loopMode : Number, repetitions : Number ) : this</span></a></h3>\\n<p>设置循环（loop mode）及循环重复次数（repetitions）。改方法可被链式调用。</p>\\n<h3 id=\\"startat-starttimeinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#startat-starttimeinseconds-number-this\\"><span>.startAt ( startTimeInSeconds : Number ) : this</span></a></h3>\\n<p>定义延时启动的事件 (通常会传入AnimationMixer.time + deltaTimeInSeconds)。 该方法可以链式调用。</p>\\n<p>说明: 如果 startAt方法是和play方法一起链式调用, 或者动画已经在混合器中被激活 (通过先行调用play, 同时没有停止或重置)，动画将仅在给定时间开始.</p>\\n<h3 id=\\"stop-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#stop-this\\"><span>.stop () : this</span></a></h3>\\n<p>让混合器停止动作。该方法可以被链式调用。</p>\\n<p>动作会马上停止以及完全[page:.reset 重置].</p>\\n<p>说明: 你可以通过mixer.stopAllAction在一个混合器中一举停止所有处于激活态的动作。</p>\\n<h3 id=\\"stopfading-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#stopfading-this\\"><span>.stopFading () : this</span></a></h3>\\n<p>停止动作中所有预定的淡入淡出（fading）。该方法可以被链式调用。</p>\\n<h3 id=\\"stopwarping-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#stopwarping-this\\"><span>.stopWarping () : this</span></a></h3>\\n<p>停用动作中所有预定的变形warping。该方法可被链式调用。</p>\\n<h3 id=\\"syncwith-otheraction-animationaction-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#syncwith-otheraction-animationaction-this\\"><span>.syncWith ( otherAction : AnimationAction ) : this</span></a></h3>\\n<p>将此动作与传入的其它动作同步。此方法可被链式调用。</p>\\n<p>同步是通过将动作的时间(time)或时间比例(timeScale)与另一动作设置一致来实现的 (停用所有预定的变形)。</p>\\n<p>说明: 另一动作的 time 和 timeScale未来变化将不会被检测到.</p>\\n<h3 id=\\"warp-starttimescale-number-endtimescale-number-durationinseconds-number-this\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#warp-starttimescale-number-endtimescale-number-durationinseconds-number-this\\"><span>.warp ( startTimeScale : Number, endTimeScale : Number, durationInSeconds : Number ) : this</span></a></h3>\\n<p>在传入的事件间隔内，通过逐渐将时间比例timeScale由startTimeScale修改至endTimeScale来改变回放速度。该方法可被链式调用。</p>\\n<h2 id=\\"事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件\\"><span>事件</span></a></h2>\\n<p>有两个事件分别表示了单次循环的结束和全部动作的结束，你可以这样对它们做出响应:</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre v-pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">mixer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">addEventListener</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">( </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'loop'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">( </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">e</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ) { …} );</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">mixer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">addEventListener</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">( </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'finished'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">( </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">e</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ) { …} );</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></iframe>","autoDesc":true}`);export{u as comp,b as data};
