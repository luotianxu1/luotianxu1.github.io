import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,b as e}from"./app-DcxFpXjN.js";const l="/img/softExamination/145.jpg",o="/img/softExamination/146.jpg",s="/img/softExamination/147.jpg",g="/img/softExamination/148.jpg",h="/img/softExamination/149.jpg",r="/img/softExamination/150.jpg",p="/img/softExamination/151.jpg",c="/img/softExamination/152.jpg",d="/img/softExamination/153.jpg",m="/img/softExamination/154.jpg",f="/img/softExamination/155.jpg",u="/img/softExamination/156.jpg",x="/img/softExamination/157.jpg",b="/img/softExamination/158.jpg",E="/img/softExamination/159.jpg",_="/img/softExamination/160.jpg",j="/img/softExamination/161.jpg",y="/img/softExamination/162.jpg",C="/img/softExamination/163.jpg",v="/img/softExamination/164.jpg",z="/img/softExamination/165.jpg",k="/img/softExamination/166.jpg",B="/img/softExamination/167.jpg",P="/img/softExamination/168.jpg",A="/img/softExamination/169.jpg",T="/img/softExamination/170.jpg",S={};function F(N,i){return t(),n("div",null,i[0]||(i[0]=[e('<h2 id="计算机系统概述" tabindex="-1"><a class="header-anchor" href="#计算机系统概述"><span>计算机系统概述</span></a></h2><figure><img src="'+l+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="计算机组成结构" tabindex="-1"><a class="header-anchor" href="#计算机组成结构"><span>计算机组成结构</span></a></h2><figure><img src="'+o+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="存储系统" tabindex="-1"><a class="header-anchor" href="#存储系统"><span>存储系统</span></a></h2><h3 id="层次化存储结构" tabindex="-1"><a class="header-anchor" href="#层次化存储结构"><span>层次化存储结构</span></a></h3><figure><img src="'+s+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>Cache</span></a></h3><ul><li>Cache的功能：提高CPU数据输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储系统间数据传送带宽限制</li><li>在计算机的存储系统体系中，Cache是访问速度最快的层次</li><li>Cache对程序员来说是透明的</li><li>使用Cache改善系统性能的依据是程序的局部性原理 <ul><li>时间局部性：指程序中的某条指令一旦执行，不久以后该指令可能再次执行，典型原因是由于程序中存在着大量的循环操作</li><li>空间局部性：指一旦程序访问了某个存储单元，不久以后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址可能集中在一定范围内，其典型情况是程序顺序执行</li><li>工作集理论：工作集是进程运行时被频繁访问的页面集合</li></ul></li></ul><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="磁盘基本结构与存取过程" tabindex="-1"><a class="header-anchor" href="#磁盘基本结构与存取过程"><span>磁盘基本结构与存取过程</span></a></h3><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>存取时间 = 寻道时间 + 等待时间，寻道时间是指磁头移动到磁道所需的时间；等待时间为等待读写的扇区转到磁头下方所用的时间</p><p>读取磁盘数据的时间应包括以下三个部分</p><ol><li>找磁道的时间</li><li>找块（扇区）的时间、即旋转延迟时间</li><li>传输时间</li></ol><h3 id="磁盘移臂调度算法" tabindex="-1"><a class="header-anchor" href="#磁盘移臂调度算法"><span>磁盘移臂调度算法</span></a></h3><h4 id="先来先服务-fcfs" tabindex="-1"><a class="header-anchor" href="#先来先服务-fcfs"><span>先来先服务（FCFS）</span></a></h4><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="最短寻道时间优先-sstf" tabindex="-1"><a class="header-anchor" href="#最短寻道时间优先-sstf"><span>最短寻道时间优先（SSTF）</span></a></h4><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="扫描算法-scan" tabindex="-1"><a class="header-anchor" href="#扫描算法-scan"><span>扫描算法（SCAN）</span></a></h4><h4 id="循环扫描算法-scsan" tabindex="-1"><a class="header-anchor" href="#循环扫描算法-scsan"><span>循环扫描算法（SCSAN）</span></a></h4><h2 id="操作系统" tabindex="-1"><a class="header-anchor" href="#操作系统"><span>操作系统</span></a></h2><p><img src="'+c+'" alt=" " loading="lazy"><img src="'+d+'" alt=" " loading="lazy"></p><h2 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理"><span>进程管理</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。它由程序块、进程控制块（PCB）和数据块三部分组成</p><p>PCB:是进程存在的唯一标志。内容包含进程标识符、状态、位置信息、控制信息、队列指针（链接同一状态的进程）、优先级、现场保护区等</p><h4 id="进程与程序" tabindex="-1"><a class="header-anchor" href="#进程与程序"><span>进程与程序</span></a></h4><p>进程与程序的区别：进程是程序的一次执行过程，没有程序就没有进程</p><p>程序是一个静态的概念，而进程是一个动态的概念，它由创建而产生，完成任务后因撤销而消亡；进程是系统进行资源分配和调度的独立单位，而程序不是</p><h4 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h4><p>进程的2个基本属性：可拥有资源的独立单位；可独立调度和分配资源的基本单位</p><figure><img src="'+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="同步与互斥" tabindex="-1"><a class="header-anchor" href="#同步与互斥"><span>同步与互斥</span></a></h3><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>临界资源：进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等</li><li>临界区：每个进程中访问临界资源的那段代码成为临界区</li><li>信号量：是一种特殊的变量</li></ul><h3 id="前趋图" tabindex="-1"><a class="header-anchor" href="#前趋图"><span>前趋图</span></a></h3><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h3><p>进程管理是操作系统的核心，但如果设计不当，就会出现死锁问题。如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁</p><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="银行家算法" tabindex="-1"><a class="header-anchor" href="#银行家算法"><span>银行家算法</span></a></h4><h5 id="分配资源的原则" tabindex="-1"><a class="header-anchor" href="#分配资源的原则"><span>分配资源的原则</span></a></h5><ul><li>当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程</li><li>进程可以分期请求资源，但请求的总数不能超过最大需求量</li><li>当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源</li></ul><h2 id="存储管理" tabindex="-1"><a class="header-anchor" href="#存储管理"><span>存储管理</span></a></h2><h3 id="页式存储" tabindex="-1"><a class="header-anchor" href="#页式存储"><span>页式存储</span></a></h3><p>将程序与内存均划分为同样大小的块，以页为单位将程序调入内存</p><figure><img src="'+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>优点：利用率高，碎片小，分配及管理简单</li><li>缺点：增加了系统开销；可能产生抖动现象</li></ul><h3 id="段式存储" tabindex="-1"><a class="header-anchor" href="#段式存储"><span>段式存储</span></a></h3><p>按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样</p><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>优点：多道程序共享内存，各段程序修改互不影响</li><li>缺点：内存利用率低，内存碎片浪费大</li></ul><h3 id="段页式存储" tabindex="-1"><a class="header-anchor" href="#段页式存储"><span>段页式存储</span></a></h3><p>段式与页式的综合体。先分段，再分页。1个程序由若干个段，每个段中可以由若干页，每个页的大小相同，但每个段的大小不同</p><figure><img src="'+j+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>优点：空间浪费小、存储共享容易、存储保护容易、能动态连接</li><li>缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降</li></ul><h2 id="文件管理" tabindex="-1"><a class="header-anchor" href="#文件管理"><span>文件管理</span></a></h2><h3 id="索引文件结构" tabindex="-1"><a class="header-anchor" href="#索引文件结构"><span>索引文件结构</span></a></h3><figure><img src="'+y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="位视图" tabindex="-1"><a class="header-anchor" href="#位视图"><span>位视图</span></a></h3><figure><img src="'+C+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h2><h3 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标"><span>性能指标</span></a></h3><p><img src="'+v+'" alt=" " loading="lazy"><img src="'+z+'" alt=" " loading="lazy"><img src="'+k+'" alt=" " loading="lazy"><img src="'+B+'" alt=" " loading="lazy"></p><h3 id="性能调整" tabindex="-1"><a class="header-anchor" href="#性能调整"><span>性能调整</span></a></h3><figure><img src="'+P+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="阿姆达尔解决方案" tabindex="-1"><a class="header-anchor" href="#阿姆达尔解决方案"><span>阿姆达尔解决方案</span></a></h3><figure><img src="'+A+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="性能评价方法" tabindex="-1"><a class="header-anchor" href="#性能评价方法"><span>性能评价方法</span></a></h3><ul><li>时钟频率法：以时钟频率高低衡量速度</li><li>指令执行速度法：以机器运算速度的单位是MIPS</li><li>等效指令速度法：通过各指令在程序中所占比例进行计算得到的</li><li>数据处理速率法：PDR值的方法来衡量机器性能，PDR值越大，机器性能越好</li><li>综合理论性能法：CTP用MTOPS表示。CTP的估算方法是，首先算出处理部件每个计算单元的有效计算率，再按不同字长加以调整，得出计算单元的理论性能，所有组成该处理部件的计算单元的理论性能之和即为CTP</li><li>基准程序法：把应用程序中用得最多，最频繁的部分核心程序作为评估计算机系统性能的标准程序，称为基准测试程序。基准程序法是目前一致承认的测试系统性能的较好方法</li></ul><figure><img src="'+T+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="性能评估" tabindex="-1"><a class="header-anchor" href="#性能评估"><span>性能评估</span></a></h3><ul><li>在Web服务器测试中，反映其性能的指标主要有：最大并发连接数、响应延迟和吞吐量等</li><li>常见的Web服务器性能评测方式有基准性能测试、压力测试和可靠性测试</li></ul><h3 id="系统监视" tabindex="-1"><a class="header-anchor" href="#系统监视"><span>系统监视</span></a></h3><p>进行系统监视通常有3种方式：一是通过系统本身提供的命令，如UNIX/Linux系统中的W、ps、last，Windows中的netstat等；二是通过系统记录文件查阅系统在特定时间内的运行状态；三是集成命令、文件记录和可视化技术的监控工具，如Windows的Perfmon应用程序</p>',79)]))}const Z=a(S,[["render",F],["__file","08.计算机系统基础.html.vue"]]),W=JSON.parse('{"path":"/study/%E8%BD%AF%E8%80%83/08.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html","title":"计算机系统基础","lang":"zh-CN","frontmatter":{"title":"计算机系统基础","icon":"sheji","order":8,"date":"2024-07-09T00:00:00.000Z","category":["软考"],"tag":["软考"],"description":"计算机系统概述 计算机组成结构 存储系统 层次化存储结构 Cache Cache的功能：提高CPU数据输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储系统间数据传送带宽限制 在计算机的存储系统体系中，Cache是访问速度最快的层次 Cache对程序员来说是透明的 使用Cache改善系统性能的依据是程序的局部性原理 时间局部性：指程序中的某条指令一旦执行...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/%E8%BD%AF%E8%80%83/08.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:title","content":"计算机系统基础"}],["meta",{"property":"og:description","content":"计算机系统概述 计算机组成结构 存储系统 层次化存储结构 Cache Cache的功能：提高CPU数据输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储系统间数据传送带宽限制 在计算机的存储系统体系中，Cache是访问速度最快的层次 Cache对程序员来说是透明的 使用Cache改善系统性能的依据是程序的局部性原理 时间局部性：指程序中的某条指令一旦执行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/softExamination/145.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"软考"}],["meta",{"property":"article:published_time","content":"2024-07-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机系统基础\\",\\"image\\":[\\"https://luotianxu1.github.io/img/softExamination/145.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/146.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/147.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/148.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/149.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/150.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/151.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/152.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/153.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/154.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/155.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/156.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/157.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/158.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/159.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/160.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/161.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/162.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/163.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/164.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/165.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/166.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/167.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/168.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/169.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/170.jpg\\"],\\"datePublished\\":\\"2024-07-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"计算机系统概述","slug":"计算机系统概述","link":"#计算机系统概述","children":[]},{"level":2,"title":"计算机组成结构","slug":"计算机组成结构","link":"#计算机组成结构","children":[]},{"level":2,"title":"存储系统","slug":"存储系统","link":"#存储系统","children":[{"level":3,"title":"层次化存储结构","slug":"层次化存储结构","link":"#层次化存储结构","children":[]},{"level":3,"title":"Cache","slug":"cache","link":"#cache","children":[]},{"level":3,"title":"磁盘基本结构与存取过程","slug":"磁盘基本结构与存取过程","link":"#磁盘基本结构与存取过程","children":[]},{"level":3,"title":"磁盘移臂调度算法","slug":"磁盘移臂调度算法","link":"#磁盘移臂调度算法","children":[]}]},{"level":2,"title":"操作系统","slug":"操作系统","link":"#操作系统","children":[]},{"level":2,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":3,"title":"同步与互斥","slug":"同步与互斥","link":"#同步与互斥","children":[]},{"level":3,"title":"前趋图","slug":"前趋图","link":"#前趋图","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]}]},{"level":2,"title":"存储管理","slug":"存储管理","link":"#存储管理","children":[{"level":3,"title":"页式存储","slug":"页式存储","link":"#页式存储","children":[]},{"level":3,"title":"段式存储","slug":"段式存储","link":"#段式存储","children":[]},{"level":3,"title":"段页式存储","slug":"段页式存储","link":"#段页式存储","children":[]}]},{"level":2,"title":"文件管理","slug":"文件管理","link":"#文件管理","children":[{"level":3,"title":"索引文件结构","slug":"索引文件结构","link":"#索引文件结构","children":[]},{"level":3,"title":"位视图","slug":"位视图","link":"#位视图","children":[]}]},{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[{"level":3,"title":"性能指标","slug":"性能指标","link":"#性能指标","children":[]},{"level":3,"title":"性能调整","slug":"性能调整","link":"#性能调整","children":[]},{"level":3,"title":"阿姆达尔解决方案","slug":"阿姆达尔解决方案","link":"#阿姆达尔解决方案","children":[]},{"level":3,"title":"性能评价方法","slug":"性能评价方法","link":"#性能评价方法","children":[]},{"level":3,"title":"性能评估","slug":"性能评估","link":"#性能评估","children":[]},{"level":3,"title":"系统监视","slug":"系统监视","link":"#系统监视","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":5.69,"words":1707},"filePathRelative":"study/软考/08.计算机系统基础.md","localizedDate":"2024年7月9日","excerpt":"<h2>计算机系统概述</h2>\\n<figure><img src=\\"/img/softExamination/145.jpg\\" alt=\\" \\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption> </figcaption></figure>\\n<h2>计算机组成结构</h2>\\n<figure><img src=\\"/img/softExamination/146.jpg\\" alt=\\" \\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption> </figcaption></figure>\\n<h2>存储系统</h2>\\n<h3>层次化存储结构</h3>","autoDesc":true}');export{Z as comp,W as data};
