import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as t,c as l,a as s,d as h,b as r}from"./app-yfkt0gmh.js";const k={};function p(d,i){const a=n("IFrame");return t(),l("div",null,[i[0]||(i[0]=s("h2",{id:"光线投射-raycaster",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#光线投射-raycaster"},[s("span",null,"光线投射 Raycaster")])],-1)),i[1]||(i[1]=s("p",null,"这个类用于进行 raycasting（光线投射）。 光线投射用于进行鼠标拾取（在三维空间中计算出鼠标移过了什么物体）。",-1)),h(a,{url:"https://luotainxu-demo.netlify.app/#/threejs/base/raycaster"}),i[2]||(i[2]=r(`<h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> raycaster</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> THREE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Raycaster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> pointer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> THREE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Vector2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onPointerMove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 将鼠标位置归一化为设备坐标。x 和 y 方向的取值范围是 (-1 to +1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    pointer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clientX</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    pointer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clientY</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 通过摄像机和鼠标位置更新射线</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    raycaster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setFromCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pointer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">camera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 计算物体和射线的焦点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> intersects</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> raycaster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intersectObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">scene</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> intersects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        intersects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">material</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0xff0000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    renderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scene</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">camera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;pointermove&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">onPointerMove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requestAnimationFrame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><h2 id="origin-vector3" tabindex="-1"><a class="header-anchor" href="#origin-vector3"><span>origin : Vector3</span></a></h2><p>origin —— 光线投射的原点向量。</p><h2 id="direction-vector3" tabindex="-1"><a class="header-anchor" href="#direction-vector3"><span>direction : Vector3</span></a></h2><p>direction —— 向射线提供方向的方向向量，应当被标准化。</p><h2 id="near-float" tabindex="-1"><a class="header-anchor" href="#near-float"><span>near : Float</span></a></h2><p>near —— 返回的所有结果比 near 远。near 不能为负值，其默认值为 0。</p><h2 id="far-float" tabindex="-1"><a class="header-anchor" href="#far-float"><span>far : Float</span></a></h2><p>far —— 返回的所有结果都比 far 近。far 不能小于 near，其默认值为 Infinity（正无穷。）</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><h3 id="far-float-1" tabindex="-1"><a class="header-anchor" href="#far-float-1"><span>.far : Float</span></a></h3><p>raycaster 的远距离因数（投射远点）。这个值表明哪些对象可以基于该距离而被 raycaster 所丢弃。 这个值不应当为负，并且应当比 near 属性大。</p><h3 id="near-float-1" tabindex="-1"><a class="header-anchor" href="#near-float-1"><span>.near : Float</span></a></h3><p>raycaster 的近距离因数（投射近点）。这个值表明哪些对象可以基于该距离而被 raycaster 所丢弃。 这个值不应当为负，并且应当比 far 属性小。</p><h3 id="camera-camera" tabindex="-1"><a class="header-anchor" href="#camera-camera"><span>.camera : Camera</span></a></h3><p>当光线投射到依赖于视图的对象时，如精灵。该字段可以手动设置，也可以在调用“setfromamera”时设置。默认为空。</p><h3 id="layers-layers" tabindex="-1"><a class="header-anchor" href="#layers-layers"><span>.layers : Layers</span></a></h3><p>Used by Raycaster to selectively ignore 3D objects when performing intersection tests. The following code example ensures that only 3D objects on layer 1 will be honored by the instance of Raycaster.</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">raycaster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">layers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">layers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">enable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="params-object" tabindex="-1"><a class="header-anchor" href="#params-object"><span>.params : Object</span></a></h3><p>具有以下属性的对象：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Mesh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">threshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> LOD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Points</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">threshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Sprite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ray-ray" tabindex="-1"><a class="header-anchor" href="#ray-ray"><span>.ray : Ray</span></a></h3><p>用于进行光线投射的Ray（射线）。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="set-origin-vector3-direction-vector3-undefined" tabindex="-1"><a class="header-anchor" href="#set-origin-vector3-direction-vector3-undefined"><span>.set ( origin : Vector3, direction : Vector3 ) : undefined</span></a></h3><p>origin —— 光线投射的原点向量。 direction —— 为光线提供方向的标准化方向向量。</p><p>使用一个新的原点和方向来更新射线。</p><h3 id="setfromcamera-coords-vector2-camera-camera-undefined" tabindex="-1"><a class="header-anchor" href="#setfromcamera-coords-vector2-camera-camera-undefined"><span>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</span></a></h3><p>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</p><p>camera —— 射线所来源的摄像机。</p><p>使用一个新的原点和方向来更新射线。</p><h3 id="intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array" tabindex="-1"><a class="header-anchor" href="#intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array"><span>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</span></a></h3><p>object —— 检查与射线相交的物体。</p><p>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</p><p>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</p><p>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。</p><p>该方法返回一个包含有交叉部分的数组:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[ { distance, point, face, faceIndex, object }, ... ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>distance —— 射线投射原点和相交部分之间的距离。</li><li>point —— 相交部分的点（世界坐标）</li><li>face —— 相交的面</li><li>faceIndex —— 相交的面的索引</li><li>object —— 相交的物体</li><li>uv —— 相交部分的点的UV坐标。</li><li>uv2 —— Second set of U,V coordinates at point of intersection</li><li>instanceId – The index number of the instance where the ray intersects the InstancedMesh</li></ul><p>当计算这条射线是否和物体相交的时候，Raycaster将传入的对象委托给raycast方法。 这将可以让mesh对于光线投射的响应不同于lines和pointclouds。</p><p>请注意：对于网格来说，面必须朝向射线的原点，以便其能够被检测到。 用于交互的射线穿过面的背侧时，将不会被检测到。如果需要对物体中面的两侧进行光线投射， 你需要将material中的side属性设置为THREE.DoubleSide。</p><h3 id="intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array" tabindex="-1"><a class="header-anchor" href="#intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array"><span>.intersectObjects ( objects : Array, recursive : Boolean, optionalTarget : Array ) : Array</span></a></h3><p>objects —— 检测和射线相交的一组物体。</p><p>recursive —— 若为true，则同时也会检测所有物体的后代。否则将只会检测对象本身的相交部分。默认值为true。</p><p>optionalTarget —— （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</p><p>检测所有在射线与这些物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个），相交部分和.intersectObject所返回的格式是相同的。</p>`,49))])}const y=e(k,[["render",p],["__file","光线投射.html.vue"]]),B=JSON.parse(`{"path":"/threejs/%E5%9F%BA%E7%A1%80/%E5%85%89%E7%BA%BF%E6%8A%95%E5%B0%84.html","title":"光线投射Raycaster","lang":"zh-CN","frontmatter":{"title":"光线投射Raycaster","icon":"markdown","order":3,"date":"2023-03-15T00:00:00.000Z","category":["threejs"],"tag":["射线检测"],"description":"光线投射 Raycaster 这个类用于进行 raycasting（光线投射）。 光线投射用于进行鼠标拾取（在三维空间中计算出鼠标移过了什么物体）。","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/threejs/%E5%9F%BA%E7%A1%80/%E5%85%89%E7%BA%BF%E6%8A%95%E5%B0%84.html"}],["meta",{"property":"og:title","content":"光线投射Raycaster"}],["meta",{"property":"og:description","content":"光线投射 Raycaster 这个类用于进行 raycasting（光线投射）。 光线投射用于进行鼠标拾取（在三维空间中计算出鼠标移过了什么物体）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"射线检测"}],["meta",{"property":"article:published_time","content":"2023-03-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"光线投射Raycaster\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"光线投射 Raycaster","slug":"光线投射-raycaster","link":"#光线投射-raycaster","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"origin : Vector3","slug":"origin-vector3","link":"#origin-vector3","children":[]},{"level":2,"title":"direction : Vector3","slug":"direction-vector3","link":"#direction-vector3","children":[]},{"level":2,"title":"near : Float","slug":"near-float","link":"#near-float","children":[]},{"level":2,"title":"far : Float","slug":"far-float","link":"#far-float","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":".far : Float","slug":"far-float-1","link":"#far-float-1","children":[]},{"level":3,"title":".near : Float","slug":"near-float-1","link":"#near-float-1","children":[]},{"level":3,"title":".camera : Camera","slug":"camera-camera","link":"#camera-camera","children":[]},{"level":3,"title":".layers : Layers","slug":"layers-layers","link":"#layers-layers","children":[]},{"level":3,"title":".params : Object","slug":"params-object","link":"#params-object","children":[]},{"level":3,"title":".ray : Ray","slug":"ray-ray","link":"#ray-ray","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":".set ( origin : Vector3, direction : Vector3 ) : undefined","slug":"set-origin-vector3-direction-vector3-undefined","link":"#set-origin-vector3-direction-vector3-undefined","children":[]},{"level":3,"title":".setFromCamera ( coords : Vector2, camera : Camera ) : undefined","slug":"setfromcamera-coords-vector2-camera-camera-undefined","link":"#setfromcamera-coords-vector2-camera-camera-undefined","children":[]},{"level":3,"title":".intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array","slug":"intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array","link":"#intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array","children":[]},{"level":3,"title":".intersectObjects ( objects : Array, recursive : Boolean, optionalTarget : Array ) : Array","slug":"intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array","link":"#intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":3.99,"words":1198},"filePathRelative":"threejs/基础/光线投射.md","localizedDate":"2023年3月15日","excerpt":"<h2>光线投射 Raycaster</h2>\\n<p>这个类用于进行 raycasting（光线投射）。 光线投射用于进行鼠标拾取（在三维空间中计算出鼠标移过了什么物体）。</p>\\n<iframe url=\\"https://luotainxu-demo.netlify.app/#/threejs/base/raycaster\\">\\n<h2 id=\\"代码示例\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#代码示例\\"><span>代码示例</span></a></h2>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre v-pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> raycaster</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> THREE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">Raycaster</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> pointer</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> THREE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">Vector2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> onPointerMove</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">event</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">    // 将鼠标位置归一化为设备坐标。x 和 y 方向的取值范围是 (-1 to +1)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">    pointer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">x</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">event</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">clientX</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> /</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> window</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">innerWidth</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> -</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">    pointer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">y</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> -</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">event</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">clientY</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> /</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> window</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">innerHeight</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> +</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> render</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">    // 通过摄像机和鼠标位置更新射线</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">    raycaster</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setFromCamera</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">pointer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">camera</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">    // 计算物体和射线的焦点</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> intersects</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> raycaster</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">intersectObjects</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">scene</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">children</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    for</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> &#x3C;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> intersects</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">length</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">++</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">        intersects</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">].</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">object</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">material</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">color</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0xff0000</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">    renderer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">render</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">scene</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">camera</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">window</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">addEventListener</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'pointermove'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">onPointerMove</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">window</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">requestAnimationFrame</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">render</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"构造函数\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#构造函数\\"><span>构造函数</span></a></h2>\\n<h2 id=\\"origin-vector3\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#origin-vector3\\"><span>origin : Vector3</span></a></h2>\\n<p>origin —— 光线投射的原点向量。</p>\\n<h2 id=\\"direction-vector3\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#direction-vector3\\"><span>direction : Vector3</span></a></h2>\\n<p>direction —— 向射线提供方向的方向向量，应当被标准化。</p>\\n<h2 id=\\"near-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#near-float\\"><span>near : Float</span></a></h2>\\n<p>near —— 返回的所有结果比 near 远。near 不能为负值，其默认值为 0。</p>\\n<h2 id=\\"far-float\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#far-float\\"><span>far : Float</span></a></h2>\\n<p>far —— 返回的所有结果都比 far 近。far 不能小于 near，其默认值为 Infinity（正无穷。）</p>\\n<h2 id=\\"属性\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#属性\\"><span>属性</span></a></h2>\\n<h3 id=\\"far-float-1\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#far-float-1\\"><span>.far : Float</span></a></h3>\\n<p>raycaster 的远距离因数（投射远点）。这个值表明哪些对象可以基于该距离而被 raycaster 所丢弃。 这个值不应当为负，并且应当比 near 属性大。</p>\\n<h3 id=\\"near-float-1\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#near-float-1\\"><span>.near : Float</span></a></h3>\\n<p>raycaster 的近距离因数（投射近点）。这个值表明哪些对象可以基于该距离而被 raycaster 所丢弃。 这个值不应当为负，并且应当比 far 属性小。</p>\\n<h3 id=\\"camera-camera\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#camera-camera\\"><span>.camera : Camera</span></a></h3>\\n<p>当光线投射到依赖于视图的对象时，如精灵。该字段可以手动设置，也可以在调用“setfromamera”时设置。默认为空。</p>\\n<h3 id=\\"layers-layers\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#layers-layers\\"><span>.layers : Layers</span></a></h3>\\n<p>Used by Raycaster to selectively ignore 3D objects when performing intersection tests. The following code example ensures that only 3D objects on layer 1 will be honored by the instance of Raycaster.</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre v-pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">raycaster</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">layers</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">object</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">layers</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">enable</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h3 id=\\"params-object\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#params-object\\"><span>.params : Object</span></a></h3>\\n<p>具有以下属性的对象：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre v-pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Mesh</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: {},</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Line</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: { </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">threshold</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> LOD</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: {},</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Points</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: { </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">threshold</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Sprite</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: {}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h3 id=\\"ray-ray\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#ray-ray\\"><span>.ray : Ray</span></a></h3>\\n<p>用于进行光线投射的Ray（射线）。</p>\\n<h2 id=\\"方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#方法\\"><span>方法</span></a></h2>\\n<h3 id=\\"set-origin-vector3-direction-vector3-undefined\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#set-origin-vector3-direction-vector3-undefined\\"><span>.set ( origin : Vector3, direction : Vector3 ) : undefined</span></a></h3>\\n<p>origin —— 光线投射的原点向量。\\ndirection —— 为光线提供方向的标准化方向向量。</p>\\n<p>使用一个新的原点和方向来更新射线。</p>\\n<h3 id=\\"setfromcamera-coords-vector2-camera-camera-undefined\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#setfromcamera-coords-vector2-camera-camera-undefined\\"><span>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</span></a></h3>\\n<p>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</p>\\n<p>camera —— 射线所来源的摄像机。</p>\\n<p>使用一个新的原点和方向来更新射线。</p>\\n<h3 id=\\"intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#intersectobject-object-object3d-recursive-boolean-optionaltarget-array-array\\"><span>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</span></a></h3>\\n<p>object —— 检查与射线相交的物体。</p>\\n<p>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</p>\\n<p>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</p>\\n<p>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。</p>\\n<p>该方法返回一个包含有交叉部分的数组:</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" data-title=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre v-pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>[ { distance, point, face, faceIndex, object }, ... ]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><ul>\\n<li>distance —— 射线投射原点和相交部分之间的距离。</li>\\n<li>point —— 相交部分的点（世界坐标）</li>\\n<li>face —— 相交的面</li>\\n<li>faceIndex —— 相交的面的索引</li>\\n<li>object —— 相交的物体</li>\\n<li>uv —— 相交部分的点的UV坐标。</li>\\n<li>uv2 —— Second set of U,V coordinates at point of intersection</li>\\n<li>instanceId – The index number of the instance where the ray intersects the InstancedMesh</li>\\n</ul>\\n<p>当计算这条射线是否和物体相交的时候，Raycaster将传入的对象委托给raycast方法。 这将可以让mesh对于光线投射的响应不同于lines和pointclouds。</p>\\n<p>请注意：对于网格来说，面必须朝向射线的原点，以便其能够被检测到。 用于交互的射线穿过面的背侧时，将不会被检测到。如果需要对物体中面的两侧进行光线投射， 你需要将material中的side属性设置为THREE.DoubleSide。</p>\\n<h3 id=\\"intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#intersectobjects-objects-array-recursive-boolean-optionaltarget-array-array\\"><span>.intersectObjects ( objects : Array, recursive : Boolean, optionalTarget : Array ) : Array</span></a></h3>\\n<p>objects —— 检测和射线相交的一组物体。</p>\\n<p>recursive —— 若为true，则同时也会检测所有物体的后代。否则将只会检测对象本身的相交部分。默认值为true。</p>\\n<p>optionalTarget —— （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</p>\\n<p>检测所有在射线与这些物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个），相交部分和.intersectObject所返回的格式是相同的。</p>\\n</iframe>","autoDesc":true}`);export{y as comp,B as data};
