import{_ as s}from"./file8-B0mw79I_.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,b as t}from"./app-C2aR6FVm.js";const n="/img/study/javascript/chrome.jpg",p="/img/study/javascript/eventLoop2.jpg",h="/img/study/javascript/eventLoop3.jpg",r="/img/study/javascript/eventLoop4.gif",k="/img/study/javascript/eventLoop5.jpg",d="/img/study/javascript/eventLoop6.jpg",o="/img/study/javascript/eventLoop7.jpg",c={};function g(m,i){return e(),l("div",null,i[0]||(i[0]=[t('<h2 id="_1-异步执行原理" tabindex="-1"><a class="header-anchor" href="#_1-异步执行原理"><span>1. 异步执行原理</span></a></h2><h3 id="_1-单线程的javascript" tabindex="-1"><a class="header-anchor" href="#_1-单线程的javascript"><span>（1）单线程的JavaScript</span></a></h3><p>我们知道，JavaScript是一种单线程语言，它主要用来与用户互动，以及操作DOM。</p><p>JavaScript 有同步和异步的概念，这就解决了代码阻塞的问题：</p><ul><li>同步：如果在一个函数返回的时候，调用者就能够得到预期结果，那么这个函数就是同步的；</li><li>异步：如果在函数返回的时候，调用者还不能够得到预期结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的。</li></ul><p>那单线程有什么好处呢？</p><ul><li>在 JS 运行的时候可能会阻止 UI 渲染，这说明了两个线程是互斥的。这是因为 JS 可以修改 DOM，如果在 JS 执行的时候 UI 线程还在工作，就可能导致不能安全的渲染 UI。</li><li>得益于 JS 是单线程运行的，可以达到节省内存，节约上下文切换时间的好处。</li></ul><h3 id="_2-多线程的浏览器" tabindex="-1"><a class="header-anchor" href="#_2-多线程的浏览器"><span>（2）多线程的浏览器</span></a></h3><p>JS 是单线程的，在同一个时间只能做一件事情，那为什么浏览器可以同时执行异步任务呢？</p><p>这是因为浏览器是多线程的，当 JS 需要执行异步任务时，浏览器会另外启动一个线程去执行该任务。也就是说，JavaScript是单线程的指的是执行JavaScript代码的线程只有一个，是浏览器提供的JavaScript引擎线程（主线程）。除此之外，浏览器中还有定时器线程、 HTTP 请求线程等线程，这些线程主要不是来执行 JS 代码的。</p><p>比如主线程中需要发送数据请求，就会把这个任务交给异步 HTTP 请求线程去执行，等请求数据返回之后，再将 callback 里需要执行的 JS 回调交给 JS 引擎线程去执行。也就是说，浏览器才是真正执行发送请求这个任务的角色，而 JS 只是负责执行最后的回调处理。所以这里的异步不是 JS 自身实现的，而是浏览器为其提供的能力。</p><p>下图是Chrome浏览器的架构图：</p><figure><img src="'+n+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，Chrome不仅拥有多个进程，还有多个线程。以渲染进程为例，就包含GUI渲染线程、JS引擎线程、事件触发线程、定时器触发线程、异步HTTP请求线程。这些线程为 JS 在浏览器中完成异步任务提供了基础。</p><h2 id="_2-浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#_2-浏览器的事件循环"><span>2. 浏览器的事件循环</span></a></h2><p>JavaScript的任务分为两种同步和异步：</p><ul><li>同步任务：在主线程上排队执行的任务，只有一个任务执行完毕，才能执行下一个任务，</li><li>异步任务：不进入主线程，而是放在任务队列中，若有多个异步任务则需要在任务队列中排队等待，任务队列类似于缓冲区，任务下一步会被移到执行栈然后主线程执行调用栈的任务。</li></ul><p>上面提到了任务队列和执行栈，下面就先来看看这两个概念。</p><h3 id="_1-执行栈与任务队列" tabindex="-1"><a class="header-anchor" href="#_1-执行栈与任务队列"><span>（1）执行栈与任务队列</span></a></h3><h4 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈"><span>执行栈</span></a></h4><p>执行栈：从名字可以看出，执行栈使用到的是数据结构中的栈结构， 它是一个存储函数调用的栈结构，遵循先进后出的原则。它主要负责跟踪所有要执行的代码。每当一个函数执行完成时，就会从堆栈中弹出（pop）该执行完成函数；如果有代码需要进去执行的话，就进行 push 操作。</p><p>当执行这段代码时，首先会执行一个 main 函数，然后执行我们的代码。根据先进后出的原则，后执行的函数会先弹出栈，在图中也可以发现，foo 函数后执行，当执行完毕后就从栈中弹出了。</p><p>JavaScript在按顺序执行执行栈中的方法时，每次执行一个方法，都会为它生成独有的执行环境（上下文)，当这个方法执行完成后，就会销毁当前的执行环境，并从栈中弹出此方法，然后继续执行下一个方法。</p><h4 id="任务队列" tabindex="-1"><a class="header-anchor" href="#任务队列"><span>任务队列</span></a></h4><p>任务队列：从名字中可以看出，任务队列使用到的是数据结构中的队列结构，它用来保存异步任务，遵循先进先出的原则。它主要负责将新的任务发送到队列中进行处理。</p><p>JavaScript在执行代码时，会将同步的代码按照顺序排在执行栈中，然后依次执行里面的函数。当遇到异步任务时，就将其放入任务队列中，等待当前执行栈所有同步代码执行完成之后，就会从异步任务队列中取出已完成的异步任务的回调并将其放入执行栈中继续执行，如此循环往复，直到执行完所有任务。</p><p>JavaScript任务的执行顺序如下：</p><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在事件驱动的模式下，至少包含了一个执行循环来检测任务队列中是否有新任务。通过不断循环，去取出异步任务的回调来执行，这个过程就是事件循环，每一次循环就是一个事件周期。</p><h3 id="_2-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_2-宏任务和微任务"><span>（2）宏任务和微任务</span></a></h3><p>任务队列其实不止一种，根据任务种类的不同，可以分为微任务（micro task）队列和宏任务（macro task）队列。常见的任务如下：</p><ul><li>宏任务： script( 整体代码)、setTimeout、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</li><li>微任务： Promise、MutaionObserver、process.nextTick(Node.js 环境)；</li></ul><p>任务队列执行顺序如下：</p><p><img src="'+h+`" alt=" " loading="lazy"> 可以看到，Eventloop 在处理宏任务和微任务的逻辑时的执行情况如下：</p><ol><li>JavaScript 引擎首先从宏任务队列中取出第一个任务；</li><li>执行完毕后，再将微任务中的所有任务取出，按照顺序分别全部执行（这里包括不仅指开始执行时队列里的微任务），如果在这一步过程中产生新的微任务，也需要执行，也就是说在执行微任务过程中产生的新的微任务并不会推迟到下一个循环中执行，而是在当前的循环中继续执行。</li><li>然后再从宏任务队列中取下一个，执行完毕后，再次将 microtask queue 中的全部取出，循环往复，直到两个 queue 中的任务都取完。</li></ol><p>也是就是说，一次 Eventloop 循环会处理一个宏任务和所有这次循环中产生的微任务。</p><p>下面来通过一个例子来体会事件循环：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;同步代码1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;setTimeout&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;同步代码2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;promise.then&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;同步代码3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码输出结果如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;同步代码1&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;同步代码2&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;同步代码3&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;promise.then&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;setTimeout&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那这段代码执行过程是怎么的呢？</p><ol><li>遇到第一个console，它是同步代码，加入执行栈，执行并出栈，打印出&quot;同步代码1&quot;；</li><li>遇到setTimeout，它是一个宏任务，加入宏任务队列；</li><li>遇到new Promise 中的console，它是同步代码，加入执行栈，执行并出栈，打印出&quot;同步代码2&quot;；</li><li>遇到Promise then，它是一个微任务，加入微任务队列；</li><li>遇到第三个console，它是同步代码，加入执行栈，执行并出栈，打印出&quot;同步代码3&quot;；</li><li>此时执行栈为空，去执行微任务队列中所有任务，打印出&quot;promise.then&quot;；</li><li>执行完微任务队列中的任务，就去执行宏任务队列中的一个任务，打印出&quot;setTimeout&quot;</li></ol><figure><img src="`+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的宏任务和微任务的工作流程中，可以得出以下结论：</p><ul><li>微任务和宏任务是绑定的，每个宏任务在执行时，会创建自己的微任务队列。</li><li>微任务的执行时长会影响当前宏任务的时长。比如一个宏任务在执行过程中，产生了 10 个微任务，执行每个微任务的时间是 10ms，那么执行这 10 个微任务的时间就是 100ms，也可以说这 10 个微任务让宏任务的执行时间延长了 100ms。</li><li>在一个宏任务中，分别创建一个用于回调的宏任务和微任务，无论什么情况下，微任务都早于宏任务执行（优先级更高）。</li></ul><p>那么问题来了，为什么要将任务队列分为微任务和宏任务呢，他们之间的本质区别是什么呢？</p><p>JavaScript在遇到异步任务时，会将此任务交给其他线程来执行（比如遇到setTimeout任务，会交给定时器触发线程去执行，待计时结束，就会将定时器回调任务放入任务队列等待主线程来取出执行），主线程会继续执行后面的同步任务。</p><p>对于微任务，比如promise.then，当执行promise.then时，浏览器引擎不会将异步任务交给其他浏览器的线程去执行，而是将任务回调存在一个队列中，当执行栈中的任务执行完之后，就去执行promise.then所在的微任务队列。</p><p>所以，宏任务和微任务的本质区别如下：</p><ul><li>微任务：不需要特定的异步线程去执行，没有明确的异步任务去执行，只有回调；</li><li>宏任务：需要特定的异步线程去执行，有明确的异步任务去执行，有回调；</li></ul><p>事件队列为空时渲染dom</p><h2 id="_3-node-js的事件循环" tabindex="-1"><a class="header-anchor" href="#_3-node-js的事件循环"><span>3. Node.js的事件循环</span></a></h2><h3 id="_1-事件循环的概念" tabindex="-1"><a class="header-anchor" href="#_1-事件循环的概念"><span>（1）事件循环的概念</span></a></h3><p>JavaScript和Node.js是基于V8 引擎的，浏览器中包含的异步方式在 NodeJS 中也是一样的。除此之外，Node.js中还有一些其他的异步形式：</p><ul><li>文件 I/O：异步加载本地文件。</li><li>setImmediate()：与 setTimeout 设置 0ms 类似，在某些同步任务完成后立马执行。</li><li>process.nextTick()：在某些同步任务完成后立马执行。</li><li>server.close、socket.on(&#39;close&#39;,...）等：关闭回调。</li></ul><p>这些异步任务的执行就需要依靠Node.js的事件循环机制了。</p><p>Node.js 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js使用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现的，如下图所示：</p><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据上图，可以看到Node.js的运行机制如下:</p><ol><li>V8引擎负责解析JavaScript脚本；</li><li>解析后的代码，调用Node API；</li><li>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎；</li><li>V8引擎将结果返回给用户；</li></ol><h3 id="_2-事件循环的流程" tabindex="-1"><a class="header-anchor" href="#_2-事件循环的流程"><span>（2）事件循环的流程</span></a></h3><p>其中libuv引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。下面 是Eventloop 事件循环的流程：</p><figure><img src="'+d+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>整个流程分为六个阶段，当这六个阶段执行完一次之后，才可以算得上执行了一次 Eventloop 的循环过程。下面来看下这六个阶段都做了哪些事：</p><ol><li>timers 阶段：执行timer（setTimeout、setInterval）的回调，由 poll 阶段控制；</li><li>I/O callbacks 阶段：主要执行系统级别的回调函数，比如 TCP 连接失败的回调；</li><li>idle, prepare 阶段：仅Node.js内部使用，可以忽略；</li><li>poll 阶段：轮询等待新的链接和请求等事件，执行 I/O 回调等；</li><li>check 阶段：执行 setImmediate() 的回调；</li><li>close callbacks 阶段：执行关闭请求的回调函数，比如socket.on(&#39;close&#39;, ...)</li></ol><p>注意：上面每个阶段都会去执行完当前阶段的任务队列，然后继续执行当前阶段的微任务队列，只有当前阶段所有微任务都执行完了，才会进入下个阶段，这里也是与浏览器中逻辑差异较大的地方。</p><p>其中，这里面比较重要的就是第四阶段：poll，这一阶段中，系统主要做两件事：</p><ul><li>回到 timer 阶段执行回调</li><li>执行 I/O 回调</li></ul><p>在进入该阶段时如果没有设定了 timer 的话，会出现以下情况：</p><ul><li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；</li><li>如果 poll 队列为空时，会出现以下情况：</li><li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调；</li><li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去；</li></ul><p>当设定了 timer 且 poll 队列为空，则会判断是否有 timer 超时，如果有的就会回到 timer 阶段执行回调。</p><p>这一过程的具体执行流程如下图所示：</p><figure><img src="'+o+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_3-宏任务和微任务"><span>（3）宏任务和微任务</span></a></h3><p>Node.js事件循环的异步队列也分为两种：宏任务队列和微任务队列。</p><ul><li>常见的宏任务：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作等。</li><li>常见的微任务：process.nextTick、new Promise().then(回调)等。</li></ul><h3 id="_4-process-nexttick" tabindex="-1"><a class="header-anchor" href="#_4-process-nexttick"><span>（4）process.nextTick()</span></a></h3><p>上面提到了process.nextTick()，它是node中新引入的一个任务队列，它会在上述各个阶段结束时，在进入下一个阶段之前立即执行。</p><p>例如下面的代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;timeout&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;promise&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextTick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;nextTick&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nextTick</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">promise</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">timeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，process.nextTick()是优先于promise的回调执行。</p><h3 id="_5-setimmediate-和-settimeout" tabindex="-1"><a class="header-anchor" href="#_5-setimmediate-和-settimeout"><span>（5）setImmediate 和 setTimeout</span></a></h3><p>上面还提到了setImmediate 和 setTimeout，这两者很相似，主要区别在于调用时机的不同：</p><ul><li>setImmediate：在poll阶段完成时执行，即check阶段；</li><li>setTimeout：在poll阶段为空闲时，且设定时间到达后执行，但它在timer阶段执行；</li></ul><p>例如下面的代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;timeout&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setImmediate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;setImmediate&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">timeout</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">setImmediate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码的执行过程中，第一轮循环后，分别将 setTimeout 和 setImmediate 加入了各自阶段的任务队列。第二轮循环首先进入timers 阶段，执行定时器队列回调，然后 pending callbacks和poll 阶段没有任务，因此进入check 阶段执行 setImmediate 回调。所以最后输出为timeout、setImmediate。</p><h2 id="_4-node与浏览器event-loop差异" tabindex="-1"><a class="header-anchor" href="#_4-node与浏览器event-loop差异"><span>4. Node与浏览器Event Loop差异</span></a></h2><p>Node.js与浏览器的 Event Loop 差异如下：</p><ul><li>Node.js：microtask 在事件循环的各个阶段之间执行；</li><li>浏览器：microtask 在事件循环的 macrotask 执行完之后执行；</li></ul><figure><img src="`+s+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Nodejs和浏览器的事件循环流程对比如下：</p><ol><li>执行全局的 Script 代码（与浏览器无差）；</li><li>把微任务队列清空：注意，Node 清空微任务队列的手法比较特别。在浏览器中，我们只有一个微任务队列需要接受处理；但在 Node 中，有两类微任务队列：next-tick 队列和其它队列。其中这个 next-tick 队列，专门用来收敛 process.nextTick 派发的异步任务。在清空队列时，优先清空 next-tick 队列中的任务，随后才会清空其它微任务；</li><li>开始执行 macro-task（宏任务）。注意，Node 执行宏任务的方式与浏览器不同：在浏览器中，我们每次出队并执行一个宏任务；而在 Node 中，我们每次会尝试清空当前阶段对应宏任务队列里的所有任务（除非达到了系统限制）；</li><li>步骤3开始，会进入 3 -&gt; 2 -&gt; 3 -&gt; 2…的循环。</li></ol>',97)]))}const B=a(c,[["render",g],["__file","事件循环.html.vue"]]),y=JSON.parse('{"path":"/study/Javascript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html","title":"事件循环","lang":"zh-CN","frontmatter":{"title":"事件循环","icon":"javascript","order":16,"date":"2023-03-01T00:00:00.000Z","category":["Javascript"],"tag":["事件循环"],"description":"1. 异步执行原理 （1）单线程的JavaScript 我们知道，JavaScript是一种单线程语言，它主要用来与用户互动，以及操作DOM。 JavaScript 有同步和异步的概念，这就解决了代码阻塞的问题： 同步：如果在一个函数返回的时候，调用者就能够得到预期结果，那么这个函数就是同步的； 异步：如果在函数返回的时候，调用者还不能够得到预期结果，...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/Javascript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html"}],["meta",{"property":"og:title","content":"事件循环"}],["meta",{"property":"og:description","content":"1. 异步执行原理 （1）单线程的JavaScript 我们知道，JavaScript是一种单线程语言，它主要用来与用户互动，以及操作DOM。 JavaScript 有同步和异步的概念，这就解决了代码阻塞的问题： 同步：如果在一个函数返回的时候，调用者就能够得到预期结果，那么这个函数就是同步的； 异步：如果在函数返回的时候，调用者还不能够得到预期结果，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/study/javascript/chrome.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"事件循环"}],["meta",{"property":"article:published_time","content":"2023-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件循环\\",\\"image\\":[\\"https://luotianxu1.github.io/img/study/javascript/chrome.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop2.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop3.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop4.gif\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop5.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop6.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/eventLoop7.jpg\\",\\"https://luotianxu1.github.io/img/study/javascript/file8.jpg\\"],\\"datePublished\\":\\"2023-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 异步执行原理","slug":"_1-异步执行原理","link":"#_1-异步执行原理","children":[{"level":3,"title":"（1）单线程的JavaScript","slug":"_1-单线程的javascript","link":"#_1-单线程的javascript","children":[]},{"level":3,"title":"（2）多线程的浏览器","slug":"_2-多线程的浏览器","link":"#_2-多线程的浏览器","children":[]}]},{"level":2,"title":"2. 浏览器的事件循环","slug":"_2-浏览器的事件循环","link":"#_2-浏览器的事件循环","children":[{"level":3,"title":"（1）执行栈与任务队列","slug":"_1-执行栈与任务队列","link":"#_1-执行栈与任务队列","children":[]},{"level":3,"title":"（2）宏任务和微任务","slug":"_2-宏任务和微任务","link":"#_2-宏任务和微任务","children":[]}]},{"level":2,"title":"3. Node.js的事件循环","slug":"_3-node-js的事件循环","link":"#_3-node-js的事件循环","children":[{"level":3,"title":"（1）事件循环的概念","slug":"_1-事件循环的概念","link":"#_1-事件循环的概念","children":[]},{"level":3,"title":"（2）事件循环的流程","slug":"_2-事件循环的流程","link":"#_2-事件循环的流程","children":[]},{"level":3,"title":"（3）宏任务和微任务","slug":"_3-宏任务和微任务","link":"#_3-宏任务和微任务","children":[]},{"level":3,"title":"（4）process.nextTick()","slug":"_4-process-nexttick","link":"#_4-process-nexttick","children":[]},{"level":3,"title":"（5）setImmediate 和 setTimeout","slug":"_5-setimmediate-和-settimeout","link":"#_5-setimmediate-和-settimeout","children":[]}]},{"level":2,"title":"4. Node与浏览器Event Loop差异","slug":"_4-node与浏览器event-loop差异","link":"#_4-node与浏览器event-loop差异","children":[]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":13.66,"words":4099},"filePathRelative":"study/Javascript/事件循环.md","localizedDate":"2023年3月1日","excerpt":"<h2>1. 异步执行原理</h2>\\n<h3>（1）单线程的JavaScript</h3>\\n<p>我们知道，JavaScript是一种单线程语言，它主要用来与用户互动，以及操作DOM。</p>\\n<p>JavaScript 有同步和异步的概念，这就解决了代码阻塞的问题：</p>\\n<ul>\\n<li>同步：如果在一个函数返回的时候，调用者就能够得到预期结果，那么这个函数就是同步的；</li>\\n<li>异步：如果在函数返回的时候，调用者还不能够得到预期结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的。</li>\\n</ul>\\n<p>那单线程有什么好处呢？</p>\\n<ul>\\n<li>在 JS 运行的时候可能会阻止 UI 渲染，这说明了两个线程是互斥的。这是因为 JS 可以修改 DOM，如果在 JS 执行的时候 UI 线程还在工作，就可能导致不能安全的渲染 UI。</li>\\n<li>得益于 JS 是单线程运行的，可以达到节省内存，节约上下文切换时间的好处。</li>\\n</ul>","autoDesc":true}');export{B as comp,y as data};
