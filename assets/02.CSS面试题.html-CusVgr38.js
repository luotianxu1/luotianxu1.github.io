import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,o as d,c as r,b as p,d as e,w as n,a as i,e as l}from"./app-DhXEf2lS.js";const k="/img/interview/css.jpg",c="/img/interview/css2.jpg",o="/img/interview/box1.jpg",g="/img/interview/box2.jpg",u="/img/interview/viewport.jpg",A="/img/interview/rem.jpg",m={};function b(B,s){const a=h("CodeDemo");return d(),r("div",null,[s[2]||(s[2]=p('<h2 id="_1-css3-新特性" tabindex="-1"><a class="header-anchor" href="#_1-css3-新特性"><span>1.CSS3 新特性</span></a></h2><blockquote><p>CSS3 新特性</p></blockquote><ol><li>选择器：属性选择器、伪类选择器、伪元素选择器</li><li>媒体查询</li><li>文字阴影</li><li>边框</li><li>盒子模型 box-sizing</li><li>渐变</li><li>过度</li><li>自定义动画</li><li>背景的属性</li><li>2D 和 3D</li></ol><h2 id="_2-css-权重计算" tabindex="-1"><a class="header-anchor" href="#_2-css-权重计算"><span>2.CSS 权重计算</span></a></h2><p>！important &gt; 内联样式 &gt; ID &gt; 类属性、属性选择器或者伪类选择器 &gt; 标签选择器</p><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最终从 A 开始逐层比较，A =&gt; B =&gt;C =&gt;D 哪个大优先哪个样式生效，否则后面覆盖前面样式，这也 是为什么有的嵌套多层样式可以实现覆盖的原因。样式名称也有就近原则，作用在当前标签的能覆盖继承来的样式。最终将这几个条件合并起来就是 css 的权重问题和计算规则。</p><h2 id="_3-css-中可继承与不可继承属性有哪些" tabindex="-1"><a class="header-anchor" href="#_3-css-中可继承与不可继承属性有哪些"><span>3.CSS 中可继承与不可继承属性有哪些</span></a></h2><h3 id="无继承的属性" tabindex="-1"><a class="header-anchor" href="#无继承的属性"><span>无继承的属性</span></a></h3><ul><li>display：规定元素应该生成的框的类型</li><li>文本属性： <ul><li>vertical-align：垂直文本对齐</li><li>text-decoration：规定添加到文本的装饰</li><li>text-shadow：文本阴影效果</li><li>white-space：空白符的处理</li><li>unicode-bidi：设置文本的方向</li></ul></li><li>盒子模型的属性：width、 height、margin、 border、padding</li><li>背景属性：background、background-color、background-image、background-repeat、background-position. background-attachment</li><li>定位属性：float、clear、position、 top、right. bottom、left、min-width、min-height、max-width, max-height, overflow. clip, z-index</li><li>生成内容属性：content、counter-reset、 counter-increment 了.轮廓样式属性：outline-style、outline-width、 outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li><li>声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</li></ul><h3 id="可继承的属性" tabindex="-1"><a class="header-anchor" href="#可继承的属性"><span>可继承的属性</span></a></h3><ul><li><p>字体系列属性</p><ul><li>font-family：字体系列</li><li>font-weight：字体的粗细</li><li>font-size：字体的大小</li><li>font-style：字体的风格</li></ul></li><li><p>文本系列属性</p><ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：单词之间的间距</li><li>letter-spacing：中文或者字母之间的间距</li><li>text-transform：控制文本大小写（就是 uppercase、lowercase、capitalize 这三个）</li><li>color：文本颜色</li></ul></li><li><p>元素可见性</p><ul><li>visibility：控制元素显示隐藏</li></ul></li><li><p>列表布局属性</p><ul><li>list-style：列表风格，包括 list-style-type、list-style-image 等</li></ul></li><li><p>光标厲性</p><ul><li>cursor：光标显示为何种形态</li></ul></li></ul><h2 id="_4-padding-与-margin-有什么不同" tabindex="-1"><a class="header-anchor" href="#_4-padding-与-margin-有什么不同"><span>4.padding 与 margin 有什么不同</span></a></h2><p>padding 针对自身 margin 作用于外部对象</p><h2 id="_5-常见的-css-布局单位" tabindex="-1"><a class="header-anchor" href="#_5-常见的-css-布局单位"><span>5.常见的 CSS 布局单位</span></a></h2><p>常用的布局单位包括像素(px),百分比(%)，em,rem,vw/vh。</p><ul><li>像素(px)是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS 像素和物理像素： <ul><li>css 像素：为 web 开发者提供，在 CSS 中使用的一个抽象单位；</li><li>物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</li></ul></li><li>百分比(%)，当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。</li><li>em 和 rem 相对于 px 更具灵活性，它们都是相对长度单位，它们之间的区别：em 相对于父元素，rem 相对于根元素。 <ul><li>em:文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（默认 16x）。（相对父元素的字体大小倍数）。</li><li>rem:rem 是 CSS3 新增的一个相对单位，相对于根元素(html 元素)的 font-size 的倍数。作用：利用 rem 可以实现简单的响应式布局，可以利用 html 元素中字体的大小与屏幕间的比值来设置 font.size 的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li></ul></li><li>vw/vh 是与视图窗口有关的单位，vw 表示相对于视图窗口的宽度，vh 表示相对于视图窗口高度，除了 vw 和 vh 外，还有 vmin 和 vmax 两个相关的单位。 <ul><li>vw:相对于视窗的宽度，视窗宽度是 100vw;</li><li>vh:相对于视窗的高度，视窗高度是 100vh;</li><li>vmin:w 和 vh 中的较小值：</li><li>vmax:w 和 vh 中的较大值；</li></ul></li></ul><p>vw/vh 和百分比很类似，两者的区别：</p><ul><li>百分比(%)：大部分相对于祖先元素，也有相对于自身的情况比如(border-radius、translates 等)</li><li>vw/vh:相对于视窗的尺寸</li></ul><h2 id="_6-px、em、rem-的区别及使用场景" tabindex="-1"><a class="header-anchor" href="#_6-px、em、rem-的区别及使用场景"><span>6.px、em、rem 的区别及使用场景</span></a></h2><ul><li>三者的区别： <ul><li>px 是固定的像素，一旦设置了就无法因为适应页面大小而改变。</li><li>em 和 rem 相对于 px 更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。rem 中给 html 根节点设置<code>font-size:62.5%;</code> 1rem = 10px</li><li>em 是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而 rem 是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。</li></ul></li><li>使用场景： <ul><li>对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用 px 即可。</li><li>对于需要适配各种移动设备，使用 rem，例如需要适配 iPhone 和 Pad 等分辨率差别比较挺大的设备。</li></ul></li></ul><h2 id="_7-vm-与百分比有什么不同" tabindex="-1"><a class="header-anchor" href="#_7-vm-与百分比有什么不同"><span>7.vm 与百分比有什么不同</span></a></h2><p>百分比有继承关系，vw 只和设备宽度有关系</p><h2 id="_8-vm-相比于-rem-的优势" tabindex="-1"><a class="header-anchor" href="#_8-vm-相比于-rem-的优势"><span>8.vm 相比于 rem 的优势</span></a></h2><ul><li>不需要计算 html 的 font-size 大小，也不需要给 html 设置这样一个 font-size</li><li>不会因为设置 html 的 font-size 大小，而必须给 body 再设置一个 font-size，防止继承</li><li>因为不依赖 font-size 的尺寸，所以不用担心某些原因 html 的 font-size 尺寸被篡改，页面尺寸混乱</li><li>vw 相比于 rem 更加语义化，1vw 是 1/100 的 viewport 的大小</li><li>可以具备 rem 之前所有有点</li></ul><h2 id="_9-对盒模型的理解" tabindex="-1"><a class="header-anchor" href="#_9-对盒模型的理解"><span>9.对盒模型的理解</span></a></h2><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型</p><p><img src="'+o+'" alt=" " loading="lazy"><img src="'+g+`" alt=" " loading="lazy"></p><p>盒模型都是由四个部分组成的，分别是<code>margin</code>、<code>border</code>、<code>padding</code>和<code>content</code>。</p><p>标准盒模型和IE盒模型的区别在于设置<code>width</code>和<code>height</code>时，所对应的范围不同：</p><ul><li>标准盒模型的<code>width</code>和<code>height</code>属性的范围只包含了<code>content</code>，</li><li>IE盒模型的<code>width</code>和<code>height</code>属性的范围包含了<code>border</code>、<code>padding</code>和<code>content</code>。</li></ul><p>可以通过修改元素的<code>box-sizing</code>属性来改变元素的盒模型：</p><ul><li><code>box-sizeing: content-box</code>表示标准盒模型（默认值）</li><li><code>box-sizeing: border-box</code>表示IE盒模型（怪异盒模型）</li></ul><h2 id="_10-display-的-block、inline-和-inline-block-的区别" tabindex="-1"><a class="header-anchor" href="#_10-display-的-block、inline-和-inline-block-的区别"><span>10.display 的 block、inline 和 inline-block 的区别</span></a></h2><ul><li>block:会独占一行，多个元素会另起一行，可以设置 width、height,margin 和 padding 属性；</li><li>inline:元素不会独占一行，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 nargin;</li><li>inline-block:将对象设置为 inline 对象，但对象的内容作为 block 对象呈现，之后的内联对象会被排列在同一行内。</li></ul><h2 id="_11-隐藏元素的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_11-隐藏元素的方法有哪些"><span>11.隐藏元素的方法有哪些</span></a></h2><ul><li>display:none:渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li><li>visibility:hidden:元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li><li>opacity::0:将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并目能够响应元素绑定的监听事件。</li><li>position:absolute:通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li><li>z-idex:负值：来使其他元素遮盖住该元素，以此来实现隐藏。</li><li>clip/clip-path：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li><li>transform:scale(0,0):将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li></ul><h2 id="_12-link-和-import-的区别" tabindex="-1"><a class="header-anchor" href="#_12-link-和-import-的区别"><span>12.link 和@import 的区别</span></a></h2><ul><li>link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴只能加载 CSS.</li><li>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。</li><li>link 是 HTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。</li><li>link 支持使用 Javascript 控制 DOM 去改变样式；而@import7 不支持。</li></ul><h2 id="_13-transition-和-animation-的区别" tabindex="-1"><a class="header-anchor" href="#_13-transition-和-animation-的区别"><span>13.transition 和 animation 的区别</span></a></h2><ul><li>transition 是过度属性，强调过度，它的实现需要触发一个事件（比如标移动上去，焦点，点击等）才执行动画。它类似于 fash 的补间动画，设置一个开始关键帧，一个结束关键帧。</li><li>animation:是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类以于 flash 的补间动画，但是它可以设置多个关键帧（用@keyframe 定义）完成动画。</li></ul><h2 id="_14-css3-中-transition-和-animation-的属性分别有哪些" tabindex="-1"><a class="header-anchor" href="#_14-css3-中-transition-和-animation-的属性分别有哪些"><span>14.CSS3 中 transition 和 animation 的属性分别有哪些</span></a></h2><ul><li>transition 过渡动画： <ul><li>transition-property：指定过渡的 CSS 属性</li><li>transition-duration：指定过渡所需的完成时间</li><li>transition-timing-function：指定过渡函数</li><li>transition-delay：指定过渡的延迟时间</li></ul></li><li>animation 关键帧动画： <ul><li>animation-name：指定要绑定到选择器的关键帧的名称</li><li>animation-duration：动画指定需要多少秒或毫秒完成</li><li>animation-timing-function：设置动画将如何完成一个周期</li><li>animation-delay：设置动画在启动前的延迟间隔</li><li>animation-iteration-count：定义动画的播放次数</li><li>animation-direction：指定是否应该轮流反向播放动画</li><li>animation-fill-mode：规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式</li><li>animation-play-state：指定动画是否正在运行或已暂停</li></ul></li></ul><h2 id="_15-display-none-与-visibility-hidden-的区别" tabindex="-1"><a class="header-anchor" href="#_15-display-none-与-visibility-hidden-的区别"><span>15.display:none 与 visibility:hidden 的区别</span></a></h2><p>这两个属性都是让元素隐藏，不可见。两者区别如下：</p><ul><li>在渲染树中 <ul><li>display:none 会让元素完全从渲染树中消失，渲染时不会占据任何空间；</li><li>visibility:hidden 不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</li></ul></li><li>是否是继承属性 <ul><li>display:none 是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示，</li><li>visibility:hidden 是继承属性，子孙节点消失是由于继承了 hidden,通过设置 visibility:visible 可以让子孙节点显示；</li></ul></li><li>修改常规文档流中元素的 display 通常会造成文档的重排，但是修改 visibility 属性只会造成本元素的重绘；</li><li>如果使用读屏器，设置为 display:none 的内容不会被读取，设置为 visibility:hidden 的内容会被读取。</li></ul><h2 id="_16-分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" tabindex="-1"><a class="header-anchor" href="#_16-分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景"><span>16.分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</span></a></h2><ul><li><code>display: none</code> (不占空间，不能点击)（场景，显示出原来这里不存在的结构）</li><li><code>visibility: hidden</code>（占据空间，不能点击）（场景：显示不会导致页面结构发生变动，不会撑开）</li><li><code>opacity: 0</code>（占据空间，可以点击）（场景：可以跟<code>transition</code>搭配）</li></ul><h2 id="_17-伪元素和伪类的区别和作用" tabindex="-1"><a class="header-anchor" href="#_17-伪元素和伪类的区别和作用"><span>17.伪元素和伪类的区别和作用？</span></a></h2><ul><li>伪元素：在内容元素的前后插入额的外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:before</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{content:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;第一章：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">；}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:after</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">content</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:&quot;Hot!&quot;;}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:first-line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {background:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:first-letter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-size</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:30px;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:hover</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{color:#FFOOFF}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:first-child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {color:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：伪类是通过在元素选择器上加入伪类改变元素状态，而伪元素通过对元素的操作进行对元素的改变。</p><h2 id="_18-对-requestanimationframe-的理解" tabindex="-1"><a class="header-anchor" href="#_18-对-requestanimationframe-的理解"><span>18.对 requestAnimationframe 的理解</span></a></h2><p>实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供个专门用于请求动画的 APl,那就是 requestAnimationFrame,顾名思义就是请求动画帧。</p><p>语法：window.requestAnimationFrame(callback):其中，callback 是下一次重绘之前更新动画帧所调用的函数（即上面说的回调函数）。该回调函数会被传入 DOMHighResTimeStampa 参数，它表示 requestAnimationFrame()开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行。</p><p>取消动画：使用 cancelAnimationFrame(O 来取消执行动画，该方法接收一个参数 requestAnimationFrame 默认返回的 id,只需要传入这个 id 就可以取消动画了。</p><p>优势：</p><ul><li>CPU 节能：使用 SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于比时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费 CPU 资源。而 RequestAnimationFrame 则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的 RequestAnimationFrame 也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有节省了 CPU 开销。</li><li>函数节流：在高频率事件(resize,scro 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame 可保证每个刷新间隔内，函数只被执行一次，这样既能保正流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每 16.7ms 刷新一次，多次绘制并不会在屏幕上体现出来。</li><li>减少 DoM 操作：requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒 60 帧。</li></ul><p>set Timeout 执行动画的缺点：</p><p>它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象：原因是：</p><ul><li>settimeout 任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；</li><li>settimeout 的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。</li></ul><h2 id="_19-与之间有看不见的空白间隔是什么原因起的-如何解决" tabindex="-1"><a class="header-anchor" href="#_19-与之间有看不见的空白间隔是什么原因起的-如何解决"><span>19.与之间有看不见的空白间隔是什么原因起的？如何解决？</span></a></h2><p>浏览器会把 inline 内联元素间的空白字符（空格、换行、Tab 等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。</p><p>解决办法： (1)为<code>&lt;i&gt;</code>设置 oat:lt。不足：有些容器是不能设置浮动，如左右切换的焦点图等。 (2)将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观 (3)将<code>&lt;u&gt;</code>内的字符尺寸直接设为 0，即 font-siz:0。不足：<code>&lt;u&gt;</code>中的其他字符尺寸也被设为 0，需要额外重新设定其他字符尺寸，且在 Safari 浏览器依然会出现空白间隔。 (4)消除<code>&lt;u&gt;</code>的字符间隔 letter-.spacing:-8px,不足：这也设置了<code>&lt;i&gt;</code>内的字符间隔，因此需要将<code>&lt;i&gt;</code>内的字符间隔设为默认 letter-.spacing:normal。</p><h2 id="_20-对-csssprites-的理解" tabindex="-1"><a class="header-anchor" href="#_20-对-csssprites-的理解"><span>20.对 CSSSprites 的理解</span></a></h2><p>CSSSprites(精灵图)，将一个页面涉及到的所有图片都包含到一张大图中去，然后利用 CSS 的 background-image,background-repeat,background-position)属性的组合进行背景定位。</p><p>优点：</p><ul><li>利用 CSS Spritesi 能很好地减少网页的 http 请求，从而大大提高了页面的性能，这是 CSS Sprites 最大的优点</li><li>CSS Sprites 能减/少图片的字节，把 3 张图片合并成 1 张图片的字节总是小于这 3 张图片的字节总和</li></ul><p>缺点：</p><ul><li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li><li>CSSSprites 在开发的时候相对来说有点麻烦需要借助 photoshope 或其他工具来对每个背景单元测量其准确的位置。</li><li>维护方面：CSS Sprites 在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的 CSS,如果在原来的地方放不下，又只能(最好)往下加图片，这样图片的字节就增加了，还要改动 CSS。</li></ul><h2 id="_21-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x-这种图片" tabindex="-1"><a class="header-anchor" href="#_21-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x-这种图片"><span>21.什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x,@2x 这种图片？</span></a></h2><p>以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px,其宽度为 414px&amp;896px,也就是说当赋予一个 DV 元素宽度为 414px,这个 DIV 就会填满手机的宽度；</p><p>而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3,也就是说，在单边上，一个逻辑像素=3 个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。</p><p>对于图片来说，为了保证其不失真，张图片像素至少要对应一个物理像素，假如原始图片是 500*300 像素，那么在 3 倍屏上就要放一个 1500*900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。</p><p>当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。</p><p>还可以使用 CSS 媒体查间来判断不同的像素密度，从而选择不同的图片：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { background:(low.png);}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> only</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (min-device-pixel-ratio:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    #my-image</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> background:(high</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-css-预处理器-后处理器是什么-为什么要使用它们" tabindex="-1"><a class="header-anchor" href="#_22-css-预处理器-后处理器是什么-为什么要使用它们"><span>22.CSS 预处理器/后处理器是什么？为什么要使用它们？</span></a></h2><p>预处理器，如：less,sass,stylus,用来预编译 sass 或者 less,增加了 css 代码的复用性。层级，mixin,变量，循环，函数等对编写以及开发组件都极为方便。</p><p>后处理器，如：postCss,通常是在完成的样式表中根据 css 规范处理 css,让其更加有效。目前最常做的是给 css 属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p><p>css 预处理器为 css 增加一些编程特性，无需考虑浏览器的兼容问题，可以在 CSS 中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让 cS$更加的简洁，增加适应性以及可 读性，可维护性等。</p><p>其它 css 预处理器语言：Sass(Scss),Less,Stylus,.Turbine,Swithch css</p><p>使用原因：</p><ul><li>结构清晰，便于扩展</li><li>可以很方便的屏蔽浏览器私有语法的差异</li><li>可以轻松实现多重继承</li><li>完美的兼容了 CSS 代码，可以应用到老项目中</li></ul><h2 id="_23-before-和-after-的双冒号和单冒号有什么区别" tabindex="-1"><a class="header-anchor" href="#_23-before-和-after-的双冒号和单冒号有什么区别"><span>23.:before 和：after 的双冒号和单冒号有什么区别？</span></a></h2><ul><li>冒号(:)用于 CSS3 伪类，双冒号(::)用于 CSS3 伪元素。</li><li>:before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于 dom 之中，只存在在页面之中。</li></ul><h2 id="_24-如何让浏览器支持小字体" tabindex="-1"><a class="header-anchor" href="#_24-如何让浏览器支持小字体"><span>24.如何让浏览器支持小字体</span></a></h2><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scale(0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_25-让一个元素水平垂直居中" tabindex="-1"><a class="header-anchor" href="#_25-让一个元素水平垂直居中"><span>25.让一个元素水平垂直居中</span></a></h2><ol><li>定位+margin</li><li>定位+transform</li><li>flex</li><li>flex+margin</li><li>grid</li><li>grid+margin</li><li>table</li></ol><ul><li>定位+margin</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    right: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bottom: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    left: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    margin: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定位+transform</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    left: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">translate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>flex</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>flex+margin</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    margin: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>grid</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">grid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>grid+margin</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">grid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    margin: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>table</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">table-cell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vertical-align: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">middle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    text-align: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">inline-block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-居中为什么要使用-transform-为什么不使用-marginleft-top" tabindex="-1"><a class="header-anchor" href="#_26-居中为什么要使用-transform-为什么不使用-marginleft-top"><span>26.居中为什么要使用 transform（为什么不使用 marginLeft/Top）</span></a></h2><p><code>transform</code> 属于合成属性，对合成属性进行 <code>transition</code>/<code>animation</code> 动画将会创建一个合成层，这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘，浏览器会通过重新复合来形成一个新的帧。</p><p><code>top</code>/<code>left</code>属于布局属性，该属性的变化会导致重排，所谓重排即指对这些节点以及受这些节点影响的其它节点，进行CSS计算-&gt;布局-&gt;重绘过程，浏览器需要为整个层进行重绘并重新上传到 GPU，造成了极大的性能开销。</p><h2 id="_27-rgba-和-opacity-的透明效果有什么不同" tabindex="-1"><a class="header-anchor" href="#_27-rgba-和-opacity-的透明效果有什么不同"><span>27.rgba() 和 opacity 的透明效果有什么不同？</span></a></h2><ul><li>opacity 作用于元素，以及元素内的所有内容的透明度</li><li>rgba() 只作用于元素的颜色或其背景色。（设置 rgba 透明的元素的子元素不会继承透明效果！）</li></ul><h2 id="_28-z-index-属性在什么情况下会失效" tabindex="-1"><a class="header-anchor" href="#_28-z-index-属性在什么情况下会失效"><span>28.z-index 属性在什么情况下会失效</span></a></h2><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index 值越大就越是在上层。z-index 元素的 position）属性需要是 relative,absolute?或是 fixed.</p><p>z-index 属性在下列情况下会失效：</p><ul><li>父元素 position 为 relative 时，子元素的 z-index 失效。解决：父元素 positioni 改为 absolute 或 static;</li><li>元素没有设置 oosition 属性为非 static 属性。解决：设置该元素的 oosition 属性为 relative,absolute 或是 fixed 中的一种；</li><li>元素在设置 z-index 的同时还设置了 float 浮动。解决：float 去除，改为 display:inline-block;</li></ul><h2 id="_29-css3-中的-transform-有哪些属性" tabindex="-1"><a class="header-anchor" href="#_29-css3-中的-transform-有哪些属性"><span>29.css3 中的 transform 有哪些属性</span></a></h2><p>CSS3 中的 transform 属性用于对元素进行变换，它可以实现平移、旋转、缩放、顷斜等效果，使得网页元素可以在不改变文档流的前提下进行动态的变换和动画效果。以下是 transform 属性的一些常见属性：</p><ul><li>translate:用于平移（移动）元素，可以在水平方向(X 轴)和垂直方向(Y 轴)上进行平移。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*米水平和垂直平移*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translate(50px</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 100px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>rotate:用于旋转元素，可以按照指定的角度进行顺时针旋转。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*顺时针旋转30度*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotate(30deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>scale:用于缩放元素，可以在水平方向(X 轴)和垂直方向(Y 轴)上进行缩放。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*在X轴和Y轴上同时缩放为原来的2倍*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scale(2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>skew:用于倾斜元素，可以在水平方向(X 轴)和垂直方向(Y 轴)上进行倾斜。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*在X轴和Y轴上同时倾斜，X轴倾斜角度为30度，Y轴倾斜角度为45度*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: skew(30deg</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 45deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>matriⅸ：允许你自定义一个 2D 变换矩阵来进行复杂的变换。这是一个更高级和灵活的属性，但使用起来较复杂。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*自定义2D变换矩阵*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: matrix(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> c</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> d</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> tx</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有其他一些更高级的属性，如 rotateX、rotateY、rotateZ(立体旋转)、scaleX、scaleY、scaleZ(单轴缩放)、translateX、translateY、translateZ(单轴平移)等。这些属性可以单独使用或与其他属性组合使用，创造出丰富的动画效果和交互体验。</p><h2 id="_30-对-flex-布局的理解及其使用场景" tabindex="-1"><a class="header-anchor" href="#_30-对-flex-布局的理解及其使用场景"><span>30.对 Flex 布局的理解及其使用场景</span></a></h2><p>Flex 是 FlexibleBox 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。行内元素也可以使用 Flex 布局。注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。采用 Flex 布局的元素，称为 Flex 容器 (flex container)，简称&quot;容器&#39;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴 (main axis) 和垂直的交叉轴 (cross axis)，项目默认沿水平主轴排列。</p><p>以下 6 个属性设置在容器上：</p><ul><li>fex-direction 属性决定主轴的方向（即项目的排列方向）。</li><li>fex-wrap 属性定义，如果一条轴线排不下，如何换行。</li><li>flex-fow 属性是 nex-direction 属性和 fex-wrap 属性的简写形式，默认值为 row nowrap。</li><li>justity-content 属性定义了项目在主轴上的对齐方式。</li><li>align-itemns 属性定义项目在交叉轴上如何对齐。</li><li>align-content 属性定义了 多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><p>以下 6 个属性设置在项目上：</p><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空问不足，该项目将缩小。</li><li>flex-basis 属性定义了 在分配多余空问之前，项目占据的主轴空问。浏览器根据这个属性，计算主轴是否有多余空问。它的默认值为 auto，即项目的本来大小。</li><li>flex 属性是 nlex-grow， flex-shrink 和 1lex-basis 的简写，默认值为 0 1 auto。</li><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li></ul><p>简单来说：</p><p>fex 布局是 CSS3 新增的一种布局方式，可以通过将一个元素的 display 属性值设置为 flex 从而使它成为一个 flex 容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用 flex-direction 来指定主轴的方向。可以使用 justify-content 来指定元素在主轴上的排列方式，使用 align-items 来指定元素在交叉轴上的排列方式。还可以使用 flex-wrap 来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用 order 属性来指定项目的排列顺序，还可以使用 nex-grow 来指定当排列空问有剩余的时候，项目的放大比例，还可以使用 fex-shrink 来指定当排列空问不足时，项目的缩小比例。</p><h2 id="_31-什么是-margin-重叠问题-如何解决" tabindex="-1"><a class="header-anchor" href="#_31-什么是-margin-重叠问题-如何解决"><span>31.什么是 margin 重叠问题？如何解决？</span></a></h2><p>两个块级元素的上外边距和下外边距可能会合并（折靈） 为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，浮动的元素和绝对定位这种脱离文档流的元素的外边距不会折叠。重叠只会出现在垂直方向。</p><p>计算原则：</p><ul><li>如果两者都是正数，那么就去最大者</li><li>如果是一正一负，就会正值减去负值的绝对值</li><li>两个都是负值时，用 0 减去两个中绝对值大的那个</li></ul><p>解决办法：</p><p>对于折叠的情况，主要有两种：兄弟之问重疊和父子之问重疊</p><ul><li>兄弟之间重叠 <ul><li>底部元素变为行内盒子：display: inline-block</li><li>底部元素设置浮动：foat</li><li>底部元素的 position 的值为 absolute/fxed</li></ul></li><li>父子之间重叠 <ul><li>父元素加入：overflow:hidden</li><li>父元素添加透明边框：border:1px solid transparent</li><li>子元素变为行内盒子：display: inline-block</li><li>子元素加入浮动属性或定位</li></ul></li></ul><h2 id="_32-absolute-与-fixed-共同点与不同点" tabindex="-1"><a class="header-anchor" href="#_32-absolute-与-fixed-共同点与不同点"><span>32.absolute 与 fixed 共同点与不同点</span></a></h2><ul><li>共同点： <ul><li>改变行内元素的呈现方式，将 display 置为 inline-block</li><li>使元素脱离普通文档流，不再占据文档物理空间</li><li>覆盖非定位文档元素</li></ul></li><li>不同点： <ul><li>abuselute 与 fixed 的根元素不同，abuselute 的根元素可以设置，fixed 根元素是浏览器。</li><li>在有滚动条的页面中，absolute 会跟着父元素进行移动，tixed 固定在页面的具体位置。</li><li></li></ul></li></ul><h2 id="_33-bfc" tabindex="-1"><a class="header-anchor" href="#_33-bfc"><span>33.BFC</span></a></h2><p>它时页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的有 BFC 和 IFC。</p><blockquote><p>如何创建 BFC</p></blockquote><ul><li>根元素</li><li>绝对定位（position 为 absolute/fixed）</li><li>浮动元素（float 为 left/right）</li><li>行内块元素（display 为 inline-block）</li><li>表格单元格（display 为 table-cell/table-caption）</li><li>匿名表格单元格（display 为 table/table-row/table-row-group）</li><li>overflow 为 hidden/auto/scroll</li><li>弹性元素（display 为 flex 或 inline-flex）</li><li>网格元素（display 为 grid 或 inline-grid）</li></ul><blockquote><p>布局规则</p></blockquote><p>内部 Box 会在垂直方向，一个接一个放置（即块级元素独占一行） BFC 区域不会与 float box 重叠（利用这点可以实现自适应两栏布局） 内部的 Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠（margin 重叠三个条件：同属于一个 BFC；相邻；块级元素） 计算 BFC 高度时，浮动元素也参与计算 BFC 就是页面上的一个隔离独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><h2 id="_34-移动端适配" tabindex="-1"><a class="header-anchor" href="#_34-移动端适配"><span>34.移动端适配</span></a></h2><h3 id="视口" tabindex="-1"><a class="header-anchor" href="#视口"><span>视口</span></a></h3><blockquote><p>布局视口</p></blockquote><p>布局视口默认宽度是 980px</p><ul><li>按照宽度为 980px 来布局一个页面的盒子和内容</li><li>为了完整的显示再页面中，对整个页面进行缩小</li></ul><blockquote><p>视觉视口</p></blockquote><ul><li>如果默认情况下，我们按照 980p 显示内容，那么右侧有一部分区域就会无法显示，所以手机端浏览器会默认对页面进行缩放以显示到用户的可见区域中 -那么显示在可见区域的这个视口，就是视觉视口。</li></ul><blockquote><p>理想视口</p></blockquote><ul><li>默认情况下 layout viewport 并不适合我们进行布局。</li><li>我们可以对 layout viewport 进行宽度和缩放的设置，以满足在一个移动端窗口的布局。</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;width=device-width,initial-scale=1.0,user-scalable=no,minimum-scale=1.0,maxinum-scale=1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="适配方案" tabindex="-1"><a class="header-anchor" href="#适配方案"><span>适配方案</span></a></h3><blockquote><p>百分比布局</p></blockquote><blockquote><p>rem 单位+动态 html 的 font-size</p></blockquote><ul><li><p>方案</p><ul><li><p>方案一： 媒体查询 rem 单位是相对于 html 与元素的 font-size 来设置的，那么我们需要在不同的屏幕下有不同的尺寸，可以动态的修改 html 的 font-size。 <img src="'+A+`" alt=" " loading="lazy"> 缺点：</p><pre><code>1. 针对不同的屏幕编写大量媒体查询
2. 不能实时改变

\`\`\`css
@media screen and (min-width: 320px) {
    html {
        font-size: 20px;
    }
}
\`\`\`
</code></pre></li><li><p>方案二： JS 动态计算</p><pre><code>    \`\`\`js
    const htmlEl = document.documentElement
    function setRemUnit() {
        const htmlWidth = htmlEl.clientWidth
        const htmlFontSize = htmlWidth / 10
        htmlEl.style.fontSize = htmlFontSize + &#39;px&#39;
    }
    setRemUnit()
    window.addEventListener(&#39;resize&#39;, setRemUnit)
    window.addEventListener(&#39;pageshow&#39;, function () {
        if (e.persisted) {
            setRemUnit()
        }
    })
    \`\`\`
</code></pre></li><li><p>方案三 lib-flexible 库</p></li></ul></li><li><p>rem 转换</p><ul><li><p>手动换算</p></li><li><p>less/scss 换算</p><pre><code>    \`\`\`less
    .pxToRem(@px) {
        result: 1rem * (@px / 37.5);
    }
    .box {
        width: .pxToRem(100) [result];
    }
    \`\`\`
</code></pre></li><li><p>postcss-pxtorem</p></li><li><p>VSVode 插件</p></li></ul></li></ul><blockquote><p>vw 单位</p></blockquote><ul><li><p>转换</p><ul><li><p>手动计算 比如有一个在 375px 屏幕上，100px 宽度和高度的盒子，我们需要将 100px 转成对应的 vw 的值，100/3.75=36.667</p></li><li><p>less/scss 函数</p><pre><code>\`\`\`less
@vwUnit: 3.75;
.pxToVw(@px) {
    result: (@px / @vwUnit) * 1vw;
}
.box {
    width: .pxToVw(100) [result];
}
\`\`\`
</code></pre></li><li><p>post-px-to-viewport-8-plugin 插件</p></li><li><p>VSCode 插件</p></li></ul></li></ul><blockquote><p>flex 的弹性布局</p></blockquote><h2 id="_35-对-css-工程化的理解" tabindex="-1"><a class="header-anchor" href="#_35-对-css-工程化的理解"><span>35.对 CSS 工程化的理解</span></a></h2><p>CSS 工程化是为了解决以下问题：</p><ul><li>宏观设计：CSS 代码如何组织、如何拆分、模块结构怎样设计？</li><li>编码优化：怎样写出更好的 CSS?</li><li>构建：如何处理我的 CSS,才能让它的打包结果最优？</li><li>可维护性：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都轻松接手？</li></ul><p>以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：</p><ul><li>预处理器：Less、Sass 等；</li><li>重要的工程化插件：PostCss;</li><li>Webpack loader 等。</li></ul><h2 id="_36-为什么要用预处理器-它的出现是为了解决什么问题" tabindex="-1"><a class="header-anchor" href="#_36-为什么要用预处理器-它的出现是为了解决什么问题"><span>36.为什么要用预处理器？它的出现是为了解决什么问题？</span></a></h2><p>预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码。</p><p>那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样一为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：</p><ul><li>宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；</li><li>编码优化上：我们希望能写出结构清晰、简明易懂的 CSS,需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码：</li><li>可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。</li></ul><p>这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：</p><ul><li>嵌套代码的能力，通过嵌套来反映不同 CSS 属性之间的层级关系：</li><li>支持定义 css 变量，</li><li>提供计算函数；</li><li>允许对代码片段进行 extend 和 mixin;</li><li>支持循环语句的使用；</li><li>支持将 CSS 文件模块化，实现复用。</li></ul><h2 id="_37-postcss-是如何工作的-我们在什么场景下会使用-postcss" tabindex="-1"><a class="header-anchor" href="#_37-postcss-是如何工作的-我们在什么场景下会使用-postcss"><span>37.PostCss 是如何工作的？我们在什么场景下会使用 PostCss?</span></a></h2><p>它和预及处理器的不同就在于，预处理器处理的是类 CSS,而 PostCss 处理的就是 CSS 本身。Babl 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。</p><p>PostCss 在业务中的使用场景非常多：</p><ul><li>提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；</li><li>当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 Autoprefixe©r 插件可以帮助我们自动增加浏览器前缀；</li><li>允许我们编写面向未来的 CSS:PostCss 能够帮助我们编译 CSS next 代码；</li></ul><h2 id="_38-webpack-能处理-css-吗" tabindex="-1"><a class="header-anchor" href="#_38-webpack-能处理-css-吗"><span>38.Webpack 能处理 css 吗？</span></a></h2><ul><li>Webpack 在裸奔的状态下，是不能处理 csS 的，Vebpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；</li><li>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</li></ul><h2 id="_40-如何用-webpack-实对-css-的处理" tabindex="-1"><a class="header-anchor" href="#_40-如何用-webpack-实对-css-的处理"><span>40.如何用 Webpack 实对 CSS 的处理</span></a></h2><ul><li>webpack 中操作 CSS 需要使用的两个关键的 loader:css-loader 和 style-loader</li><li>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情： <ul><li>css-loader:导入 CSS 模块，对 CSS 代码进行编译处理；</li><li>style-loader:创建 style 标签，把 CSS 内容写入标签。</li></ul></li></ul><p>在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p><h2 id="_41-实现一个三角形" tabindex="-1"><a class="header-anchor" href="#_41-实现一个三角形"><span>41.实现一个三角形</span></a></h2>`,191)),e(a,{id:"code-demo-1749",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJx9zj0KwzAMhuGrCM39ydIlTXMSL3Hs1gbHMpZoAyF3r6BD8RJt38szaMMgS8IeBxffMKeJ+WHQ0mpwHK7aRpPxhDOzmot22EwGvU90Enro7r8ZfHwF+W9L1fl6Tv6p8daVFZhSdFC9a4VQaYDUKXOZqs/SQksitBzYXT/dv+aBRHQ="},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-html line-numbers-mode","data-highlighter":"shiki","data-ext":"html","data-title":"html",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"box"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"></"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),i("div",{class:"language-css line-numbers-mode","data-highlighter":"shiki","data-ext":"css","data-title":"css",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},".box"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    width: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    height: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border-left: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"50"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E06C75"}},"px"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," solid"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," red"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border-top: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"50"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E06C75"}},"px"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," solid"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," transparent"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border-bottom: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"50"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E06C75"}},"px"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," solid"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," transparent"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[3]||(s[3]=i("h2",{id:"_42-实现一个扇形",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_42-实现一个扇形"},[i("span",null,"42.实现一个扇形")])],-1)),e(a,{id:"code-demo-1756",type:"normal",title:"%E6%89%87%E5%BD%A2",code:"eJxVTssOwiAQ/JXNnq3iFWu/hAsFIiQIhF21SdN/d5M2Mc5tHpmZFSM/M2ocfXqDy5bobnCui8FpvIg2mYIndESSOYsOqykgmGv3oWu4KtUWoJqTB+62ULM9FL7tqU/yHDWog8aQHvyje8fQrU8vOqr+La5tcDVXGerBi7fJne0Lc8g6Fg=="},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-html line-numbers-mode","data-highlighter":"shiki","data-ext":"html","data-title":"html",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"box"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"></"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),i("div",{class:"language-css line-numbers-mode","data-highlighter":"shiki","data-ext":"css","data-title":"css",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},".box"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"100"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E06C75"}},"px"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," solid"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}}," transparent"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    width: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    heigt: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border-radius: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"100"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E06C75"}},"px"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    border-top-color: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"red"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[4]||(s[4]=i("h2",{id:"_43-设置小于12px的字体",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_43-设置小于12px的字体"},[i("span",null,"43.设置小于12px的字体")])],-1)),s[5]||(s[5]=i("p",null,"在谷歌下css设置字体大小为12px及以下时，品示都是一样大小，都是默认12px。",-1)),s[6]||(s[6]=i("p",null,"解決办法：",-1)),s[7]||(s[7]=i("ul",null,[i("li",null,"使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。"),i("li",null,"使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；"),i("li",null,"使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。")],-1))])}const f=t(m,[["render",b],["__file","02.CSS面试题.html.vue"]]),F=JSON.parse('{"path":"/interview/02.CSS%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"CSS面试题","lang":"zh-CN","frontmatter":{"title":"CSS面试题","icon":"markdown","order":2,"date":"2023-02-17T00:00:00.000Z","category":["面试"],"tag":["css"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1.CSS3 新特性","slug":"_1-css3-新特性","link":"#_1-css3-新特性","children":[]},{"level":2,"title":"2.CSS 权重计算","slug":"_2-css-权重计算","link":"#_2-css-权重计算","children":[]},{"level":2,"title":"3.CSS 中可继承与不可继承属性有哪些","slug":"_3-css-中可继承与不可继承属性有哪些","link":"#_3-css-中可继承与不可继承属性有哪些","children":[{"level":3,"title":"无继承的属性","slug":"无继承的属性","link":"#无继承的属性","children":[]},{"level":3,"title":"可继承的属性","slug":"可继承的属性","link":"#可继承的属性","children":[]}]},{"level":2,"title":"4.padding 与 margin 有什么不同","slug":"_4-padding-与-margin-有什么不同","link":"#_4-padding-与-margin-有什么不同","children":[]},{"level":2,"title":"5.常见的 CSS 布局单位","slug":"_5-常见的-css-布局单位","link":"#_5-常见的-css-布局单位","children":[]},{"level":2,"title":"6.px、em、rem 的区别及使用场景","slug":"_6-px、em、rem-的区别及使用场景","link":"#_6-px、em、rem-的区别及使用场景","children":[]},{"level":2,"title":"7.vm 与百分比有什么不同","slug":"_7-vm-与百分比有什么不同","link":"#_7-vm-与百分比有什么不同","children":[]},{"level":2,"title":"8.vm 相比于 rem 的优势","slug":"_8-vm-相比于-rem-的优势","link":"#_8-vm-相比于-rem-的优势","children":[]},{"level":2,"title":"9.对盒模型的理解","slug":"_9-对盒模型的理解","link":"#_9-对盒模型的理解","children":[]},{"level":2,"title":"10.display 的 block、inline 和 inline-block 的区别","slug":"_10-display-的-block、inline-和-inline-block-的区别","link":"#_10-display-的-block、inline-和-inline-block-的区别","children":[]},{"level":2,"title":"11.隐藏元素的方法有哪些","slug":"_11-隐藏元素的方法有哪些","link":"#_11-隐藏元素的方法有哪些","children":[]},{"level":2,"title":"12.link 和@import 的区别","slug":"_12-link-和-import-的区别","link":"#_12-link-和-import-的区别","children":[]},{"level":2,"title":"13.transition 和 animation 的区别","slug":"_13-transition-和-animation-的区别","link":"#_13-transition-和-animation-的区别","children":[]},{"level":2,"title":"14.CSS3 中 transition 和 animation 的属性分别有哪些","slug":"_14-css3-中-transition-和-animation-的属性分别有哪些","link":"#_14-css3-中-transition-和-animation-的属性分别有哪些","children":[]},{"level":2,"title":"15.display:none 与 visibility:hidden 的区别","slug":"_15-display-none-与-visibility-hidden-的区别","link":"#_15-display-none-与-visibility-hidden-的区别","children":[]},{"level":2,"title":"16.分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景","slug":"_16-分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景","link":"#_16-分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景","children":[]},{"level":2,"title":"17.伪元素和伪类的区别和作用？","slug":"_17-伪元素和伪类的区别和作用","link":"#_17-伪元素和伪类的区别和作用","children":[]},{"level":2,"title":"18.对 requestAnimationframe 的理解","slug":"_18-对-requestanimationframe-的理解","link":"#_18-对-requestanimationframe-的理解","children":[]},{"level":2,"title":"19.与之间有看不见的空白间隔是什么原因起的？如何解决？","slug":"_19-与之间有看不见的空白间隔是什么原因起的-如何解决","link":"#_19-与之间有看不见的空白间隔是什么原因起的-如何解决","children":[]},{"level":2,"title":"20.对 CSSSprites 的理解","slug":"_20-对-csssprites-的理解","link":"#_20-对-csssprites-的理解","children":[]},{"level":2,"title":"21.什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x,@2x 这种图片？","slug":"_21-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x-这种图片","link":"#_21-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x-这种图片","children":[]},{"level":2,"title":"22.CSS 预处理器/后处理器是什么？为什么要使用它们？","slug":"_22-css-预处理器-后处理器是什么-为什么要使用它们","link":"#_22-css-预处理器-后处理器是什么-为什么要使用它们","children":[]},{"level":2,"title":"23.:before 和：after 的双冒号和单冒号有什么区别？","slug":"_23-before-和-after-的双冒号和单冒号有什么区别","link":"#_23-before-和-after-的双冒号和单冒号有什么区别","children":[]},{"level":2,"title":"24.如何让浏览器支持小字体","slug":"_24-如何让浏览器支持小字体","link":"#_24-如何让浏览器支持小字体","children":[]},{"level":2,"title":"25.让一个元素水平垂直居中","slug":"_25-让一个元素水平垂直居中","link":"#_25-让一个元素水平垂直居中","children":[]},{"level":2,"title":"26.居中为什么要使用 transform（为什么不使用 marginLeft/Top）","slug":"_26-居中为什么要使用-transform-为什么不使用-marginleft-top","link":"#_26-居中为什么要使用-transform-为什么不使用-marginleft-top","children":[]},{"level":2,"title":"27.rgba() 和 opacity 的透明效果有什么不同？","slug":"_27-rgba-和-opacity-的透明效果有什么不同","link":"#_27-rgba-和-opacity-的透明效果有什么不同","children":[]},{"level":2,"title":"28.z-index 属性在什么情况下会失效","slug":"_28-z-index-属性在什么情况下会失效","link":"#_28-z-index-属性在什么情况下会失效","children":[]},{"level":2,"title":"29.css3 中的 transform 有哪些属性","slug":"_29-css3-中的-transform-有哪些属性","link":"#_29-css3-中的-transform-有哪些属性","children":[]},{"level":2,"title":"30.对 Flex 布局的理解及其使用场景","slug":"_30-对-flex-布局的理解及其使用场景","link":"#_30-对-flex-布局的理解及其使用场景","children":[]},{"level":2,"title":"31.什么是 margin 重叠问题？如何解决？","slug":"_31-什么是-margin-重叠问题-如何解决","link":"#_31-什么是-margin-重叠问题-如何解决","children":[]},{"level":2,"title":"32.absolute 与 fixed 共同点与不同点","slug":"_32-absolute-与-fixed-共同点与不同点","link":"#_32-absolute-与-fixed-共同点与不同点","children":[]},{"level":2,"title":"33.BFC","slug":"_33-bfc","link":"#_33-bfc","children":[]},{"level":2,"title":"34.移动端适配","slug":"_34-移动端适配","link":"#_34-移动端适配","children":[{"level":3,"title":"视口","slug":"视口","link":"#视口","children":[]},{"level":3,"title":"适配方案","slug":"适配方案","link":"#适配方案","children":[]}]},{"level":2,"title":"35.对 CSS 工程化的理解","slug":"_35-对-css-工程化的理解","link":"#_35-对-css-工程化的理解","children":[]},{"level":2,"title":"36.为什么要用预处理器？它的出现是为了解决什么问题？","slug":"_36-为什么要用预处理器-它的出现是为了解决什么问题","link":"#_36-为什么要用预处理器-它的出现是为了解决什么问题","children":[]},{"level":2,"title":"37.PostCss 是如何工作的？我们在什么场景下会使用 PostCss?","slug":"_37-postcss-是如何工作的-我们在什么场景下会使用-postcss","link":"#_37-postcss-是如何工作的-我们在什么场景下会使用-postcss","children":[]},{"level":2,"title":"38.Webpack 能处理 css 吗？","slug":"_38-webpack-能处理-css-吗","link":"#_38-webpack-能处理-css-吗","children":[]},{"level":2,"title":"40.如何用 Webpack 实对 CSS 的处理","slug":"_40-如何用-webpack-实对-css-的处理","link":"#_40-如何用-webpack-实对-css-的处理","children":[]},{"level":2,"title":"41.实现一个三角形","slug":"_41-实现一个三角形","link":"#_41-实现一个三角形","children":[]},{"level":2,"title":"42.实现一个扇形","slug":"_42-实现一个扇形","link":"#_42-实现一个扇形","children":[]},{"level":2,"title":"43.设置小于12px的字体","slug":"_43-设置小于12px的字体","link":"#_43-设置小于12px的字体","children":[]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":32.28,"words":9684},"filePathRelative":"interview/02.CSS面试题.md","localizedDate":"2023年2月17日"}');export{f as comp,F as data};
