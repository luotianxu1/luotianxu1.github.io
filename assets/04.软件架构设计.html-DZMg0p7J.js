import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as t,b as n}from"./app-BrAc6PLC.js";const e="/img/softExamination/41.jpg",s="/img/softExamination/42.jpg",o="/img/softExamination/47.jpg",g="/img/softExamination/48.jpg",p="/img/softExamination/49.jpg",h="/img/softExamination/50.jpg",r="/img/softExamination/51.jpg",c="/img/softExamination/52.jpg",d="/img/softExamination/53.jpg",u="/img/softExamination/54.jpg",f="/img/softExamination/55.jpg",m="/img/softExamination/56.jpg",x="/img/softExamination/57.jpg",b="/img/softExamination/58.jpg",E="/img/softExamination/59.jpg",_="/img/softExamination/43.jpg",j="/img/softExamination/44.jpg",v="/img/softExamination/45.jpg",y="/img/softExamination/46.jpg",k="/img/softExamination/60.jpg",z="/img/softExamination/61.jpg",S="/img/softExamination/62.jpg",A="/img/softExamination/63.jpg",T="/img/softExamination/64.jpg",P="/img/softExamination/65.jpg",D="/img/softExamination/66.jpg",M="/img/softExamination/67.jpg",B="/img/softExamination/68.jpg",R="/img/softExamination/69.jpg",C="/img/softExamination/70.jpg",N="/img/softExamination/71.jpg",I="/img/softExamination/72.jpg",O="/img/softExamination/74.jpg",V="/img/softExamination/77.jpg",w="/img/softExamination/78.jpg",q="/img/softExamination/75.jpg",F="/img/softExamination/76.jpg",L="/img/softExamination/79.jpg",H="/img/softExamination/80.jpg",U="/img/softExamination/81.jpg",W="/img/softExamination/82.jpg",Z="/img/softExamination/83.jpg",J="/img/softExamination/84.jpg",X="/img/softExamination/85.jpg",G="/img/softExamination/86.jpg",Q="/img/softExamination/87.jpg",K="/img/softExamination/88.jpg",Y="/img/softExamination/89.jpg",$="/img/softExamination/90.jpg",ii="/img/softExamination/91.jpg",ai="/img/softExamination/92.jpg",li="/img/softExamination/93.jpg",ti="/img/softExamination/94.jpg",ni="/img/softExamination/95.jpg",ei="/img/softExamination/96.jpg",si="/img/softExamination/97.jpg",oi="/img/softExamination/98.jpg",gi="/img/softExamination/99.jpg",pi="/img/softExamination/100.jpg",hi="/img/softExamination/101.jpg",ri="/img/softExamination/102.jpg",ci="/img/softExamination/103.jpg",di="/img/softExamination/104.jpg",ui="/img/softExamination/105.jpg",fi="/img/softExamination/106.jpg",mi="/img/softExamination/107.jpg",xi="/img/softExamination/108.jpg",bi="/img/softExamination/109.jpg",Ei="/img/softExamination/110.jpg",_i="/img/softExamination/111.jpg",ji="/img/softExamination/112.jpg",vi="/img/softExamination/113.jpg",yi="/img/softExamination/114.jpg",ki="/img/softExamination/115.jpg",zi="/img/softExamination/116.jpg",Si="/img/softExamination/117.jpg",Ai={};function Ti(Pi,i){return l(),t("div",null,i[0]||(i[0]=[n('<h2 id="软件架构的概念" tabindex="-1"><a class="header-anchor" href="#软件架构的概念"><span>软件架构的概念</span></a></h2><p>软件架构 = 软件体系结构</p><p>架构设计就是需求分配，即将满足需求的职责分配到组件上</p><h2 id="架构的本质" tabindex="-1"><a class="header-anchor" href="#架构的本质"><span>架构的本质</span></a></h2><ol><li>软件架构为软件系统提供了一个结构、行为和属性的高级抽象</li><li>软件架构风格是特定应用领域的惯用模式，架构定义一个词汇表和一组约束</li></ol><h2 id="架构的作用" tabindex="-1"><a class="header-anchor" href="#架构的作用"><span>架构的作用</span></a></h2><ol><li>软件架构是项目干系人进行交流的手段</li><li>软件架构是可传递和可复用的模型，通过研究软件架构可能预测软件的质量</li><li>软件架构使推理和控制的更改更加简单，有助于循序渐进的原型设计，可以作为培训的基础</li></ol><h2 id="架构的发展历程" tabindex="-1"><a class="header-anchor" href="#架构的发展历程"><span>架构的发展历程</span></a></h2><ol><li>无架构阶段 汇编语言</li><li>萌芽阶段 程序结构设计</li><li>初级阶段 统一建模语言</li><li>高级阶段 4+1视图</li></ol><h2 id="架构的4-1视图" tabindex="-1"><a class="header-anchor" href="#架构的4-1视图"><span>架构的4+1视图</span></a></h2><figure><img src="'+e+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="软件架构风格" tabindex="-1"><a class="header-anchor" href="#软件架构风格"><span>软件架构风格</span></a></h2><h3 id="adl" tabindex="-1"><a class="header-anchor" href="#adl"><span>ADL</span></a></h3><p>ADL是这样一种形式化语言，它再底层予以模型的支持下，为软件系统的概念体系结构建模提供了具体语法和概念框架。如：Aesop、MetaH、C2等</p><p>ADL的三个基本元素</p><ul><li>构件：计算或数据存储单元</li><li>连接件：用于构件之间交互建模的体系结构构造块及其支配这些交互的规则</li><li>架构配置：描述体系结构的构件与链接件的连接图</li></ul><h2 id="基于架构的软件开发方法" tabindex="-1"><a class="header-anchor" href="#基于架构的软件开发方法"><span>基于架构的软件开发方法</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><ul><li>ABSD方法是架构驱动，即强调由业务、质量和功能需求的组合驱动架构设计</li><li>ABSD方法有三个基础。第一个基础是功能的分解。在功能分解中，ABSD方法使用已有的基于模块的内聚和耦合技术；第二个基础是通过选择架构风格来实现质量和业务需求；第三个基础是软件模板的使用</li><li>视角与视图：从不同的视角来检查，所以会有不同的视图</li><li>用例用来捕获功能需求、特定场景用来捕获质量需求</li></ul><h3 id="开发过程" tabindex="-1"><a class="header-anchor" href="#开发过程"><span>开发过程</span></a></h3><figure><img src="'+s+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="软件架构风格-1" tabindex="-1"><a class="header-anchor" href="#软件架构风格-1"><span>软件架构风格</span></a></h2><p>架构风格定义了用于描述系统的术语表和一组指导构建系统的规则</p><figure><img src="'+o+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="数据流风格" tabindex="-1"><a class="header-anchor" href="#数据流风格"><span>数据流风格</span></a></h3><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>批处理序列：大量整体数据、无需用户交互 管道-过滤器：流式数据、弱用户交互</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li>松耦合【高内聚-低耦合】</li><li>良好的重用性/可维护性</li><li>可扩展性【标准接口适配】</li><li>良好的隐蔽性</li><li>支持并行</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li>交互性较差</li><li>复杂性较高</li><li>性能较差（每个过滤器都需要解析与合成数据）</li></ol><h4 id="典型实例" tabindex="-1"><a class="header-anchor" href="#典型实例"><span>典型实例</span></a></h4><p>传统编译器、网络报文处理</p><h3 id="调用-返回风格" tabindex="-1"><a class="header-anchor" href="#调用-返回风格"><span>调用/返回风格</span></a></h3><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ol><li>良好的重用性，只要接口不变可用在其它处</li><li>可维护性好</li><li>可扩展性好，支持递增设计</li></ol><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ol><li>并不是每个系统都方便分层</li><li>很难找到一个合适的、正确的层次抽象方法</li><li>不同层次之间耦合度高的系统很难实现</li></ol><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h4><p>各个层次的组件形成不同功能级别的虚拟机； 多层相互协同工作，而且实现透明</p><h3 id="独立构件风格" tabindex="-1"><a class="header-anchor" href="#独立构件风格"><span>独立构件风格</span></a></h3><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点</span></a></h4><ol><li>松耦合</li><li>良好的重用性/可修改性/可扩展性</li></ol><h4 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点</span></a></h4><ol><li>构件放弃了对系统计算的控制。一个构件触发一个事件时，不能确定其他构件是否会响应它。而且即使它知道事件注册了哪些构件的过程，它也不能保证这些过程被调用的顺序。</li><li>数据交换的问题</li><li>既然过程的语义必须依赖于被处罚事件的上下文约束，关于正确性的推理就存在问题</li></ol><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h4><p>系统由若干子系统构成且成为一个整体；系统有统一的目标；子系统有主从之分；每一子系统有自己的事件收集和处理机制</p><h3 id="事件处理器风格" tabindex="-1"><a class="header-anchor" href="#事件处理器风格"><span>事件处理器风格</span></a></h3><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="虚拟机风格" tabindex="-1"><a class="header-anchor" href="#虚拟机风格"><span>虚拟机风格</span></a></h3><p><img src="'+c+'" alt=" " loading="lazy"><img src="'+d+'" alt=" " loading="lazy"></p><h4 id="解释器架构风格" tabindex="-1"><a class="header-anchor" href="#解释器架构风格"><span>解释器架构风格</span></a></h4><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="规则系统体系结构风格" tabindex="-1"><a class="header-anchor" href="#规则系统体系结构风格"><span>规则系统体系结构风格</span></a></h4><p>基于规则的系统构成：规则集、规则解释器、规则/数据选择及工作内存，一般用在人工智能领域和DSS（决策系统）中 <img src="'+f+'" alt=" " loading="lazy"></p><h3 id="仓库风格" tabindex="-1"><a class="header-anchor" href="#仓库风格"><span>仓库风格</span></a></h3><p><img src="'+m+'" alt=" " loading="lazy"><img src="'+x+'" alt=" " loading="lazy"></p><h3 id="闭环控制风格-过程控制" tabindex="-1"><a class="header-anchor" href="#闭环控制风格-过程控制"><span>闭环控制风格（过程控制）</span></a></h3><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>适用于嵌入式系统，用于解决简单闭环控制问题 经典应用：空调温控，定速巡航</p><h3 id="c2架构风格" tabindex="-1"><a class="header-anchor" href="#c2架构风格"><span>C2架构风格</span></a></h3><figure><img src="'+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本规则</p><ul><li>构件和连接件都有一个顶部和一个底部</li><li>构件的顶部要连接到连接件的底部，构件的地步要连接到连接件的顶部，构件之间不允许直连</li><li>一个连接件可以和任意数目和其他构件和连接件连接</li><li>当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部</li></ul><h3 id="mda" tabindex="-1"><a class="header-anchor" href="#mda"><span>MDA</span></a></h3><ul><li>平台独立模型：具有高抽象层次、独立于任何实现技术的模型</li><li>平台相关模型：为某种特定实现技术量身定做，让你用这种技术中可用的实现构造来描述系统的模型。PIM会被换变换成一个或多个PSM</li><li>代码Code：用源代码对系统的描述（规约）。每个PSM都将被变换成代码</li></ul><h2 id="特定领域软件架构-dssa" tabindex="-1"><a class="header-anchor" href="#特定领域软件架构-dssa"><span>特定领域软件架构（DSSA）</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p>定义：特定领域软件架构以一个特定问题领域为对象，形成领域参考模型、参考需求、参考架构等组成的开发基础架构，支持一个特定领域中多个应用的生成</p><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="参与人员" tabindex="-1"><a class="header-anchor" href="#参与人员"><span>参与人员</span></a></h3><figure><img src="'+j+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="建立过程" tabindex="-1"><a class="header-anchor" href="#建立过程"><span>建立过程</span></a></h3><figure><img src="'+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="三层次模型" tabindex="-1"><a class="header-anchor" href="#三层次模型"><span>三层次模型</span></a></h3><figure><img src="'+y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="软件架构评估" tabindex="-1"><a class="header-anchor" href="#软件架构评估"><span>软件架构评估</span></a></h2><h3 id="质量属性" tabindex="-1"><a class="header-anchor" href="#质量属性"><span>质量属性</span></a></h3><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h3><p>性能是指系统的相应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的个数</p><p>例如：</p><ul><li>同时支持1000并发</li><li>响应时间小于1s</li><li>显示分辨率达到4k</li></ul><figure><img src="'+z+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="可用性" tabindex="-1"><a class="header-anchor" href="#可用性"><span>可用性</span></a></h3><p>可用性是系统能够正常运行的时间比例。经常用两次故障之间的时间长度或者出现故障时能够恢复正常的速度来表示</p><p>例如：</p><ul><li>主服务器故障，1分钟内切换至备用服务器</li><li>系统故障，1小时内修改</li><li>系统支持7*24小时工作</li></ul><figure><img src="'+S+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h3><p>安全性是指系统在向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。安全性又可划分为机密性【信息不泄露给未授权的用户】、完整性【防止信息被篡改】、不可否认性【不可抵赖】及可控性【对信息的传播及内容具有控制的能力】等特性</p><p>例如：</p><ul><li>可抵御SQL注入攻击</li><li>对计算机的操作都有完整记录</li><li>用户信息数据库授权必须保证99.9%可用</li></ul><figure><img src="'+A+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="可修改性" tabindex="-1"><a class="header-anchor" href="#可修改性"><span>可修改性</span></a></h3><p>可修改性是指能够快读地以较高的性能价格比对系统进行变更能力。通常以某些具体的变更为基准，通过考察这些变更的代价衡量可修改性</p><p>例如：</p><ul><li>更改系统报表模块，必须在2人周内完成</li><li>对web界面风格进行修改，修改必须在4人月内完成</li></ul><figure><img src="'+T+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="易用性" tabindex="-1"><a class="header-anchor" href="#易用性"><span>易用性</span></a></h3><p>易用性关注的是对用户来说完成某个期望任务的容易程度和系统所提供的用户支持的种类</p><p>例如</p><ul><li>界面友好</li><li>新用户学习使用系统时间不超过2小时</li></ul><h3 id="可测试性" tabindex="-1"><a class="header-anchor" href="#可测试性"><span>可测试性</span></a></h3><p>软件可测试性是通过测试揭示软件缺陷的容易程度</p><p>例如：</p><ul><li>提供远程调试接口，支持远程调试</li></ul><h2 id="软件架构评估-1" tabindex="-1"><a class="header-anchor" href="#软件架构评估-1"><span>软件架构评估</span></a></h2><ul><li>敏感点是一个或多个构件（和/或构件之间的关系）的特征</li><li>权衡点是影响多个质量属性的特征，是多个质量属性的敏感点</li><li>风险点是指架构设计中潜在的、存在问题的架构决策所带来的隐患</li><li>非风险点是指不会带来隐患，一般以“XXX要求是可以实现（或接收）的”方式表达</li></ul><p>例如：</p><ol><li>对交易请求处理时间的要求将影响系统的数据传输协议和处理过程的设计</li><li>假设每秒中用户交易请求的数量是10个，处理请求的时间为30毫秒，则“在1秒内完成用户的交易请求”这一要求是可以实现的</li><li>目前对系统信用卡支付业务逻辑的描述尚未达成共识，这可能导致部分业务功能模块的重复，影响系统的可修改性</li><li>更改加密的级别将对安全性和性能产生影响</li></ol><h3 id="评估方法" tabindex="-1"><a class="header-anchor" href="#评估方法"><span>评估方法</span></a></h3><ul><li>基于调查问卷（检查表）的方式</li><li>基于度量的方式</li><li>基于场景的方式</li></ul><figure><img src="'+P+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【场景】是从风险承担者的角度与系统交互的简短描述 场景可从六个方面进行描述：刺激源、刺激、制品、环境、响应、响应度量</p><p>【性能场景示例】</p><figure><img src="'+D+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【软件架构分析法（SAAM）】 最初关注可修改性，后扩充到可移植性、可扩充性等</p><figure><img src="'+M+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【架构权衡分析法（ATAM）】 在SAAM发展而来，主要针对：性能、实用性、安全性可修改性，在系统开发之前，对则这些质量属性进行评价和折中 <img src="'+B+'" alt=" " loading="lazy"></p><p>【成本效益分析法（CBAM）】 在ATAM基础上建立的，软件的“经济”模型</p><h2 id="质量效用树" tabindex="-1"><a class="header-anchor" href="#质量效用树"><span>质量效用树</span></a></h2><figure><img src="'+R+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="软件产品线" tabindex="-1"><a class="header-anchor" href="#软件产品线"><span>软件产品线</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><figure><img src="'+C+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="双生命周期模型" tabindex="-1"><a class="header-anchor" href="#双生命周期模型"><span>双生命周期模型</span></a></h3><figure><img src="'+N+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="建立产品线" tabindex="-1"><a class="header-anchor" href="#建立产品线"><span>建立产品线</span></a></h3><figure><img src="'+I+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>将现有产品演化为产品线</li><li>用软件产品线替代现有产品集</li><li>全新软件产品线的演化</li><li>全新软件产品线的开发</li></ul><p>组织结构类型</p><ul><li>设立独立的核心资源小组</li><li>不设立独立的核心资源小组</li><li>动态的组织结构</li></ul><p>要成功实施产品线，主要取决于以下因素</p><ul><li>对该领域具备长期和深厚的经验</li><li>一个用于构建产品的好的核心资源库</li><li>好的产品线架构</li><li>好的管理（软件资源、人员组织、过程）支持</li></ul><h2 id="构件与中间件技术" tabindex="-1"><a class="header-anchor" href="#构件与中间件技术"><span>构件与中间件技术</span></a></h2><h3 id="构件" tabindex="-1"><a class="header-anchor" href="#构件"><span>构件</span></a></h3><h4 id="构件概念" tabindex="-1"><a class="header-anchor" href="#构件概念"><span>构件概念</span></a></h4><ul><li>定义1：软件构件是一种组装单元，它具有规范的接口规约和显示的语境依赖。软件构件可以被独立地部署并由第三方任意地组装</li><li>定义2：构件是某系统中有价值的、几乎独立的并可替换的一个部分，它在良好定义的体系结构语境内满足某清晰的功能</li><li>定义3：构件是一个独立发布的功能部分，可以通过其接口访问它的服务</li></ul><figure><img src="'+O+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="构件特征" tabindex="-1"><a class="header-anchor" href="#构件特征"><span>构件特征</span></a></h4><ul><li>构件系统体系结构由一组平台决策、一组构件框架和构件框架之间的互操作设计组成</li><li>构件框架是一种专门的体系结构（通常围绕一些关键的机制），同时，也是一组固定地作用于构件层次机制的策略</li><li>概念框架的互操作设计包括系统体系结构连接的所有框架间的互操作的规则</li><li>构件是一组通常需要同时部署的原子构件。构件和原子构件之间的区别在于大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署</li><li>一个原子构件是一个模块和一组资源</li><li>模块是一组类和可能的非面向对象的结构提，比如过程或者函数</li><li>资源是一个类型化的项的固定集合</li><li>资源这个概念可以包含代码资源，进而包含模块。问题在于除了编译器编译一个模块或包生成的资源外，还可能存在其他的资源。在“纯对象”的方法中，资源是外部的不可改变的对象，不可改变是因为构件没有持久化的标志，而且复制不能被区分</li></ul><h3 id="构件标准" tabindex="-1"><a class="header-anchor" href="#构件标准"><span>构件标准</span></a></h3><figure><img src="'+V+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="corba" tabindex="-1"><a class="header-anchor" href="#corba"><span>CORBA</span></a></h4><figure><img src="'+w+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件"><span>中间件</span></a></h3><h4 id="中间件概念" tabindex="-1"><a class="header-anchor" href="#中间件概念"><span>中间件概念</span></a></h4><figure><img src="'+q+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="中间件优点" tabindex="-1"><a class="header-anchor" href="#中间件优点"><span>中间件优点</span></a></h4><ol><li>面向需求。即设计师集中精力于业务逻辑本身</li><li>业务的分割和包容性。应用开发人员可以按照不同的业务进行功能的划分，体现为不同的接口或交互模式</li><li>设计与实现隔离。构件对外发声作用或构件间的交互，都是通过接口进行的，构件使用者只需要知道构件的接口，而不必关系其内部实现，这是设计与实现分离的关键</li><li>隔离复杂的系统资源。架构很重要的一个功能就是将系统资源与应用构件隔离，这是保证构件可复用甚至“即插即用”的基础，与中间件的意图也是一致的</li><li>符合标准的交互模型。中间件则实现了架构的模型，实现了标准的协议</li><li>软件复用。中间件提供了构件封装、交互规则、与环境的隔离等机制，这些都为软件复用提供了方便的解决方案</li><li>提供对应用构件的管理。基于中间件的软件可以方便地进行管理，因为i构件总可以通过标识机制进行划分</li></ol><h4 id="中间件分类" tabindex="-1"><a class="header-anchor" href="#中间件分类"><span>中间件分类</span></a></h4><figure><img src="'+F+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="软件复用" tabindex="-1"><a class="header-anchor" href="#软件复用"><span>软件复用</span></a></h3><p>软件复用【重用】是多次不同的软件开发过程中重复使用相同或相似【软件元素】的过程</p><h4 id="构件的复用" tabindex="-1"><a class="header-anchor" href="#构件的复用"><span>构件的复用</span></a></h4><ul><li>检索与提取构件 <ul><li><ol><li>基于关键字的检索</li></ol><ul><li>特点：树形或有向无回路图结构</li></ul></li><li><ol start="2"><li>刻面检索法</li></ol><ul><li>特点：利用Facet描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征</li><li>例如：分多个刻面：1、应用领域；2、使用环境；3、功能</li></ul></li><li><ol start="3"><li>超文本检索法</li></ol><ul><li>特点：按照人类的联想思维方式任意跳转到包含相关概念或构件的文档</li></ul></li></ul></li><li>理解与评价构件 <ul><li><ol><li>要复用构件，准确地理解构件至关重要。特别是对构件修改使用时</li></ol></li><li><ol start="2"><li>为达到目的，必须要求构件的开发过程遵循公共标准</li></ol></li><li><ol start="3"><li>一般构件库的文档中全面而准确地说明一下内容：构件的功能与行为、相关的领域知识、可适应性约束条件与例外情形、可以预见的修改部分及修改方法</li></ol></li></ul></li><li>修改构件 <ul><li><ol><li>理想状态时直接复用构件库中现成的构件，但大多数情况下，必须对构件进行或多或少的修改，以应对新需求</li></ol></li><li><ol start="2"><li>为了减少构件修改的工作量，要求开发人员尽量使构件的功能、行为和接口设计更为抽象化、通用化和参数化。这样，复用者即可通过对实参的选取来调整构件的功能或行为。如果这种调整仍不足以使构件适用于新系统，复用者就必须借助设计信息和文档来修改构件</li></ol></li><li><ol start="3"><li>构件库中若无可修改使用的构件，则按需求开发构件，并存入构件库</li></ol></li></ul></li><li>组装构件 <ul><li>组装的三种方式 <ul><li><ol><li>基于功能的组装：采用子程序调用和参数传递的方式将构件组装起来</li></ol></li><li><ol start="2"><li>基于数据的组装：仍然使传统的子程序调用与参数传递。但它所依赖的软件设计方法不再是功能分解，而是面向数据的设计方式，例如，Jackson系统开发方法</li></ol></li><li><ol start="3"><li>面向对象的组装：如果从类库中检索出来的基类能够完全满足新系统的需求，则可以直接应用。否则，必须以基类为父类，生成响应的子类，以满足新系统的需求</li></ol></li></ul></li><li>构件组装失配问题 <ul><li><ol><li>由构件引起的失配，包括由于系统对构件基础设施、构件控制模型和构件数据模型的假设存在冲突引起的失配</li></ol></li><li><ol start="2"><li>由连接子引起的失配，包括由于系统对构件交互协议、连接子数据模型的假设存在冲突引起的失配</li></ol></li><li><ol start="3"><li>由于系统成分对全局体系结构的假设存在冲突引起的失配等。要解决失配问题，首先需要检测出失配问题，并再次基础上通过适当的手段消除检测出的失配问题</li></ol></li></ul></li></ul></li></ul><h2 id="c-s架构与b-s架构" tabindex="-1"><a class="header-anchor" href="#c-s架构与b-s架构"><span>C/S架构与B/S架构</span></a></h2><figure><img src="'+L+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="常用层次式架构" tabindex="-1"><a class="header-anchor" href="#常用层次式架构"><span>常用层次式架构</span></a></h2><figure><img src="'+H+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mvc架构风格" tabindex="-1"><a class="header-anchor" href="#mvc架构风格"><span>MVC架构风格</span></a></h3><ul><li>Model(模型)：应用程序的主题部分。模型表示业务数据和业务逻辑。一个模型通为多个视图提供数据。提高应用的可重用性</li><li>View（视图）：用户看到并与之交互的界面。接收用户输入数据，向用户展示数据</li><li>Controller（控制器）：用户界面与Model的接口。解释视图的输入，将其解释为系统能够理解的对象，同时识别用户运作，将其解释为模型特定方法的调用。处理来自于模型的事件和模型逻辑执行的结果，调用适当的视图为用户提供反馈</li></ul><p>J2EE体系结构中：</p><ul><li>视图：JSP</li><li>控制器：Servlet</li><li>模型：Entity Bean、Session Bean</li></ul><figure><img src="'+U+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mvp架构风格" tabindex="-1"><a class="header-anchor" href="#mvp架构风格"><span>MVP架构风格</span></a></h3><p>MVP是MVC的变种，其优点包括</p><ul><li>模型与视图完全分离，可以修改视图而不影响模型</li><li>可以更高效地使用模型，因为所有交互都发生在一个地方【Presenter】内部</li><li>可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑</li><li>如果把逻辑放在Presenter中，就可以脱离用户接口来测试这些逻辑（单元测试）</li></ul><figure><img src="'+W+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mvvm架构风格" tabindex="-1"><a class="header-anchor" href="#mvvm架构风格"><span>MVVM架构风格</span></a></h3><figure><img src="'+Z+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="ria架构风格" tabindex="-1"><a class="header-anchor" href="#ria架构风格"><span>RIA架构风格</span></a></h3><figure><img src="'+J+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优点</p><ul><li>反应速度快</li><li>易于传播</li><li>交互性强</li></ul><h2 id="数据访问层设计" tabindex="-1"><a class="header-anchor" href="#数据访问层设计"><span>数据访问层设计</span></a></h2><p>ORM：对象与关系数据之间的映射</p><figure><img src="'+X+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="物联网分层架构" tabindex="-1"><a class="header-anchor" href="#物联网分层架构"><span>物联网分层架构</span></a></h2><p><img src="'+G+'" alt=" " loading="lazy"><img src="'+Q+'" alt=" " loading="lazy"></p><h2 id="大数据分层架构" tabindex="-1"><a class="header-anchor" href="#大数据分层架构"><span>大数据分层架构</span></a></h2><figure><img src="'+K+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="wen-service-web服务" tabindex="-1"><a class="header-anchor" href="#wen-service-web服务"><span>Wen Service（WEB服务）</span></a></h2><figure><img src="'+Y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="rest-表属性状态转移" tabindex="-1"><a class="header-anchor" href="#rest-表属性状态转移"><span>REST（表属性状态转移）</span></a></h2><p>REST是一种通常使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性</p><p>添加用户 GET /api/addUser -&gt; POST /api/User 删除用户 GET /api/deleteUser -&gt; DELETE /api/User 修改用户 GET /api/updateUser -&gt; PUT /api/User</p><p>REST的5个原则</p><ul><li>网络上的所有事务都被抽象为资源</li><li>每个资源对应一个唯一的资源标识</li><li>通过通用的连接件接口对资源进行操作</li><li>对资源的各种操作不会改变资源的标识</li><li>所有的操作都是无状态的</li></ul><h2 id="esb-企业服务总线" tabindex="-1"><a class="header-anchor" href="#esb-企业服务总线"><span>ESB（企业服务总线）</span></a></h2><figure><img src="'+$+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>提供位置透明性的消息路由和寻址服务</li><li>提供服务注册和命名的管理功能</li><li>支持多种的消息传递范型</li><li>支持多种可以广泛使用的传输协议</li><li>支持多种数据格式及其相互转换</li><li>提供日志和监控功能</li></ul><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h2><p>顾名思义，就是很小的服务，所以它属于面向服务架构中的一种</p><h3 id="优点-3" tabindex="-1"><a class="header-anchor" href="#优点-3"><span>优点</span></a></h3><figure><img src="'+ii+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="模式方案" tabindex="-1"><a class="header-anchor" href="#模式方案"><span>模式方案</span></a></h3><figure><img src="'+ai+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="微服务与soa的区别" tabindex="-1"><a class="header-anchor" href="#微服务与soa的区别"><span>微服务与SOA的区别</span></a></h3><ul><li>微服务比SOA更精细，可以独立进程方式存在</li><li>微服务接口更通用化，如用HTTP RESTful，各种终端都可调用，语言无关，平台无关</li><li>更倾向于分布式部署，互联网场景更适合</li></ul><h2 id="云计算" tabindex="-1"><a class="header-anchor" href="#云计算"><span>云计算</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>云计算是集合了大量计算设备和资源，对用户屏蔽底层差异的分布式处理架构，其用户与提供实际服务的计算资源是相分离的</p><h3 id="优点-4" tabindex="-1"><a class="header-anchor" href="#优点-4"><span>优点</span></a></h3><p>超大规模、虚拟化、高可靠性、高可伸缩性、按需服务、成本低【前期投入低、综合使用成本也低】</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><h4 id="按服务类型分类" tabindex="-1"><a class="header-anchor" href="#按服务类型分类"><span>按服务类型分类</span></a></h4><ul><li>Sass【软件即服务】：基于多租户技术实现，直接提供应用程序</li><li>Paas【平台即服务】：虚拟中间件服务器、运行环境和操作系统</li><li>Iaas【基础设施即服务】：包括服务器、存储和网络等服务</li></ul><h4 id="按部署方式分类" tabindex="-1"><a class="header-anchor" href="#按部署方式分类"><span>按部署方式分类</span></a></h4><ul><li>公有云：面向互联网用户需求，通过开放网络提供云计算服务</li><li>私有云：面向企业内部提供云计算服务</li><li>混合云：兼顾以上两种情况的云计算服务</li></ul><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h3><figure><img src="'+li+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【管理层】：提供对所有层次云计算服务的管理功能 【用户访问层】：方便用户使用云计算服务所需的各种支撑服务，针对每个层次的云计算服务都需要提供响应的访问接口 【应用层】：提供软件服务，如：财务管理，客户关系管理，商业智能 【平台层】：为用户提供对资源层服务的封装，使用户可以构建自己的应用 【资源层】：提供虚拟化的资源，从而隐藏物理资源的复杂性。如：服务器，存储</p><h2 id="云原生架构" tabindex="-1"><a class="header-anchor" href="#云原生架构"><span>云原生架构</span></a></h2><p>使基于分布部署和统一管理的分布式云，以容器、微服务、DevOps等技术为基础建立的一套云技术产品体系</p><p><img src="'+ti+'" alt=" " loading="lazy"><img src="'+ni+'" alt=" " loading="lazy"></p><h3 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h3><ul><li>服务化原则：使用微服务</li><li>弹性原则：可根据业务变化自动伸缩</li><li>可观测原则：通过日志、链路跟踪和度量</li><li>韧性原则：面对异常的抵御能力</li><li>所有过程自动化原则：自动化交付工具</li><li>零信任原则：默认不信任网络内部和外部的任何人/设备/系统</li><li>架构持续演进原则：业务高速迭代情况下的架构与业务平衡</li></ul><h3 id="架构模式" tabindex="-1"><a class="header-anchor" href="#架构模式"><span>架构模式</span></a></h3><ul><li>服务化架构模式：典型代表【微服务】，服务拆分使维护压力大增</li><li>Mesh化架构模式：把中间件框架（RPC、缓存、异步信息）从业务进程中分离，由Mesh进程完成</li><li>Serverless模式：非常适合于事件驱动的数据计算任务</li><li>存储计算分离模式：各类暂态数据用云服务保存</li><li>分布式事务模式：解决微服务模式中多数据源事务问题</li><li>可观测架构：包括Logging、Tracing、Metrics三个方面</li><li>事件驱动架构：本质上是一种应用/组件间的集成架构模式</li></ul><h3 id="反模式" tabindex="-1"><a class="header-anchor" href="#反模式"><span>反模式</span></a></h3><ol><li>庞大的单体应用【需要多人开发的业务模块，考虑通过服务化进行拆分，并让组织与架构匹配】</li><li>单体应用“硬拆”为微服务（服务拆分要适度）【小规模软件的服务拆分（为拆而拆）、数据依赖（服务间数据依赖）、性能降低】</li><li>缺乏自动化能力的微服务【手动维护大龄微服务是不现实的】</li></ol><h3 id="微服务设计约束" tabindex="-1"><a class="header-anchor" href="#微服务设计约束"><span>微服务设计约束</span></a></h3><ol><li>微服务个体约束【每个微服务都是独立的，修改一个微服务不能影响另一个微服务】</li><li>微服务与微服务之间的横向关系【通过第三方服务注册中心来满足服务的可发现性】</li><li>微服务与数据层之间的纵向约束【数据是微服务的“私产”，访问时需要通过微服务】</li><li>全局视角下的微服务分布式约束【高效运维整个系统】</li></ol><h2 id="边缘计算" tabindex="-1"><a class="header-anchor" href="#边缘计算"><span>边缘计算</span></a></h2><p>【边缘计算】是指在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务 【边缘计算的本质】计算处理职能的本地化</p><figure><img src="'+ei+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="大型网站系统架构演化" tabindex="-1"><a class="header-anchor" href="#大型网站系统架构演化"><span>大型网站系统架构演化</span></a></h2><figure><img src="'+si+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第一阶段-单体架构到第二阶段-垂直架构" tabindex="-1"><a class="header-anchor" href="#第一阶段-单体架构到第二阶段-垂直架构"><span>第一阶段：单体架构到第二阶段：垂直架构</span></a></h3><figure><img src="'+oi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第三阶段-使用缓存改善网站性能" tabindex="-1"><a class="header-anchor" href="#第三阶段-使用缓存改善网站性能"><span>第三阶段：使用缓存改善网站性能</span></a></h3><figure><img src="'+gi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="常见缓存技术" tabindex="-1"><a class="header-anchor" href="#常见缓存技术"><span>常见缓存技术</span></a></h4><ul><li>MemCache：Memcache是一个高性能的分布式的内存对象缓存系统，用于动态Web应用以减轻数据库负载。Memcache通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等</li><li>Redis:Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li><li>Squid:Squid是一个高性能的代理缓存服务器，Squid支持FTP、gopher、HTTPS和HTTP协议</li></ul><h4 id="缓存与数据库的数据一致性问题" tabindex="-1"><a class="header-anchor" href="#缓存与数据库的数据一致性问题"><span>缓存与数据库的数据一致性问题</span></a></h4><p><img src="'+pi+'" alt=" " loading="lazy"><img src="'+hi+'" alt=" " loading="lazy"></p><h4 id="缓存技术对比" tabindex="-1"><a class="header-anchor" href="#缓存技术对比"><span>缓存技术对比</span></a></h4><figure><img src="'+ri+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis分布式存储方案" tabindex="-1"><a class="header-anchor" href="#redis分布式存储方案"><span>Redis分布式存储方案</span></a></h4><figure><img src="'+ci+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis集群切片的常见方式" tabindex="-1"><a class="header-anchor" href="#redis集群切片的常见方式"><span>Redis集群切片的常见方式</span></a></h4><figure><img src="'+di+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis数据分片方案" tabindex="-1"><a class="header-anchor" href="#redis数据分片方案"><span>Redis数据分片方案</span></a></h4><figure><img src="'+ui+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis数据类型" tabindex="-1"><a class="header-anchor" href="#redis数据类型"><span>Redis数据类型</span></a></h4><figure><img src="'+fi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis数据淘汰算法" tabindex="-1"><a class="header-anchor" href="#redis数据淘汰算法"><span>Redis数据淘汰算法</span></a></h4><figure><img src="'+mi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis的持久化" tabindex="-1"><a class="header-anchor" href="#redis的持久化"><span>Redis的持久化</span></a></h4><p>Redis的持久化主要有两种方式：RDB和AOF</p><ul><li>RDB：传统数据库中快照的思想。指定时间间隔将数据进行快照存储</li><li>AOF：传统数据库中日志的思想，把每条改变数据集的命令追加到AOF文件末尾，这样出问题了，可以重新执行AOF文件中的命令来重建数据集</li></ul><figure><img src="'+xi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="redis常见问题" tabindex="-1"><a class="header-anchor" href="#redis常见问题"><span>Redis常见问题</span></a></h4><h5 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h5><p>大部分缓存失效 -》 数据库崩溃</p><p>解决方案</p><ol><li>使用锁或队列：保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上</li><li>为key设置不同的缓存失效时间：在固定的一个缓存时间的基础上+随机一个时间作为缓存失效时间</li><li>二级缓存：设置一个有时间限制的缓存+一个无时间限制的缓存。避免大规模访问数据库</li></ol><h5 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h5><p>查询无数据返回 =》 直接查数据库</p><p>解决方案</p><ol><li>如果查询结果为空，直接设置一个默认值放到缓存，这样第二次到缓存中获取就有值了，设置一个不超过5分钟的过期时间，以便能正常更新缓存</li><li>设置布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力</li></ol><h5 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热"><span>缓存预热</span></a></h5><p>系统上线后，将相关需要缓存数据直接加到缓存系统中</p><p>解决方案</p><ol><li>直接写个缓存刷新页面，上线时手工操作</li><li>数据量不大时，可以在项目启动的时候自动进行加载</li><li>定时刷新缓存</li></ol><h5 id="缓存更新" tabindex="-1"><a class="header-anchor" href="#缓存更新"><span>缓存更新</span></a></h5><p>除Redis系统自带的缓存失效策略，常见采用一下两种</p><ol><li>定时清理过期的缓存</li><li>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的化就去底层系统得到新数据并更新缓存</li></ol><h5 id="缓存降级" tabindex="-1"><a class="header-anchor" href="#缓存降级"><span>缓存降级</span></a></h5><p>降级的目的是保证核心服务可用。即使是有损的，而且有些服务是无法降级的（如电商的购物流程等）；在进行降级之前要对系统进行梳理，从而梳理出哪些必须保护，哪些可降级</p><h3 id="第四阶段-使用服务集群改善网站并发处理能力" tabindex="-1"><a class="header-anchor" href="#第四阶段-使用服务集群改善网站并发处理能力"><span>第四阶段：使用服务集群改善网站并发处理能力</span></a></h3><figure><img src="'+bi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>系统演变到这里，将会出现下面几个问题： 1、用户的请求由谁来转发到具体的应用服务器 2、用户如果每次访问到的服务器不一样，那么如何维护session的一致性</p><p>解决方案</p><ol><li>负载均衡</li><li>有状态与无状态问题</li></ol><h4 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h4><figure><img src="'+Ei+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>应用层负载均衡</p><ol><li>http重定向。HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群 <ul><li>特点：实现简单，但性能较差</li></ul></li><li>反向代理服务器。在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算哒转发到具体的服务器。常用的apache、nginx都可以充当反向代理服务器 <ul><li>特点：部署简单，但代理服务器可能成为性能瓶颈</li></ul></li></ol><p>传输层负载均衡</p><ol><li>DNS域名解析负载均衡。DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP <ul><li>特点：效率比HTTP重定向高，减少维护负载均衡服务器成本。但一个应用服务器故障，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理</li></ul></li><li>基于NAT的负载均衡。基于NAT的负载均衡将一个外部IP地址映射为多个IP地址，对每次连接请求动态地转换为一个内部节点的地址 <ul><li>特点：技术较为成熟，一般在网关位置，可以通过硬件实现。像四层交换机一般就采用了这种技术</li></ul></li></ol><p>算法</p><ul><li>静态算法（不考虑动态负载） <ol><li>轮转算法：轮流将服务请求（任务）调度给不同的节点（即：服务器）</li><li>加权轮转算法：考虑不同节点处理能力的差异</li><li>源地址哈希散列算法：根据请求的源IP地址，作为散列键从静态分配的散列表找出对应的节点</li><li>目标地址哈希散列算法：根据请求目标IP做散列找出对应节点</li><li>随机算法：随机分配，简单，但不可控</li></ol></li><li>动态算法（考虑动态负载） <ol><li>最少连接数算法：新请求分配给当前活动请求数量最少的节点，每个节点处理能力相同的情况下</li><li>加权最小连接数算法：考虑节点处理能力不同，按最小连接数分配</li><li>加权百分比算法：考虑了节点的利用率、硬盘速率、进程个数等，使用利用率来表现剩余处理能力</li></ol></li></ul><h4 id="有状态与无状态" tabindex="-1"><a class="header-anchor" href="#有状态与无状态"><span>有状态与无状态</span></a></h4><ul><li>无状态服务对单次请求的处理，不依赖其他请求，也就是说，处理一次请求所需的全部信息，要么都包含在这个请求里，要么可以从外部获取到（比如说数据库），服务器本身不存储任何信息</li><li>有状态服务则相反，他会在自身保存一些数据，先后的请求时有关联的</li></ul><h5 id="session共享机制" tabindex="-1"><a class="header-anchor" href="#session共享机制"><span>Session共享机制</span></a></h5><figure><img src="'+_i+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第五阶段-数据库读写分离" tabindex="-1"><a class="header-anchor" href="#第五阶段-数据库读写分离"><span>第五阶段：数据库读写分离</span></a></h3><figure><img src="'+ji+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主从数据库结构特点：</p><ol><li>一般：一主多从，也可以多主多从</li><li>主库做写操作，从库做读操作</li></ol><p>主从复制步骤：</p><ol><li>主库更新数据完成前，将操作写binlog日志文件</li><li>从库打开I/O线程与主库连接，做binlog dump process，并将事件写入中继日志</li><li>从库执行中继日志事件，保持与主库一致</li></ol><h3 id="第六阶段-使用反向代理和cdn加速网站响应" tabindex="-1"><a class="header-anchor" href="#第六阶段-使用反向代理和cdn加速网站响应"><span>第六阶段：使用反向代理和CDN加速网站响应</span></a></h3><figure><img src="'+vi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>CDN的全程是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的性能瓶颈和环节，使内容传输得更快、更稳定</p><h3 id="第七阶段-使用分布式文件系统和分布式数据库系统" tabindex="-1"><a class="header-anchor" href="#第七阶段-使用分布式文件系统和分布式数据库系统"><span>第七阶段：使用分布式文件系统和分布式数据库系统</span></a></h3><figure><img src="'+yi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第八阶段-使用nosql和搜索引擎" tabindex="-1"><a class="header-anchor" href="#第八阶段-使用nosql和搜索引擎"><span>第八阶段：使用NoSQL和搜索引擎</span></a></h3><figure><img src="'+ki+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第九阶段-业务拆分" tabindex="-1"><a class="header-anchor" href="#第九阶段-业务拆分"><span>第九阶段：业务拆分</span></a></h3><figure><img src="'+zi+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="第十阶段-分布式服务" tabindex="-1"><a class="header-anchor" href="#第十阶段-分布式服务"><span>第十阶段：分布式服务</span></a></h3><figure><img src="'+Si+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',308)]))}const Bi=a(Ai,[["render",Ti],["__file","04.软件架构设计.html.vue"]]),Ri=JSON.parse('{"path":"/study/%E8%BD%AF%E8%80%83/04.%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html","title":"软件架构设计","lang":"zh-CN","frontmatter":{"title":"软件架构设计","icon":"sheji","order":4,"date":"2024-07-05T00:00:00.000Z","category":["软考"],"tag":["软考"],"description":"软件架构的概念 软件架构 = 软件体系结构 架构设计就是需求分配，即将满足需求的职责分配到组件上 架构的本质 软件架构为软件系统提供了一个结构、行为和属性的高级抽象 软件架构风格是特定应用领域的惯用模式，架构定义一个词汇表和一组约束 架构的作用 软件架构是项目干系人进行交流的手段 软件架构是可传递和可复用的模型，通过研究软件架构可能预测软件的质量 软件...","head":[["meta",{"property":"og:url","content":"https://luotianxu1.github.io/study/%E8%BD%AF%E8%80%83/04.%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:title","content":"软件架构设计"}],["meta",{"property":"og:description","content":"软件架构的概念 软件架构 = 软件体系结构 架构设计就是需求分配，即将满足需求的职责分配到组件上 架构的本质 软件架构为软件系统提供了一个结构、行为和属性的高级抽象 软件架构风格是特定应用领域的惯用模式，架构定义一个词汇表和一组约束 架构的作用 软件架构是项目干系人进行交流的手段 软件架构是可传递和可复用的模型，通过研究软件架构可能预测软件的质量 软件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luotianxu1.github.io/img/softExamination/41.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T09:24:37.000Z"}],["meta",{"property":"article:author","content":"罗天旭"}],["meta",{"property":"article:tag","content":"软考"}],["meta",{"property":"article:published_time","content":"2024-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T09:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件架构设计\\",\\"image\\":[\\"https://luotianxu1.github.io/img/softExamination/41.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/42.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/47.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/48.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/49.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/50.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/51.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/52.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/53.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/54.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/55.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/56.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/57.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/58.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/59.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/43.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/44.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/45.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/46.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/60.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/61.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/62.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/63.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/64.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/65.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/66.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/67.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/68.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/69.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/70.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/71.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/72.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/74.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/77.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/78.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/75.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/76.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/79.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/80.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/81.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/82.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/83.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/84.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/85.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/86.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/87.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/88.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/89.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/90.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/91.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/92.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/93.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/94.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/95.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/96.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/97.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/98.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/99.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/100.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/101.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/102.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/103.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/104.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/105.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/106.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/107.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/108.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/109.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/110.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/111.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/112.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/113.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/114.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/115.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/116.jpg\\",\\"https://luotianxu1.github.io/img/softExamination/117.jpg\\"],\\"datePublished\\":\\"2024-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T09:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"罗天旭\\",\\"url\\":\\"https://luotianxu1.github.io\\",\\"email\\":\\"1265062404@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"软件架构的概念","slug":"软件架构的概念","link":"#软件架构的概念","children":[]},{"level":2,"title":"架构的本质","slug":"架构的本质","link":"#架构的本质","children":[]},{"level":2,"title":"架构的作用","slug":"架构的作用","link":"#架构的作用","children":[]},{"level":2,"title":"架构的发展历程","slug":"架构的发展历程","link":"#架构的发展历程","children":[]},{"level":2,"title":"架构的4+1视图","slug":"架构的4-1视图","link":"#架构的4-1视图","children":[]},{"level":2,"title":"软件架构风格","slug":"软件架构风格","link":"#软件架构风格","children":[{"level":3,"title":"ADL","slug":"adl","link":"#adl","children":[]}]},{"level":2,"title":"基于架构的软件开发方法","slug":"基于架构的软件开发方法","link":"#基于架构的软件开发方法","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"开发过程","slug":"开发过程","link":"#开发过程","children":[]}]},{"level":2,"title":"软件架构风格","slug":"软件架构风格-1","link":"#软件架构风格-1","children":[{"level":3,"title":"数据流风格","slug":"数据流风格","link":"#数据流风格","children":[]},{"level":3,"title":"调用/返回风格","slug":"调用-返回风格","link":"#调用-返回风格","children":[]},{"level":3,"title":"独立构件风格","slug":"独立构件风格","link":"#独立构件风格","children":[]},{"level":3,"title":"事件处理器风格","slug":"事件处理器风格","link":"#事件处理器风格","children":[]},{"level":3,"title":"虚拟机风格","slug":"虚拟机风格","link":"#虚拟机风格","children":[]},{"level":3,"title":"仓库风格","slug":"仓库风格","link":"#仓库风格","children":[]},{"level":3,"title":"闭环控制风格（过程控制）","slug":"闭环控制风格-过程控制","link":"#闭环控制风格-过程控制","children":[]},{"level":3,"title":"C2架构风格","slug":"c2架构风格","link":"#c2架构风格","children":[]},{"level":3,"title":"MDA","slug":"mda","link":"#mda","children":[]}]},{"level":2,"title":"特定领域软件架构（DSSA）","slug":"特定领域软件架构-dssa","link":"#特定领域软件架构-dssa","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"参与人员","slug":"参与人员","link":"#参与人员","children":[]},{"level":3,"title":"建立过程","slug":"建立过程","link":"#建立过程","children":[]},{"level":3,"title":"三层次模型","slug":"三层次模型","link":"#三层次模型","children":[]}]},{"level":2,"title":"软件架构评估","slug":"软件架构评估","link":"#软件架构评估","children":[{"level":3,"title":"质量属性","slug":"质量属性","link":"#质量属性","children":[]},{"level":3,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":3,"title":"可用性","slug":"可用性","link":"#可用性","children":[]},{"level":3,"title":"安全性","slug":"安全性","link":"#安全性","children":[]},{"level":3,"title":"可修改性","slug":"可修改性","link":"#可修改性","children":[]},{"level":3,"title":"易用性","slug":"易用性","link":"#易用性","children":[]},{"level":3,"title":"可测试性","slug":"可测试性","link":"#可测试性","children":[]}]},{"level":2,"title":"软件架构评估","slug":"软件架构评估-1","link":"#软件架构评估-1","children":[{"level":3,"title":"评估方法","slug":"评估方法","link":"#评估方法","children":[]}]},{"level":2,"title":"质量效用树","slug":"质量效用树","link":"#质量效用树","children":[]},{"level":2,"title":"软件产品线","slug":"软件产品线","link":"#软件产品线","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"双生命周期模型","slug":"双生命周期模型","link":"#双生命周期模型","children":[]},{"level":3,"title":"建立产品线","slug":"建立产品线","link":"#建立产品线","children":[]}]},{"level":2,"title":"构件与中间件技术","slug":"构件与中间件技术","link":"#构件与中间件技术","children":[{"level":3,"title":"构件","slug":"构件","link":"#构件","children":[]},{"level":3,"title":"构件标准","slug":"构件标准","link":"#构件标准","children":[]},{"level":3,"title":"中间件","slug":"中间件","link":"#中间件","children":[]},{"level":3,"title":"软件复用","slug":"软件复用","link":"#软件复用","children":[]}]},{"level":2,"title":"C/S架构与B/S架构","slug":"c-s架构与b-s架构","link":"#c-s架构与b-s架构","children":[]},{"level":2,"title":"常用层次式架构","slug":"常用层次式架构","link":"#常用层次式架构","children":[{"level":3,"title":"MVC架构风格","slug":"mvc架构风格","link":"#mvc架构风格","children":[]},{"level":3,"title":"MVP架构风格","slug":"mvp架构风格","link":"#mvp架构风格","children":[]},{"level":3,"title":"MVVM架构风格","slug":"mvvm架构风格","link":"#mvvm架构风格","children":[]},{"level":3,"title":"RIA架构风格","slug":"ria架构风格","link":"#ria架构风格","children":[]}]},{"level":2,"title":"数据访问层设计","slug":"数据访问层设计","link":"#数据访问层设计","children":[]},{"level":2,"title":"物联网分层架构","slug":"物联网分层架构","link":"#物联网分层架构","children":[]},{"level":2,"title":"大数据分层架构","slug":"大数据分层架构","link":"#大数据分层架构","children":[]},{"level":2,"title":"Wen Service（WEB服务）","slug":"wen-service-web服务","link":"#wen-service-web服务","children":[]},{"level":2,"title":"REST（表属性状态转移）","slug":"rest-表属性状态转移","link":"#rest-表属性状态转移","children":[]},{"level":2,"title":"ESB（企业服务总线）","slug":"esb-企业服务总线","link":"#esb-企业服务总线","children":[]},{"level":2,"title":"微服务","slug":"微服务","link":"#微服务","children":[{"level":3,"title":"优点","slug":"优点-3","link":"#优点-3","children":[]},{"level":3,"title":"模式方案","slug":"模式方案","link":"#模式方案","children":[]},{"level":3,"title":"微服务与SOA的区别","slug":"微服务与soa的区别","link":"#微服务与soa的区别","children":[]}]},{"level":2,"title":"云计算","slug":"云计算","link":"#云计算","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"优点","slug":"优点-4","link":"#优点-4","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"架构","slug":"架构","link":"#架构","children":[]}]},{"level":2,"title":"云原生架构","slug":"云原生架构","link":"#云原生架构","children":[{"level":3,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]},{"level":3,"title":"架构模式","slug":"架构模式","link":"#架构模式","children":[]},{"level":3,"title":"反模式","slug":"反模式","link":"#反模式","children":[]},{"level":3,"title":"微服务设计约束","slug":"微服务设计约束","link":"#微服务设计约束","children":[]}]},{"level":2,"title":"边缘计算","slug":"边缘计算","link":"#边缘计算","children":[]},{"level":2,"title":"大型网站系统架构演化","slug":"大型网站系统架构演化","link":"#大型网站系统架构演化","children":[{"level":3,"title":"第一阶段：单体架构到第二阶段：垂直架构","slug":"第一阶段-单体架构到第二阶段-垂直架构","link":"#第一阶段-单体架构到第二阶段-垂直架构","children":[]},{"level":3,"title":"第三阶段：使用缓存改善网站性能","slug":"第三阶段-使用缓存改善网站性能","link":"#第三阶段-使用缓存改善网站性能","children":[]},{"level":3,"title":"第四阶段：使用服务集群改善网站并发处理能力","slug":"第四阶段-使用服务集群改善网站并发处理能力","link":"#第四阶段-使用服务集群改善网站并发处理能力","children":[]},{"level":3,"title":"第五阶段：数据库读写分离","slug":"第五阶段-数据库读写分离","link":"#第五阶段-数据库读写分离","children":[]},{"level":3,"title":"第六阶段：使用反向代理和CDN加速网站响应","slug":"第六阶段-使用反向代理和cdn加速网站响应","link":"#第六阶段-使用反向代理和cdn加速网站响应","children":[]},{"level":3,"title":"第七阶段：使用分布式文件系统和分布式数据库系统","slug":"第七阶段-使用分布式文件系统和分布式数据库系统","link":"#第七阶段-使用分布式文件系统和分布式数据库系统","children":[]},{"level":3,"title":"第八阶段：使用NoSQL和搜索引擎","slug":"第八阶段-使用nosql和搜索引擎","link":"#第八阶段-使用nosql和搜索引擎","children":[]},{"level":3,"title":"第九阶段：业务拆分","slug":"第九阶段-业务拆分","link":"#第九阶段-业务拆分","children":[]},{"level":3,"title":"第十阶段：分布式服务","slug":"第十阶段-分布式服务","link":"#第十阶段-分布式服务","children":[]}]}],"git":{"createdTime":1726046677000,"updatedTime":1726046677000,"contributors":[{"name":"罗天旭","email":"1265062404@qq.com","commits":1}]},"readingTime":{"minutes":27.52,"words":8256},"filePathRelative":"study/软考/04.软件架构设计.md","localizedDate":"2024年7月5日","excerpt":"<h2>软件架构的概念</h2>\\n<p>软件架构 = 软件体系结构</p>\\n<p>架构设计就是需求分配，即将满足需求的职责分配到组件上</p>\\n<h2>架构的本质</h2>\\n<ol>\\n<li>软件架构为软件系统提供了一个结构、行为和属性的高级抽象</li>\\n<li>软件架构风格是特定应用领域的惯用模式，架构定义一个词汇表和一组约束</li>\\n</ol>\\n<h2>架构的作用</h2>\\n<ol>\\n<li>软件架构是项目干系人进行交流的手段</li>\\n<li>软件架构是可传递和可复用的模型，通过研究软件架构可能预测软件的质量</li>\\n<li>软件架构使推理和控制的更改更加简单，有助于循序渐进的原型设计，可以作为培训的基础</li>\\n</ol>","autoDesc":true}');export{Bi as comp,Ri as data};
